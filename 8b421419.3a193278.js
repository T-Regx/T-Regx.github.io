(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{160:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return l}));n(233),n(238),n(229),n(246),n(248),n(217);var a=n(209);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={id:"match-groups",title:"Capturing groups"},i=[{value:"Overview",id:"overview",children:[]},{value:"Group details",id:"group-details",children:[{value:"Offsets",id:"offsets",children:[]},{value:"Optional groups",id:"optional-groups",children:[]},{value:"Index, name and identifier",id:"index-name-and-identifier",children:[]}]},{value:"Group is matched",id:"group-is-matched",children:[]},{value:"Group exists",id:"group-exists",children:[]},{value:"Composite groups",id:"composite-groups",children:[{value:"Group names",id:"group-names",children:[]},{value:"Groups count",id:"groups-count",children:[]}]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"Groups In-Depth",id:"groups-in-depth",children:[{value:"Invalid group identifiers",id:"invalid-group-identifiers",children:[]}]}],c={rightToc:i},p="wrapper";function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(p,r({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When using ",Object(a.b)("inlineCode",{parentName:"p"},"pattern()->match()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"->replace->callback()"),", some methods receive a callback that accepts\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," details object. These methods are:\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-first"}),Object(a.b)("inlineCode",{parentName:"a"},"first()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-first"}),Object(a.b)("inlineCode",{parentName:"a"},"forFirst()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-each"}),Object(a.b)("inlineCode",{parentName:"a"},"forEach()")),"/",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-each"}),Object(a.b)("inlineCode",{parentName:"a"},"iterate()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-map"}),Object(a.b)("inlineCode",{parentName:"a"},"map()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-flat-map"}),Object(a.b)("inlineCode",{parentName:"a"},"flatMap()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/replace-callback"}),Object(a.b)("inlineCode",{parentName:"a"},"callback()")),"."),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"This page only concerns ",Object(a.b)("strong",{parentName:"p"},"capturing groups")," of ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match")),", specifically. See ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," details for more throughout documentation.")),Object(a.b)("p",null,"Using ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," details, you gain access complete information about capturing groups:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#group-details"}),Object(a.b)("inlineCode",{parentName:"a"},"group(int|string)"))," - capturing group details. If group is matched, below methods are available:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"matched()")," - whether the group was matched by the subject"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"text()")," - value of the group"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"toInt()"),"/",Object(a.b)("inlineCode",{parentName:"li"},"isInt()")," - allow you to handle integers safely"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#offsets"}),"offsets of matched values")," in the subject:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",Object(a.b)("inlineCode",{parentName:"li"},"offset()")),Object(a.b)("li",{parentName:"ul"},"byte offsets - ",Object(a.b)("inlineCode",{parentName:"li"},"byteOffset()")))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#optional-groups"}),Object(a.b)("inlineCode",{parentName:"a"},"orReturn()")),"/",Object(a.b)("a",r({parentName:"li"},{href:"#optional-groups"}),Object(a.b)("inlineCode",{parentName:"a"},"orElse()")),"/",Object(a.b)("a",r({parentName:"li"},{href:"#optional-groups"}),Object(a.b)("inlineCode",{parentName:"a"},"orThrow()"))," - returns a group, or controls the absence of the group"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#index-name-and-identifier"}),Object(a.b)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of the capturing group in a pattern"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#index-name-and-identifier"}),Object(a.b)("inlineCode",{parentName:"a"},"name()"))," - name of the capturing group, or ",Object(a.b)("inlineCode",{parentName:"li"},"null")," of group is not named"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#index-name-and-identifier"}),Object(a.b)("inlineCode",{parentName:"a"},"usedIdentifier()"))," - either ",Object(a.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(a.b)("inlineCode",{parentName:"li"},"name()"),", depending on the argument of ",Object(a.b)("inlineCode",{parentName:"li"},"group(int|string)")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#group-is-matched"}),Object(a.b)("inlineCode",{parentName:"a"},"matched(int|string)"))," - whether the group was matched by the subject"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#group-exists"}),Object(a.b)("inlineCode",{parentName:"a"},"hasGroup(int|string)"))," - whether group was used in a pattern"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#composite-groups"}),Object(a.b)("inlineCode",{parentName:"a"},"groups()")),"/",Object(a.b)("a",r({parentName:"li"},{href:"#composite-groups"}),Object(a.b)("inlineCode",{parentName:"a"},"namedGroups()"))," - interface for composite operations for all groups"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#group-names"}),Object(a.b)("inlineCode",{parentName:"a"},"groupNames()"))," - string list of named groups used in a pattern"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#groups-count"}),Object(a.b)("inlineCode",{parentName:"a"},"groupsCount()"))," - counts number of capturing groups (without duplicates of named and regular groups)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#other-occurrences"}),Object(a.b)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences of the group")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"With PHP, all groups' syntax: ",Object(a.b)("inlineCode",{parentName:"p"},"(?<name>)"),", ",Object(a.b)("inlineCode",{parentName:"p"},"(?'name')")," and ",Object(a.b)("inlineCode",{parentName:"p"},"(?P<name>)"),' are considered "named". Regular, indexed groups\nare use with syntax ',Object(a.b)("inlineCode",{parentName:"p"},"()"),". Group ",Object(a.b)("inlineCode",{parentName:"p"},"(?:)")," is considered a non-capturing group.")),Object(a.b)("h2",{id:"group-details"},"Group details"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p) ->match($s) ->iterate(function (Match $match) {\n    \n    $match->group('value')->text();     // '168' (string)\n    $match->group('value')->isInt();    // true  (boolean)\n    $match->group('value')->toInt();    // 168   (int)\n    \n    $match->group('unit')->offset();    // 13\n    $match->group('unit')->text();      // 'cm'\n    $match->group('unit')->isInt();     // false\n    $match->group('unit')->toInt();     // throws IntegerFormatException\n    \n    $match->group('unit')->index();     // 2\n    $match->group(2)->name();           // 'unit'\n});\n")),Object(a.b)("h3",{id:"offsets"},"Offsets"),Object(a.b)("h3",{id:"optional-groups"},"Optional groups"),Object(a.b)("p",null,"Some patterns have required capturing groups, e.g ",Object(a.b)("inlineCode",{parentName:"p"},"^(cm|mm)$"),". Others, have capturing groups that are optional,\ne.g. ",Object(a.b)("inlineCode",{parentName:"p"},"\\d+(cm|mm)?"),". As you can see the ",Object(a.b)("inlineCode",{parentName:"p"},"(cm|mm)")," doesn't have to be matched for the whole subject to be matched -\nboth ",Object(a.b)("inlineCode",{parentName:"p"},"14")," and ",Object(a.b)("inlineCode",{parentName:"p"},"14cm")," are subjects that match the pattern."),Object(a.b)("p",null,"Optional groups allow you to deal with potentially unmatched groups with elegance. If the group ",Object(a.b)("strong",{parentName:"p"},"is matched"),", each of the methods:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"text()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orReturn()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orElse()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orThrow()"))),Object(a.b)("p",null,"work exactly the same."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>http://)?\\w+\\.\\w+')->match('http://google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                  // 'http://'\n    $match->group('schema')->orThrow();               // 'http://'\n    $match->group('schema')->orReturn('other');       // 'http://'\n    $match->group('schema')->orElse(function() {      // 'http://'\n        return '';\n    });  \n});\n")),Object(a.b)("p",null,"The difference is - how they work when then group is not matched:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                  // `GroupNotMatchedException`\n    $match->group('schema')->orThrow();               // `GroupNotMatchedException` by default\n    $match->group('schema')->orReturn('other');       // 'other'\n    $match->group('schema')->orElse(function() {      // whatever is returned, in this case: ''\n        return '';\n    });   \n});\n")),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," works exactly the same as ",Object(a.b)("inlineCode",{parentName:"p"},"forFirst()->orThrow()"),", which means it accepts user defined exception\nto instantiate:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"class MyException extends Exception {}\n\npattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->orThrow(MyException::class);  // `MyException`\n});\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Method ",Object(a.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," throws ",Object(a.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException")," by default, so - when called without user defined exception -\nit's actually identical to ",Object(a.b)("inlineCode",{parentName:"p"},"group()->text()"),".")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Method ",Object(a.b)("inlineCode",{parentName:"p"},"group()->orElse(callable)")," callback receives ",Object(a.b)("inlineCode",{parentName:"p"},"NotMatched"),", just like ",Object(a.b)("inlineCode",{parentName:"p"},"forFirst()->orElse()"),".")),Object(a.b)("h3",{id:"index-name-and-identifier"},"Index, name and identifier"),Object(a.b)("p",null,"Groups can be referred to either by index or by name, if the group in a pattern is named. What was the group referred\nwith is called an identifier. If group was referred by index, then the index is the identifier."),Object(a.b)("p",null,"T-Regx has 3 separate methods for each of the group reference method:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"index()")," - returns the ordinal number of a group"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"name()")," - returns the name of a group, or ",Object(a.b)("inlineCode",{parentName:"li"},"null")," if the group is not named"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"usedIdentifier()")," - returns either ",Object(a.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(a.b)("inlineCode",{parentName:"li"},"name()"),", depending on what was the group referred with")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->group(1)->index();                  //  1\n    $match->group('schema')->index();           //  1\n\n    $match->group(1)->name();                   // 'schema'\n    $match->group('schema')->name();            // 'schema'\n\n    $match->group(1)->usedIdentifier();         //  1\n    $match->group('schema')->usedIdentifier();  // 'schema'\n});\n")),Object(a.b)("h2",{id:"group-is-matched"},"Group is matched"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"matched(int|string)")," allows you to verify whether a given group was matched by the subject:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$subject = 'Links: google.com and http://facebook.com';\n\npattern('(https?://)?\\w+\\.\\w+')->match($subject)->forEach(function (Match $match) {\n    // first iteration\n    $match->text();       // 'google.com'\n    $match->matched(1);   // false, `google.com` doesn't have a schema \n    $match->group(1);     // GroupNotMatchedException\n    \n    // second iteration\n    $match->text();       // 'http://facebook.com'    \n    $match->matched(1);   // true, `http://facebook.com` does have a schema \n    $match->group(1);     // 'http://'    \n});\n")),Object(a.b)("p",null,"It'll work just as well with named groups:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->text();              // 'google.com'  \n    $match->matched('schema');   // false, `google.com` doesn't have a schema \n    $match->group('schema');     // GroupNotMatchedException\n});\n")),Object(a.b)("p",null,"Although method ",Object(a.b)("inlineCode",{parentName:"p"},"$match->matched(int|string)")," is the preferred way - same effect can be achieved with\nusing ",Object(a.b)("inlineCode",{parentName:"p"},"$match->group(int|string)->matched()"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->group('schema')->matched();   // false, `google.com` doesn't have a schema\n});\n")),Object(a.b)("h4",{id:"invalid-groups-and-arguments"},"Invalid groups and arguments"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(a.b)("inlineCode",{parentName:"li"},"NonexistentGroupException"),", when used with a non-existent group ",Object(a.b)("em",{parentName:"li"},"(i.e. ",Object(a.b)("inlineCode",{parentName:"em"},"asdf"),")"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(a.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException"),", when used with an invalid group ",Object(a.b)("em",{parentName:"li"},"(i.e. ",Object(a.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(a.b)("inlineCode",{parentName:"em"},"-1")," or any type other than ",Object(a.b)("inlineCode",{parentName:"em"},"string")," or ",Object(a.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(a.b)("h2",{id:"group-exists"},"Group exists"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"hasGroup(int|string)")," allows you to verify whether the group was used in a pattern:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)?')->match('14')->first(function (Match $match) {\n    $match->hasGroup('value');  // true\n    $match->hasGroup('unit');   // true, group exists in pattern\n    $match->hasGroup('other');  // false, group doesn't exist in pattern\n    \n    $match->matched('value');  // true\n    $match->matched('unit');   // false, group exists, but was not matched in pattern\n    $match->matched('other');  // NonexistentGroupException\n});\n")),Object(a.b)("p",null,"It'll work just the same with regular (not named) groups:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('')->first(function (Match $match) {\n    $match->hasGroup(0);  // true\n    $match->hasGroup(1);  // true\n    $match->hasGroup(2);  // false\n});\n")),Object(a.b)("h4",{id:"invalid-groups-and-arguments-1"},"Invalid groups and arguments"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"hasGroup()")," will throw ",Object(a.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException"),", when used with an invalid group ",Object(a.b)("em",{parentName:"li"},"(i.e. ",Object(a.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(a.b)("inlineCode",{parentName:"em"},"-1")," or any type other than ",Object(a.b)("inlineCode",{parentName:"em"},"string")," or ",Object(a.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Usages of ",Object(a.b)("inlineCode",{parentName:"p"},"hasGroup()")," are rather infrequent, because rarely patterns are dynamic - they're constant much more often; hence the developer doesn't have to check whether the group exists. The pattern is constant - the collection of groups is also constant.")),Object(a.b)("h2",{id:"composite-groups"},"Composite groups"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p)->match($s)->forEach(function (Match $match) { \n    $match->groups()->texts();       // ['168', 'cm']\n    $match->namedGroups()->texts();  // ['value' => '168', 'unit' => 'cm']\n});\n")),Object(a.b)("h3",{id:"group-names"},"Group names"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"groupNames()")," returns a simple ",Object(a.b)("inlineCode",{parentName:"p"},"string[]")," with names of the capturing groups in order:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();    // ['value', 'unit']\n});\n")),Object(a.b)("p",null,"If there are no named groups, it simply returns an empty array:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)(cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();    // []\n});\n")),Object(a.b)("h3",{id:"groups-count"},"Groups count"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"groupsCount()")," returns a number of the capturing groups (without duplicates of named and regular groups)"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupsCount();    // 2\n});\n")),Object(a.b)("h2",{id:"other-occurrences"},"Other occurrences"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"group()->all()")," allows you to get the group from all other matches:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', 'cm', 'mm', 'cm']\n});\n")),Object(a.b)("p",null,"If the group is not matched in other occurrences, its value in ",Object(a.b)("inlineCode",{parentName:"p"},"all()")," result array will be ",Object(a.b)("inlineCode",{parentName:"p"},"null"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)?';\n$subject = '192mm and 168 or 18mm and 12';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', null, 'mm', null]\n});\n")),Object(a.b)("h2",{id:"groups-in-depth"},"Groups In-Depth"),Object(a.b)("h3",{id:"invalid-group-identifiers"},"Invalid group identifiers"),Object(a.b)("p",null,"In plain, old, vanilla PHP there's no difference between:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"an invalid group (name ",Object(a.b)("inlineCode",{parentName:"li"},"2group")," or index ",Object(a.b)("inlineCode",{parentName:"li"},"-1"),")"),Object(a.b)("li",{parentName:"ul"},"valid, but non-existent group"),Object(a.b)("li",{parentName:"ul"},"existent, but not matched group"),Object(a.b)("li",{parentName:"ul"},"matched group, but value is ",Object(a.b)("inlineCode",{parentName:"li"},"''")," (empty string)")),Object(a.b)("p",null,"The two first cases always return ",Object(a.b)("inlineCode",{parentName:"p"},"null"),", the third one returns either ",Object(a.b)("inlineCode",{parentName:"p"},"''")," or ",Object(a.b)("inlineCode",{parentName:"p"},"null")," (depending on the ",Object(a.b)("strong",{parentName:"p"},"order of groups!"),").\nIf you used ",Object(a.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE"),", it'll return ",Object(a.b)("inlineCode",{parentName:"p"},"['', -1]")," instead. And of course the last one returns ",Object(a.b)("inlineCode",{parentName:"p"},"''"),", which might the same\nas the third."),Object(a.b)("p",null,"Since PHP 7.2, there's ",Object(a.b)("inlineCode",{parentName:"p"},"PREG_UNMATCHED_AS_NULL")," - it's a little better, it allows to distinguish unmatched from matched empty string,\nbut to distinguish invalid and non-existent groups from unmatched - you have to use ",Object(a.b)("inlineCode",{parentName:"p"},"array_key_exists()"),"."),Object(a.b)("p",null,"For ",Object(a.b)("inlineCode",{parentName:"p"},"preg_match()"),"/",Object(a.b)("inlineCode",{parentName:"p"},"preg_match_all()")," we can use ",Object(a.b)("inlineCode",{parentName:"p"},"PREG_UNMATCHED_AS_NULL"),", for ",Object(a.b)("inlineCode",{parentName:"p"},"preg_replace_callback()")," we have... nothing. There's no way to verify it."),Object(a.b)("hr",null),Object(a.b)("p",null,"And T-Regx ",Object(a.b)("strong",{parentName:"p"},"hates")," it. We ",Object(a.b)("strong",{parentName:"p"},"hate")," it."),Object(a.b)("hr",null),Object(a.b)("p",null,"That's why in T-Regx, ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," details has 3 separate methods to deal with each of these cases separately. "),Object(a.b)("p",null,"Of course, the interface of ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," is the same for matching, replacing and any other operation,\nso validation of groups in T-Regx works completely alike for ",Object(a.b)("inlineCode",{parentName:"p"},"pattern()->match()"),", ",Object(a.b)("inlineCode",{parentName:"p"},"pattern()->replace()")," and any other\nmethod. It's bulletproof."),Object(a.b)("p",null,"Here's how they work:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:null}),"Group"),Object(a.b)("th",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"th"},"hasGroup()")),Object(a.b)("th",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"th"},"matched()")),Object(a.b)("th",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"th"},"text()")))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"Invalid group"),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"InvalidArgument")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"InvalidArgument")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"InvalidArgument"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"Non-existent group"),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"NonexistentGroup")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"NonexistentGroup"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"Not matched group"),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"GroupNotMatched"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),"Matched group"),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true")),Object(a.b)("td",r({parentName:"tr"},{align:null}),"Value of the group")))),Object(a.b)("p",null,"In short:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"You can't use an invalid group (",Object(a.b)("inlineCode",{parentName:"li"},"2startingWithDigit")," or negative ",Object(a.b)("inlineCode",{parentName:"li"},"-1"),")"),Object(a.b)("li",{parentName:"ul"},"You can't use a non-existent method (except with ",Object(a.b)("inlineCode",{parentName:"li"},"hasGroup()"),")"),Object(a.b)("li",{parentName:"ul"},"You can't use a non-matched group (except with ",Object(a.b)("inlineCode",{parentName:"li"},"hasGroup()")," and with ",Object(a.b)("inlineCode",{parentName:"li"},"matched()"),")")),Object(a.b)("blockquote",null,Object(a.b)("ul",{parentName:"blockquote"},Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"InvalidArgument")," is ",Object(a.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"NonexistentGroup")," is ",Object(a.b)("inlineCode",{parentName:"li"},"NonexistentGroupException")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"GroupNotMatched")," is ",Object(a.b)("inlineCode",{parentName:"li"},"GroupNotMatchedException")))))}l.isMDXComponent=!0},210:function(e,t,n){var a=n(240)("wks"),r=n(224),o=n(212).Symbol;e.exports=function(e){return a[e]||(a[e]=o&&o[e]||(o||r)("Symbol."+e))}},211:function(e,t,n){var a=n(213),r=n(223);e.exports=n(234)?function(e,t,n){return a.setDesc(e,t,r(1,n))}:function(e,t,n){return e[t]=n,e}},212:function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},213:function(e,t){var n=Object;e.exports={create:n.create,getProto:n.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:n.getOwnPropertyDescriptor,setDesc:n.defineProperty,setDescs:n.defineProperties,getKeys:n.keys,getNames:n.getOwnPropertyNames,getSymbols:n.getOwnPropertySymbols,each:[].forEach}},218:function(e,t,n){var a=n(212),r=n(219),o=n(211),i=n(221),c=n(235),p=function(e,t,n){var l,u,b,m,s=e&p.F,h=e&p.G,d=e&p.S,j=e&p.P,O=e&p.B,g=h?a:d?a[t]||(a[t]={}):(a[t]||{}).prototype,f=h?r:r[t]||(r[t]={}),N=f.prototype||(f.prototype={});for(l in h&&(n=t),n)b=((u=!s&&g&&l in g)?g:n)[l],m=O&&u?c(b,a):j&&"function"==typeof b?c(Function.call,b):b,g&&!u&&i(g,l,b),f[l]!=b&&o(f,l,m),j&&N[l]!=b&&(N[l]=b)};a.core=r,p.F=1,p.G=2,p.S=4,p.P=8,p.B=16,p.W=32,e.exports=p},219:function(e,t){var n=e.exports={version:"1.2.6"};"number"==typeof __e&&(__e=n)},220:function(e,t){e.exports=function(e){try{return!!e()}catch(t){return!0}}},221:function(e,t,n){var a=n(212),r=n(211),o=n(224)("src"),i=Function.toString,c=(""+i).split("toString");n(219).inspectSource=function(e){return i.call(e)},(e.exports=function(e,t,n,i){"function"==typeof n&&(n.hasOwnProperty(o)||r(n,o,e[t]?""+e[t]:c.join(String(t))),n.hasOwnProperty("name")||r(n,"name",t)),e===a?e[t]=n:(i||delete e[t],r(e,t,n))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[o]||i.call(this)}))},222:function(e,t){e.exports={}},223:function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},224:function(e,t){var n=0,a=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+a).toString(36))}},225:function(e,t,n){var a=n(226);e.exports=function(e){return Object(a(e))}},226:function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},227:function(e,t,n){var a=n(228);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==a(e)?e.split(""):Object(e)}},228:function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},229:function(e,t,n){"use strict";var a=n(239),r=n(241),o=n(222),i=n(242);e.exports=n(243)(Array,"Array",(function(e,t){this._t=i(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,r(1)):r(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),o.Arguments=o.Array,a("keys"),a("values"),a("entries")},230:function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},231:function(e,t,n){var a=n(213).setDesc,r=n(230),o=n(210)("toStringTag");e.exports=function(e,t,n){e&&!r(e=n?e:e.prototype,o)&&a(e,o,{configurable:!0,value:t})}},233:function(e,t,n){var a=n(218);a(a.S+a.F,"Object",{assign:n(237)})},234:function(e,t,n){e.exports=!n(220)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},235:function(e,t,n){var a=n(236);e.exports=function(e,t,n){if(a(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,a){return e.call(t,n,a)};case 3:return function(n,a,r){return e.call(t,n,a,r)}}return function(){return e.apply(t,arguments)}}},236:function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},237:function(e,t,n){var a=n(213),r=n(225),o=n(227);e.exports=n(220)((function(){var e=Object.assign,t={},n={},a=Symbol(),r="abcdefghijklmnopqrst";return t[a]=7,r.split("").forEach((function(e){n[e]=e})),7!=e({},t)[a]||Object.keys(e({},n)).join("")!=r}))?function(e,t){for(var n=r(e),i=arguments,c=i.length,p=1,l=a.getKeys,u=a.getSymbols,b=a.isEnum;c>p;)for(var m,s=o(i[p++]),h=u?l(s).concat(u(s)):l(s),d=h.length,j=0;d>j;)b.call(s,m=h[j++])&&(n[m]=s[m]);return n}:Object.assign},238:function(e,t,n){n(229);var a=n(212),r=n(211),o=n(222),i=n(210)("iterator"),c=a.NodeList,p=a.HTMLCollection,l=c&&c.prototype,u=p&&p.prototype,b=o.NodeList=o.HTMLCollection=o.Array;l&&!l[i]&&r(l,i,b),u&&!u[i]&&r(u,i,b)},239:function(e,t,n){var a=n(210)("unscopables"),r=Array.prototype;null==r[a]&&n(211)(r,a,{}),e.exports=function(e){r[a][e]=!0}},240:function(e,t,n){var a=n(212),r=a["__core-js_shared__"]||(a["__core-js_shared__"]={});e.exports=function(e){return r[e]||(r[e]={})}},241:function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},242:function(e,t,n){var a=n(227),r=n(226);e.exports=function(e){return a(r(e))}},243:function(e,t,n){"use strict";var a=n(244),r=n(218),o=n(221),i=n(211),c=n(230),p=n(222),l=n(245),u=n(231),b=n(213).getProto,m=n(210)("iterator"),s=!([].keys&&"next"in[].keys()),h=function(){return this};e.exports=function(e,t,n,d,j,O,g){l(n,t,d);var f,N,C=function(e){if(!s&&e in x)return x[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},v=t+" Iterator",w="values"==j,y=!1,x=e.prototype,$=x[m]||x["@@iterator"]||j&&x[j],M=$||C(j);if($){var k=b(M.call(new e));u(k,v,!0),!a&&c(x,"@@iterator")&&i(k,m,h),w&&"values"!==$.name&&(y=!0,M=function(){return $.call(this)})}if(a&&!g||!s&&!y&&x[m]||i(x,m,M),p[t]=M,p[v]=h,j)if(f={values:w?M:C("values"),keys:O?M:C("keys"),entries:w?C("entries"):M},g)for(N in f)N in x||o(x,N,f[N]);else r(r.P+r.F*(s||y),t,f);return f}},244:function(e,t){e.exports=!1},245:function(e,t,n){"use strict";var a=n(213),r=n(223),o=n(231),i={};n(211)(i,n(210)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=a.create(i,{next:r(1,n)}),o(e,t+" Iterator")}},246:function(e,t,n){"use strict";var a=n(247),r={};r[n(210)("toStringTag")]="z",r+""!="[object z]"&&n(221)(Object.prototype,"toString",(function(){return"[object "+a(this)+"]"}),!0)},247:function(e,t,n){var a=n(228),r=n(210)("toStringTag"),o="Arguments"==a(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=(t=Object(e))[r])?n:o?a(t):"Object"==(i=a(t))&&"function"==typeof t.callee?"Arguments":i}},248:function(e,t,n){var a=n(225);n(249)("keys",(function(e){return function(t){return e(a(t))}}))},249:function(e,t,n){var a=n(218),r=n(219),o=n(220);e.exports=function(e,t){var n=(r.Object||{})[e]||Object[e],i={};i[e]=t(n),a(a.S+a.F*o((function(){n(1)})),"Object",i)}}}]);