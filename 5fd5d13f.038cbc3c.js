(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{142:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return s}));t(211);var r=t(207);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}const i={id:"installation",title:"Installation"},p=[{value:"PHP 7.1 and later",id:"php-71-and-later",children:[]},{value:"Older PHP versions",id:"older-php-versions",children:[{value:"PHP 5.6",id:"php-56",children:[]},{value:"PHP 5.3",id:"php-53",children:[]}]}],l={rightToc:p},o="wrapper";function s({components:e,...n}){return Object(r.b)(o,a({},l,n,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"T-Regx recommended way of installation is using ",Object(r.b)("a",{href:"https://packagist.org/packages/rawr/t-regx",target:"_blank"},"Composer"),"."),Object(r.b)("h2",{id:"php-71-and-later"},"PHP 7.1 and later"),Object(r.b)("p",null,"The installation of T-Regx for ",Object(r.b)("inlineCode",{parentName:"p"},"PHP 7.1")," is really simple. Just add a composer dependency:"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"$ composer require rawr/t-regx\n")),Object(r.b)("p",null,"If you're using PHP 7.1 or newer, feel free to skip to ",Object(r.b)("a",a({parentName:"p"},{href:"/docs/introduction"}),"Introduction"),"."),Object(r.b)("h2",{id:"older-php-versions"},"Older PHP versions"),Object(r.b)("p",null,"Support for PHP <7.1 is achieved by maintaining two additional branches (",Object(r.b)("inlineCode",{parentName:"p"},"master-php-5.6")," and ",Object(r.b)("inlineCode",{parentName:"p"},"master-php5.3"),").\nAfter each release, new changes are merged into the ",Object(r.b)("inlineCode",{parentName:"p"},"5.6")," and ",Object(r.b)("inlineCode",{parentName:"p"},"5.3")," branches. This way, we can develop T-Regx and use\nthe newest PHP features, while still support those who can't migrate with each PHP release."),Object(r.b)("h3",{id:"php-56"},"PHP 5.6"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"$ composer require rawr/t-regx:dev-master-php-5.6\n")),Object(r.b)("h3",{id:"php-53"},"PHP 5.3"),Object(r.b)("pre",null,Object(r.b)("code",a({parentName:"pre"},{className:"language-bash"}),"$ composer require rawr/t-regx:dev-master-php5.3\n")),Object(r.b)("p",null,"Remember that those versions can still be run and tested on PHP 7.1+ environments. They will just lack the\nnew PHP features like scalar params, nullable types, return type hints; but they will use PHP 7.1 ",Object(r.b)("inlineCode",{parentName:"p"},"PREG_EMPTY_AS_NULL"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"error_clear_last()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"preg_replace_callback_array")," etc."),Object(r.b)("p",null,"Of course, the API is ",Object(r.b)("strong",{parentName:"p"},"exactly")," the same, regardless of PHP version. A single set of integration tests is run\nfor each environment."))}s.isMDXComponent=!0}}]);