(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{140:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),o=(n(0),n(170)),i={id:"introduction-safe",title:"Start with SafeRegex"},l={unversionedId:"introduction-safe",id:"introduction-safe",isDocsHomePage:!1,title:"Start with SafeRegex",description:"Here are the absolute basics you need to get familiar with, before we can learn T-Regx.",source:"@site/..\\docs\\introduction-safe.md",permalink:"/docs/introduction-safe",lastUpdatedAt:1600804639,sidebar:"docs",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Migrate to T-Regx",permalink:"/docs/introduction-clean"}},c=[{value:"Overview - T-Regx duality",id:"overview---t-regx-duality",children:[]},{value:"About SafeRegex",id:"about-saferegex",children:[]},{value:"What does SafeRegex do",id:"what-does-saferegex-do",children:[]},{value:"Final words",id:"final-words",children:[]}],p={rightToc:c};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Here are the absolute basics you need to get familiar with, before we can learn T-Regx."),Object(o.b)("h2",{id:"overview---t-regx-duality"},"Overview - T-Regx duality"),Object(o.b)("p",null,"When you add T-Regx to your project, you can actually choose the API, with which you are most comfortable."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"SafeRegex")," - the wrapper on PCRE (making the ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," methods throw exceptions),\nand ",Object(o.b)("inlineCode",{parentName:"p"},"CleanRegex")," - the higher-level API, build on top of ",Object(o.b)("inlineCode",{parentName:"p"},"SafeRegex"),".\nYou can work with either or both them in your project - they're both part of T-Regx."),Object(o.b)("p",null,"We suggest, after installing T-Regx, to use SafeRegex everywhere you can (to protect yourself against obvious errors),\nand then gradually migrate from ",Object(o.b)("inlineCode",{parentName:"p"},"preg::")," (SafeRegex) to ",Object(o.b)("inlineCode",{parentName:"p"},"pattern()")," (CleanRegex)."),Object(o.b)("h2",{id:"about-saferegex"},"About SafeRegex"),Object(o.b)("p",null,"With SafeRegex, you can safely replace every ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," method with ",Object(o.b)("inlineCode",{parentName:"p"},"preg::"),". "),Object(o.b)("p",null,"You should replace this code in your project:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),'if (($result = preg_match(\'/^foo:\\d+$\', $string, $match)) !== false) {\n  if ($result) {\n    return $match[0];\n  }\n  return "no match";\n} else {\n    switch (preg_last_error()) {\n      case PREG_BAD_UTF8_ERROR:\n        return "utf8 error";\n      case PREG_BAD_UTF8_OFFSET_ERROR:\n        return "utf8 offset error";\n      case PREG_BACKTRACK_LIMIT_ERROR:\n        return "optimize your pattern";\n    }   \n}\n')),Object(o.b)("p",null,"...with SafeRegex methods (which never return ",Object(o.b)("inlineCode",{parentName:"p"},"false"),"/",Object(o.b)("inlineCode",{parentName:"p"},"null")," and map errors to exceptions):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),'use \\TRegx\\SafeRegex\\preg;\n\ntry {\n  if (preg::match(\'/^foo:\\d+$\', $string, $match)) {\n    return $match[0];\n  }\n  return "no match";\n} \ncatch (SubjectEncodingPregException $exception) {\n    return "utf8 error";\n}\ncatch (Utf8OffsetPregException $exception) {\n    return "utf8 offset error";\n}\ncatch (BacktrackLimitPregException $exception) {\n    return "optimize your pattern";\n}\n')),Object(o.b)("p",null,"You don't need ",Object(o.b)("inlineCode",{parentName:"p"},"!== false")," anymore, because ",Object(o.b)("inlineCode",{parentName:"p"},"preg::match()")," never returns error-indicating values like\n",Object(o.b)("inlineCode",{parentName:"p"},"false"),", ",Object(o.b)("inlineCode",{parentName:"p"},"null"),", ",Object(o.b)("inlineCode",{parentName:"p"},'""')," or ",Object(o.b)("inlineCode",{parentName:"p"},"-1"),". Proper exception is throw in case of an error."),Object(o.b)("p",null,"You don't need to call ",Object(o.b)("inlineCode",{parentName:"p"},"preg_last_error()")," either, because in case of runtime errors/warnings, ",Object(o.b)("inlineCode",{parentName:"p"},"preg::")," throws\nproper exceptions as well!"),Object(o.b)("p",null,"Each ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," method (like ",Object(o.b)("inlineCode",{parentName:"p"},"preg_replace()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"preg_split()"),") has its own SafeRegex wrapper (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"preg::replace()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"preg::split()"),", etc.)."),Object(o.b)("h2",{id:"what-does-saferegex-do"},"What does SafeRegex do"),Object(o.b)("p",null,"In fact, you should replace every ",Object(o.b)("inlineCode",{parentName:"p"},"preg_match()")," with ",Object(o.b)("inlineCode",{parentName:"p"},"preg::match()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"preg_replace()"),"\nwith ",Object(o.b)("inlineCode",{parentName:"p"},"preg::replace()"),", right away! It's very safe, since their APIs are exactly the same."),Object(o.b)("p",null,"SafeRegex (",Object(o.b)("inlineCode",{parentName:"p"},"preg::")," methods) is an exact copy of ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," methods, but with additional safety features built-in."),Object(o.b)("p",null,"Most importantly:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"On error, ",Object(o.b)("inlineCode",{parentName:"li"},"preg_match()")," would return ",Object(o.b)("inlineCode",{parentName:"li"},"false"),", and you need to use ",Object(o.b)("inlineCode",{parentName:"li"},"preg_last_error()")," to see the error code.\n",Object(o.b)("inlineCode",{parentName:"li"},"preg::match()"),", on the other hand, will throw a proper exception, depending on the nature of the error."),Object(o.b)("li",{parentName:"ul"},"When building a pattern, PHP would raise a compile-time warning/error, which is impossible to try/catch or react to.\nSafeRegex will just throw ",Object(o.b)("inlineCode",{parentName:"li"},"MalformedPatternException"),"."),Object(o.b)("li",{parentName:"ul"},"When passing invalid arguments (",Object(o.b)("inlineCode",{parentName:"li"},"null"),", ",Object(o.b)("inlineCode",{parentName:"li"},"[]"),", objects) by accident into some PCRE methods, you might actually\ncause a fatal error, that terminates the application. ",Object(o.b)("inlineCode",{parentName:"li"},"preg::")," methods in any of those case will just throw\n",Object(o.b)("inlineCode",{parentName:"li"},"InvalidReturnValueException"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"preg_quote()")," quotes different characters on different PHP versions, whereas ",Object(o.b)("inlineCode",{parentName:"li"},"preg::quote()")," works consistently everywhere."),Object(o.b)("li",{parentName:"ul"},"Most of ",Object(o.b)("inlineCode",{parentName:"li"},"preg_()")," methods ignore invalid arguments, ",Object(o.b)("inlineCode",{parentName:"li"},"preg::()")," methods throw ",Object(o.b)("a",Object(r.a)({parentName:"li"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(o.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," in that case.")),Object(o.b)("p",null,"There are other safety features added by SafeRegex, like PHP bug fixes."),Object(o.b)("h2",{id:"final-words"},"Final words"),Object(o.b)("p",null,"That's it about SafeRegex! Really!"),Object(o.b)("p",null,"SafeRegex API is exactly the same as vanilla PHP ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," methods, so you only need to change ",Object(o.b)("inlineCode",{parentName:"p"},"preg_")," to ",Object(o.b)("inlineCode",{parentName:"p"},"preg::")," and\nyou're already protected against every compile-time or runtime warning/error/notice, magic value and other code-smells\npresent in PCRE. Every callback, flag, argument is copied 1:1. In terms of programming usage - they're identical."),Object(o.b)("p",null,"In the next chapters, we'll talk about CleanRegex - the higher level API solving more complicated problems of\nPHP regular expressions, other than the complete lack of exceptions."))}b.isMDXComponent=!0},170:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=b(n),d=r,m=s["".concat(i,".").concat(d)]||s[d]||u[d]||o;return n?a.a.createElement(m,l(l({ref:t},p),{},{components:n})):a.a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);