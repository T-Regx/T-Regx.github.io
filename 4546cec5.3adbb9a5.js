(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{185:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return i}));n(51),n(24),n(19),n(20),n(52),n(0);var a=n(266);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var c={id:"match-details",title:"Match details"},l=[{value:"Overview",id:"overview",children:[]},{value:"Matched text",id:"matched-text",children:[]},{value:"Integers",id:"integers",children:[]},{value:"Subject",id:"subject",children:[]},{value:"Ordinal value (index)",id:"ordinal-value-index",children:[]},{value:"Limit",id:"limit",children:[]},{value:"Offsets",id:"offsets",children:[]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"User data",id:"user-data",children:[]},{value:"Groups",id:"groups",children:[]}],b={rightToc:l};function i(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)("wrapper",r({},b,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When using ",Object(a.b)("inlineCode",{parentName:"p"},"pattern()->match()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"->replace->callback()"),", some methods receive a callback that accepts ",Object(a.b)("inlineCode",{parentName:"p"},"Match")," details\nobject. These methods are:\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-first"}),Object(a.b)("inlineCode",{parentName:"a"},"first()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-first"}),Object(a.b)("inlineCode",{parentName:"a"},"forFirst()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-each"}),Object(a.b)("inlineCode",{parentName:"a"},"forEach()")),"/",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-for-each"}),Object(a.b)("inlineCode",{parentName:"a"},"iterate()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-map"}),Object(a.b)("inlineCode",{parentName:"a"},"map()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-flat-map"}),Object(a.b)("inlineCode",{parentName:"a"},"flatMap()")),",\n",Object(a.b)("a",r({parentName:"p"},{href:"/docs/replace-callback"}),Object(a.b)("inlineCode",{parentName:"a"},"callback()")),"."),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("p",null,"Using ",Object(a.b)("inlineCode",{parentName:"p"},"Match")," details, you gain access to:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#matched-text"}),Object(a.b)("inlineCode",{parentName:"a"},"text()")),"/",Object(a.b)("a",r({parentName:"li"},{href:"#matched-text"}),Object(a.b)("inlineCode",{parentName:"a"},"textLength()"))," - value of a matched occurrence"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#integers"}),Object(a.b)("inlineCode",{parentName:"a"},"toInt()")),"/",Object(a.b)("a",r({parentName:"li"},{href:"#integers"}),Object(a.b)("inlineCode",{parentName:"a"},"isInt()"))," which allow you to handle integers safely"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#subject"}),Object(a.b)("inlineCode",{parentName:"a"},"subject()"))," - subject against which the pattern was matched"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#ordinal-value-index"}),Object(a.b)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of a matched occurrence"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#limit"}),Object(a.b)("inlineCode",{parentName:"a"},"limit()"))," - limit which was put on the matches"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#offsets"}),"offsets of matched values")," in the subject:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",Object(a.b)("a",r({parentName:"li"},{href:"#offsets"}),Object(a.b)("inlineCode",{parentName:"a"},"offset()"))),Object(a.b)("li",{parentName:"ul"},"byte offsets - ",Object(a.b)("a",r({parentName:"li"},{href:"#offsets"}),Object(a.b)("inlineCode",{parentName:"a"},"byteOffset()"))))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#other-occurrences"}),Object(a.b)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"#other-occurrences"}),"User data")," - sharing custom data between callbacks"),Object(a.b)("li",{parentName:"ul"},"details about capturing groups, in the next chapter: ",Object(a.b)("a",r({parentName:"li"},{href:"/docs/match-groups"}),"Capturing groups"))),Object(a.b)("h2",{id:"matched-text"},"Matched text"),Object(a.b)("p",null,"There are 6 similar ways to get the value of a matched occurrence:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n\n    return $match->text();             // using text() method\n    return $match->group(0)->text();   // group #0 is the whole match in all regexp engines\n\n    return (string) $match;            // cast it to string\n    return (string) $match->group(0);  // cast group #0 to string\n    return \"$match\";                   // enclose it in double quotes\n\n    return $match;                     // return the Match\n    return $match->group(0);           // return group #0\n});\n")),Object(a.b)("p",null,"or you can just accept ",Object(a.b)("inlineCode",{parentName:"p"},"string")," in the callback signature."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (string $match) {\n    return $match;\n});\n")),Object(a.b)("p",null,"All of them are equal to each other."),Object(a.b)("p",null,"There's also UTF8-safe method ",Object(a.b)("inlineCode",{parentName:"p"},"textLength()")," which, you guessed it, returns the length of a matched text."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n\n    return $match->text();         // 'Trains'\n    return $match->textLength();   // 6\n\n});\n")),Object(a.b)("h2",{id:"integers"},"Integers"),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"isInt()")," returns ",Object(a.b)("inlineCode",{parentName:"p"},"true"),' if, and only if matched occurrence is numeric. And by "numeric", we mean "real" numeric,\nnot PHP numeric:'),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",r({parentName:"tr"},{align:null}),"Value"),Object(a.b)("th",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"th"},"isInt()")))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'14'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'-14'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'+14'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'000'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"true"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"' 10'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'10 '")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'1e0'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"''")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"' '")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'0.0'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"'0,0'")),Object(a.b)("td",r({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"false"))))),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"PS: It's implemented with ",Object(a.b)("inlineCode",{parentName:"em"},"filter_var()"),", but you can think of it as:")," ",Object(a.b)("inlineCode",{parentName:"p"},"/^-?\\d+$/")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\d+')->match('User input was: 4 times')->first(function (Match $match) {\n    if ($match->isInt()) {\n        $times = $match->toInt();\n        for ($i = 0; $i < $times; $i++) {\n            // tasks\n        }\n    }\n});\n")),Object(a.b)("p",null,"So to recap, ",Object(a.b)("inlineCode",{parentName:"p"},"$match->isInt()")," returns ",Object(a.b)("inlineCode",{parentName:"p"},"true"),"/",Object(a.b)("inlineCode",{parentName:"p"},"false")," depending on whether the matched occurrence is numeric; and ",Object(a.b)("inlineCode",{parentName:"p"},"toInt()"),"\nreturns said numeric occurrence, or throws ",Object(a.b)("inlineCode",{parentName:"p"},"IntegerFormatException")," instead."),Object(a.b)("h2",{id:"subject"},"Subject"),Object(a.b)("p",null,"To get the subject in your callback, use ",Object(a.b)("inlineCode",{parentName:"p"},"Match.subject()"),":"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n    return $match->subject();\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"'I like Trains'\n")),Object(a.b)("p",null,"or you can store it in a variable and use it in your closure."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$subject = 'I like Trains';\n\npattern('[A-Z][a-z]+')->match($subject)->map(function (Match $match) use ($subject) {\n    return $subject;\n});\n")),Object(a.b)("h2",{id:"ordinal-value-index"},"Ordinal value (index)"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Match.index()")," returns the ordinal number of a matched occurrence."),Object(a.b)("p",null,"In this example, we'll modify every second word:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match('I like Trains, but I also like bikes')->map(function (Match $match) {\n    if ($match->index() % 2 === 0) {\n        return strtolower($match);\n    }\n    return strtoupper($match);\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"['i', 'LIKE', 'trains', 'BUT', 'i', 'ALSO', 'like', 'BIKES']\n")),Object(a.b)("p",null,"Results of ",Object(a.b)("inlineCode",{parentName:"p"},"Match.index()")," are always ",Object(a.b)("strong",{parentName:"p"},"continuous integer")," numbers, going from ",Object(a.b)("inlineCode",{parentName:"p"},"0")," to ",Object(a.b)("inlineCode",{parentName:"p"},"1"),", ",Object(a.b)("inlineCode",{parentName:"p"},"2"),", ",Object(a.b)("inlineCode",{parentName:"p"},"3"),"..., even when filtered."),Object(a.b)("h2",{id:"limit"},"Limit"),Object(a.b)("p",null,"Depending on whether you used ",Object(a.b)("inlineCode",{parentName:"p"},"all()"),", ",Object(a.b)("inlineCode",{parentName:"p"},"first()")," or ",Object(a.b)("inlineCode",{parentName:"p"},"only(int)")," - method ",Object(a.b)("inlineCode",{parentName:"p"},"limit()")," will return ",Object(a.b)("inlineCode",{parentName:"p"},"-1"),", ",Object(a.b)("inlineCode",{parentName:"p"},"1")," or an\nargument given to ",Object(a.b)("inlineCode",{parentName:"p"},"only()")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->all()->callback(function (Match $match) {\n    $match->limit();   // -1\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->first()->callback(function (Match $match) {\n    $match->limit();   // 1\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->only(5)->callback(function (Match $match) {\n    $match->limit();   // 5\n});\n")),Object(a.b)("h2",{id:"offsets"},"Offsets"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Match.offset()")," is multi-byte character safe and returns offset in characters, whereas ",Object(a.b)("inlineCode",{parentName:"p"},"Match.byteOffset()")," returns\nthe offset in bytes."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('here')->match('Apples for 0.30\u20ac, here')->first(function (Match $match) {\n    $characters = $match->offset();   // 18\n    $byes = $match->byteOffset();     // 20\n});\n")),Object(a.b)("p",null,"Here's what the numbers mean:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-text"}),"Apples for 0.30\u20ac, here\n                  \u2191\n                  offset()\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-text"}),"A  p   p   l   e   s      f   o   r      0  .  3  0  \u20ac           ,     h   e   r   e\n65 112 112 108 101 115 32 102 111 114 32 48 46 51 48 226 130 172 44 32 104 101 114 101\n                                                                       \u2191\n                                                                       byteOffset()\n")),Object(a.b)("p",null,"In other words, ",Object(a.b)("inlineCode",{parentName:"p"},"offset()")," treats bytes ",Object(a.b)("inlineCode",{parentName:"p"},"[226, 130, 172]")," as one multi-byte character (euro sign ",Object(a.b)("inlineCode",{parentName:"p"},"\u20ac"),") and counts them as\none; whereas ",Object(a.b)("inlineCode",{parentName:"p"},"byteOffset()")," counts them as three."),Object(a.b)("p",null,"Use:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"offset()")," with functions: ",Object(a.b)("inlineCode",{parentName:"li"},"mb_substr()"),", ",Object(a.b)("inlineCode",{parentName:"li"},"mb_strpos()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"byteOffset()")," with functions: ",Object(a.b)("inlineCode",{parentName:"li"},"substr()"),", ",Object(a.b)("inlineCode",{parentName:"li"},"strpos()"))),Object(a.b)("h2",{id:"other-occurrences"},"Other occurrences"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Match")," has access to other matched occurrences:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Match.all()")," - for whole matches (like ",Object(a.b)("inlineCode",{parentName:"li"},"Match.text()"),")"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Match.group().all()")," - for capturing groups (like ",Object(a.b)("inlineCode",{parentName:"li"},"Match.group().text()"),")")),Object(a.b)("p",null,"Even if you use ",Object(a.b)("inlineCode",{parentName:"p"},"first()")," or ",Object(a.b)("inlineCode",{parentName:"p"},"only(int)")," methods, ",Object(a.b)("inlineCode",{parentName:"p"},"Match.all()")," always returns unlimited occurrences."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match('Apples are cool')->map(function (Match $match) {\n    return [\n        'match' => $match->text(),\n        'all'   => $match->all()\n    ];\n});\n")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"[\n  ['match' => 'Apples', 'all' => ['Apples', 'are', 'cool']],\n  ['match' => 'are',    'all' => ['Apples', 'are', 'cool']],\n  ['match' => 'cool',   'all' => ['Apples', 'are', 'cool']]\n]\n")),Object(a.b)("h2",{id:"user-data"},"User data"),Object(a.b)("p",null,"To most users this functionality will occur as redundant - it's only use case are multiple calls to callbacks, for example\nwhen using chained ",Object(a.b)("inlineCode",{parentName:"p"},"filter()->map()"),". You perform an operation in ",Object(a.b)("inlineCode",{parentName:"p"},"filter()"),", store it's value in user data, and then use\nthe value in ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-map"}),Object(a.b)("inlineCode",{parentName:"a"},"map()")),"."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w{2}')->match('Languages: en, de, xd, sv')\n    ->filter(function (Match $match) {\n        $languageInfo = HeavyService::fetch($match->text());\n        $match->setUserData($languageInfo);\n        return $languageInfo->isValid();\n    })\n    ->map(function (Match $match) {\n        $languageInfo = $match->getUserData();\n        return $languageInfo->languages():\n    });\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"There were ideas of adding structures for user data, like ",Object(a.b)("inlineCode",{parentName:"p"},"setUserData('key', $value)"),"/",Object(a.b)("inlineCode",{parentName:"p"},"getUserData('key')"),",\nbut we decided to give more control to the user about it's structure. That's why user data is ",Object(a.b)("inlineCode",{parentName:"p"},"mixed"),".")),Object(a.b)("h2",{id:"groups"},"Groups"),Object(a.b)("p",null,"With ",Object(a.b)("inlineCode",{parentName:"p"},"Match.group()"),", you can easily retrieve capturing groups."),Object(a.b)("p",null,"Just like with ",Object(a.b)("inlineCode",{parentName:"p"},"Match"),", retrieving matched occurrence value is done with ",Object(a.b)("inlineCode",{parentName:"p"},"text()")," method or by casting it to ",Object(a.b)("inlineCode",{parentName:"p"},"string"),"."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p)->match($s)->first(function (Match $match) {\n    $text = $match->text();                            // '192mm'\n\n    $value = (string) $match->group('value');          // '192'\n    $unit  =          $match->group('unit')->text();   // 'mm'\n});\n")),Object(a.b)("hr",null),Object(a.b)("p",null,"More about capturing groups can be found in the next section: ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/match-groups"}),"Capturing groups"),"."))}i.isMDXComponent=!0},266:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):b({},t,{},e)),n},m=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,c=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=o(n),s=a,d=m["".concat(l,".").concat(s)]||m[s]||u[s]||c;return n?r.a.createElement(d,b({ref:t},p,{components:n})):r.a.createElement(d,b({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=n.length,l=new Array(c);l[0]=s;var b={};for(var i in t)hasOwnProperty.call(t,i)&&(b[i]=t[i]);b.originalType=e,b.mdxType="string"==typeof e?e:a,l[1]=b;for(var p=2;p<c;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);