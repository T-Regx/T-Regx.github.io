(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{147:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return l})),n.d(a,"metadata",(function(){return o})),n.d(a,"rightToc",(function(){return p})),n.d(a,"default",(function(){return s}));var t=n(2),r=n(6),c=(n(0),n(179)),i=n(180),l={id:"replace-with",title:"Replace with a constant value"},o={unversionedId:"replace-with",id:"replace-with",isDocsHomePage:!1,title:"Replace with a constant value",description:"After replace(), you need to explicitly use one of [first()]/[all()]/[only(int)] methods, to express how many",source:"@site/../docs/replace-with.mdx",slug:"/replace-with",permalink:"/docs/replace-with",version:"current",lastUpdatedAt:1596999510,sidebar:"docs",previous:{title:"Replacing a string",permalink:"/docs/replace"},next:{title:"Replace with callback",permalink:"/docs/replace-callback"}},p=[{value:"Limits",id:"limits",children:[{value:"First occurrence - first()",id:"first-occurrence---first",children:[]},{value:"All occurrences - <code>all()</code>",id:"all-occurrences---all",children:[]},{value:"Limited occurrences - <code>only()</code>",id:"limited-occurrences---only",children:[]}]},{value:"Regular expression references",id:"regular-expression-references",children:[]},{value:"Intentional references",id:"intentional-references",children:[]}],b={rightToc:p};function s(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(t.a)({},b,n,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"After ",Object(c.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"only(int)"))," methods, to express how many\nreplacements should be done."),Object(c.b)("p",null,"Specifying limits is done to relieve you from ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(c.b)("strong",{parentName:"a"},"brain strain"))," - so you can immediately\nrecognize author's intentions."),Object(c.b)("h2",{id:"limits"},"Limits"),Object(c.b)("p",null,"Using ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"only(int)"))," is semantically identical to passing ",Object(c.b)("inlineCode",{parentName:"p"},"$limit")," argument to\n","[",Object(c.b)("inlineCode",{parentName:"p"},"preg::replace()"),"]","/","[",Object(c.b)("inlineCode",{parentName:"p"},"preg::replace_callback()"),"]","."),Object(c.b)("p",null,"Neither of methods ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/match#many"}),Object(c.b)("inlineCode",{parentName:"a"},"only(int)"))," modify the subject if it wasn't matched by a pattern."),Object(c.b)("h3",{id:"first-occurrence---first"},"First occurrence - ",Object(c.b)("a",Object(t.a)({parentName:"h3"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()"))),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg_replace('/[A-Z][a-z]+/', '___', $subject, 1);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, Norway and Denmark'"),Object(c.b)("h3",{id:"all-occurrences---all"},"All occurrences - ",Object(c.b)("inlineCode",{parentName:"h3"},"all()")),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, ___ and ___'"),Object(c.b)("h3",{id:"limited-occurrences---only"},"Limited occurrences - ",Object(c.b)("inlineCode",{parentName:"h3"},"only()")),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject, 2);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, ___ and Denmark'"),Object(c.b)("p",null,"Read on, to learn more about replacing with ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/replace-callback"}),"a callback"),"."),Object(c.b)("h2",{id:"regular-expression-references"},"Regular expression references"),Object(c.b)("p",null,"Normally, had you passed a replacement to ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(c.b)("inlineCode",{parentName:"a"},"preg_replace()")),", that contains a backslash or a dollar sign followed by a\nnumber (eg. ",Object(c.b)("inlineCode",{parentName:"p"},"\\1")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$2"),") - that reference would be replaced by a corresponding capturing group (or by an empty string,\nif the group wasn't matched)."),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(t.a)({parentName:"pre"},{className:"language-text"}),"I have <15> and <192>\n")),Object(c.b)("p",null,"Resolving such references won't happen with T-Regx."),Object(c.b)("p",null,"This is done to relieve you from the ",Object(c.b)("a",Object(t.a)({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(c.b)("strong",{parentName:"a"},"brain strain")),". A programmer should be able to merely\nreplace a string with a constant value without ","[cognitive load]"," about possible ",Object(c.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$")," hiding somewhere."),Object(c.b)(i.a,{tregx:"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->with('<$1>');",php:"preg::replace('/(\\d+)cm/', '<\\$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// in T-Regx, special function is used to quote all references",mdxType:"CodeTabs"}),Object(c.b)(i.b,{text:!0,mdxType:"Result"},"I have <$1> and <$1>"),Object(c.b)("p",null,"You can be sure, what's put into ",Object(c.b)("inlineCode",{parentName:"p"},"with()")," will certainly be present unchanged in your final result."),Object(c.b)("p",null,"Some replacement strings containing a backslash or a dollar sign (like file system paths, URL addresses or even user input)\nmight interfere with logic and cause bugs that are very hard to find."),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Neither of types of references are resolved: ",Object(c.b)("inlineCode",{parentName:"p"},"$12"),", ",Object(c.b)("inlineCode",{parentName:"p"},"\\12")," nor ",Object(c.b)("inlineCode",{parentName:"p"},"${12}"),".")),Object(c.b)("h2",{id:"intentional-references"},"Intentional references"),Object(c.b)("p",null,"If you, however, would like to intentionally use regular expression references and have validated your input\nagainst ",Object(c.b)("em",{parentName:"p"},"an unexpected")," ",Object(c.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$")," - feel free to use ",Object(c.b)("inlineCode",{parentName:"p"},"withReferences()")," which ",Object(c.b)("strong",{parentName:"p"},"will")," resolve replacement references."),Object(c.b)(i.a,{tregx:"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->withReferences('<$1>');",php:"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// using withReferences(), back references are preserved",mdxType:"CodeTabs"}),Object(c.b)(i.b,{text:!0,mdxType:"Result"},"I have <15> and <192>"))}s.isMDXComponent=!0},180:function(e,a,n){"use strict";n.d(a,"a",(function(){return u})),n.d(a,"b",(function(){return j}));var t=n(0),r=n.n(t),c=n(184),i=n(185),l=n(186),o=n(4),p=n(181),b=n(48),s=n.n(b),d=function(e){function a(){return e.apply(this,arguments)||this}return Object(o.a)(a,e),a.prototype.render=function(){return r.a.createElement("div",{className:s.a.code},r.a.createElement(p.a,{className:"language-"+this.language},this.code))},Object(l.a)(a,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),a}(r.a.Component),u=function(e){var a=e.tregx,n=e.php,t=[a?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return r.a.createElement(c.a,{defaultValue:"t-regx",values:t},a&&r.a.createElement(i.a,{value:"t-regx"},r.a.createElement(d,null,a)),n&&r.a.createElement(i.a,{value:"php"},r.a.createElement(d,null,n)))},m=n(49),h=n.n(m),j=function(e){var a=e.text,n=e.children;return r.a.createElement("div",{className:h.a.result},r.a.createElement(d,{language:a?"text":"php"},n))}}}]);