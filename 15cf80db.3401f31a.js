(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{176:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return j}));var a=n(0),r=n.n(a),i=n(180),o=n(181),c=n(182),u=n(4),p=n(177),l=n(48),s=n.n(l),d=function(e){function t(){return e.apply(this,arguments)||this}return Object(u.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{className:s.a.code},r.a.createElement(p.a,{className:"language-"+this.language},this.code))},Object(c.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(r.a.Component),b=function(e){var t=e.tregx,n=e.php,a=[t?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return r.a.createElement(i.a,{defaultValue:"t-regx",values:a},t&&r.a.createElement(o.a,{value:"t-regx"},r.a.createElement(d,null,t)),n&&r.a.createElement(o.a,{value:"php"},r.a.createElement(d,null,n)))},h=n(49),m=n.n(h),j=function(e){var t=e.text,n=e.children;return r.a.createElement("div",{className:m.a.result},r.a.createElement(d,{language:t?"text":"php"},n))}},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return u})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),i=(n(0),n(175)),o=n(176),c={id:"quote",title:"Quote regular expression"},u={unversionedId:"quote",id:"quote",isDocsHomePage:!1,title:"Quote regular expression",description:"Dedicated builder",source:"@site/../docs/quote.mdx",slug:"/quote",permalink:"/docs/quote",version:"current",lastUpdatedAt:1596999511,sidebar:"docs",previous:{title:"T-Regx Utilities",permalink:"/docs/utils"},next:{title:"Validate a pattern",permalink:"/docs/valid"}},p=[{value:"Dedicated builder",id:"dedicated-builder",children:[]},{value:"Procedural Quoting",id:"procedural-quoting",children:[{value:"Contract",id:"contract",children:[]}]}],l={rightToc:p};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"dedicated-builder"},"Dedicated builder"),Object(i.b)("p",null,'Before you engage in this article, please visit "',Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/handling-user-input"}),"Handling user input"),"\" first, if you're interested\nin using unsafe data in your patterns :)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"Pattern::prepare([\"(My|Our) dog's name is \", [$input], '!']);\n")),Object(i.b)("p",null,"Suggested articles:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-prepare"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::prepare()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-inject"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::inject()")))),Object(i.b)("h2",{id:"procedural-quoting"},"Procedural Quoting"),Object(i.b)("p",null,"There are two methods ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::quote()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::unquote()"),"."),Object(i.b)("p",null,"First of which works as ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(i.b)("inlineCode",{parentName:"a"},"preg_quote()"))," is supposed to work (except for the fact that ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(i.b)("inlineCode",{parentName:"a"},"preg_quote()"))," is broken\nbefore PHP 7.1.3)."),Object(i.b)(o.a,{tregx:"Pattern::quote('Welcome\\How are you?');",mdxType:"CodeTabs"}),Object(i.b)(o.b,{text:!0,mdxType:"Result"},"Welcome\\\\How are you\\?"),Object(i.b)("p",null,"...second of which is the direct opposite:"),Object(i.b)(o.a,{tregx:"Pattern::unquote('Welcome\\\\How are you\\?');",mdxType:"CodeTabs"}),Object(i.b)(o.b,{text:!0,mdxType:"Result"},"Welcome\\How are you?"),Object(i.b)("p",null,"Please, keep in mind that this ",Object(i.b)("strong",{parentName:"p"},"is not")," a safe way to create patterns with unsafe characters - for that, consider\nusing ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/prepared-patterns"}),"Prepared Patterns"),"."),Object(i.b)("h3",{id:"contract"},"Contract"),Object(i.b)("p",null,"These two methods should be transitive, so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"// when\n$output = Pattern::unquote(Pattern::quote($input));\n\n// then\n$this->assertEquals($input, $output); \n")),Object(i.b)("p",null,"The contract is that ",Object(i.b)("inlineCode",{parentName:"p"},"$input")," should be identical to ",Object(i.b)("inlineCode",{parentName:"p"},"$output")," for any ",Object(i.b)("inlineCode",{parentName:"p"},"string")," value."))}s.isMDXComponent=!0}}]);