(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{139:function(t,e,n){"use strict";n.r(e),n.d(e,"frontMatter",(function(){return a})),n.d(e,"rightToc",(function(){return r})),n.d(e,"default",(function(){return p}));n(0);var i=n(207);function o(){return(o=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}const a={title:"What's new, new, new!",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},r=[],s={rightToc:r},l="wrapper";function p({components:t,...e}){return Object(i.b)(l,o({},s,e,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Another quickly update what's going on with CleanRegex :)"),Object(i.b)("p",null,"Most important of these two is that patterns used with CleanRegex no longer need delimiters :> I'm pretty happy with it,\nI don't see any reason why developers should keep including those."),Object(i.b)("p",null,"How delimiting works? CleanRegex has a number of potential delimiters. At first, it checks whether a pattern is already\ndelimited and if it's not, it adds a potential delimiter - one that isn't used in a pattern. Then in adds the\nflags :) As simple as that."))}p.isMDXComponent=!0}}]);