(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{148:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return s}));var n=a(1),r=(a(0),a(204)),c=a(208);const l={id:"replace-callback",title:"Replace with callback"},i={id:"replace-callback",title:"Replace with callback",description:"After `replace()`, you need to explicitly use one of `first()`/`all()`/`only(int)` methods, to express how many",source:"@site/../docs/replace-callback.mdx",permalink:"/docs/replace-callback",lastUpdatedAt:1586708537,sidebar:"docs",previous:{title:"Replace with a constant value",permalink:"/docs/replace-with"},next:{title:"Replace by group",permalink:"/docs/replace-by-group"}},o=[{value:"Replace first",id:"replace-first",children:[]},{value:"Replace more",id:"replace-more",children:[{value:"<code>all()</code>",id:"all",children:[]},{value:"<code>only()</code>",id:"only",children:[]}]},{value:"Return types",id:"return-types",children:[{value:"Explicit string",id:"explicit-string",children:[]}]},{value:"Variable callbacks",id:"variable-callbacks",children:[]}],p={rightToc:o};function s({components:e,...t}){return Object(r.b)("wrapper",Object(n.a)({},p,t,{components:e,mdxType:"MDXLayout"}),Object(r.b)("p",null,"After ",Object(r.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(r.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(r.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(r.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(r.b)("p",null,"Callback passed to ",Object(r.b)("inlineCode",{parentName:"p"},"replace()->callback()")," will only be invoked:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"for ",Object(r.b)("inlineCode",{parentName:"li"},"all()")," - as many times as there are occurrences matched in the subject."),Object(r.b)("li",{parentName:"ul"},"for ",Object(r.b)("inlineCode",{parentName:"li"},"only(int)")," - the same as ",Object(r.b)("inlineCode",{parentName:"li"},"all()"),", but up to an ",Object(r.b)("inlineCode",{parentName:"li"},"int")," limit."),Object(r.b)("li",{parentName:"ul"},"for ",Object(r.b)("inlineCode",{parentName:"li"},"first()")," - once if an occurrence is matched; or not at all if it's not.")),Object(r.b)("h2",{id:"replace-first"},"Replace first"),Object(r.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->callback(function (Match $match) {\n    return strtoupper($match->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    return strtoupper($match[0]);\n}, $subject, 1);",mdxType:"CodeTabs"}),Object(r.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, Norway and Denmark'"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Of course, the callback is only invoked ",Object(r.b)("strong",{parentName:"p"},"if")," your subject is matched with the pattern.")),Object(r.b)("h2",{id:"replace-more"},"Replace more"),Object(r.b)("h3",{id:"all"},Object(r.b)("inlineCode",{parentName:"h3"},"all()")),Object(r.b)("p",null,"Replacing all matched occurrences is the most common use-case:"),Object(r.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->callback(function (Match $m) {\n    return strtoupper($m->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject);",mdxType:"CodeTabs"}),Object(r.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and DENMARK'"),Object(r.b)("h3",{id:"only"},Object(r.b)("inlineCode",{parentName:"h3"},"only()")),Object(r.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In T-Regx, Match details can be cast to string, returning the whole match\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->callback('strtoupper');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    // $match[0] can be an empty string, even if a group is not matched\n    return call_user_func('strtoupper', $match[0]);\n}, $subject, 2);",mdxType:"CodeTabs"}),Object(r.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and Denmark'"),Object(r.b)("h2",{id:"return-types"},"Return types"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"replace()->callback()")," only accepts ",Object(r.b)("inlineCode",{parentName:"p"},"string")," or ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"MatchGroup"))," as its return type."),Object(r.b)("p",null,"We believe that returning anything, that's not a string or a group can ",Object(r.b)("strong",{parentName:"p"},"be a sign of a bug"),"! Moreover, converting them\nsilently would break our ",'["Explicity rule"]',"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return 2;       // <- throws InvalidReturnValueException\n    return true;    // <- throws InvalidReturnValueException\n    return null;    // <- throws InvalidReturnValueException\n});\n")),Object(r.b)("h3",{id:"explicit-string"},"Explicit string"),Object(r.b)("p",null,"If you'd like to replace an occurrence with a numeric value (for example ",Object(r.b)("inlineCode",{parentName:"p"},"'12'"),"), an empty string or ",Object(r.b)("inlineCode",{parentName:"p"},"'true'"),"/",Object(r.b)("inlineCode",{parentName:"p"},"'false'"),"\nliterals - just return them as ",Object(r.b)("inlineCode",{parentName:"p"},"string")," ",Object(r.b)("strong",{parentName:"p"},"explicitly"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return strval(2);                          // ok\n    return true ? 'true' : 'false';            // ok\n    return null ? '' : $something;             // ok\n\n    return $match->text();                     // ok\n    return (string) $match;                    // ok\n    return $match->group('captured')->text();  // ok, if group exists and was matched\n\n    return $match;                             // ok\n    return $match->group('captured');          // ok, if group exists and was matched\n});\n")),Object(r.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(r.b)("p",null,"You can call ",Object(r.b)("inlineCode",{parentName:"p"},"replace()->callback()")," for any valid PHP ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/language.types.callable.php"}),Object(r.b)("inlineCode",{parentName:"a"},"callable"))," which accepts one string parameter (or no parameters)\nand returns ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"."),Object(r.b)(c.a,{tregx:"pattern('\\w+')->replace('Apples are cool')->first()->callback('strtoupper');",php:"// This code is actually impossible in Vanilla-PHP.\n// In T-Regx, Match details can be cast to string - that's the matched text\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/\\w+/', 'strtoupper', $subject, 1);\n\npreg::replace_callback('/\\w+/', function (array $match) {\n    return strtoupper($match[0]);\n}, 'Apples are cool', 1);",mdxType:"CodeTabs"}),Object(r.b)(c.b,{mdxType:"Result"},"'APPLES are cool'"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"In this example, ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," will be cast to string, which is the same as calling ",Object(r.b)("inlineCode",{parentName:"p"},"Match.text()")," method.")),Object(r.b)("p",null,Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"')))}s.isMDXComponent=!0},204:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},u=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=n,m=u["".concat(l,".").concat(d)]||u[d]||b[d]||c;return a?r.a.createElement(m,i({ref:t},p,{components:a})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<c;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},206:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},207:function(e,t,a){"use strict";var n=a(0),r=a.n(n),c=a(210);var l=function(){return Object(n.useContext)(c.a)},i=a(205),o=a.n(i),p=a(93),s=a.n(p);const u=37,b=39;t.a=function(e){const{block:t,children:a,defaultValue:c,values:i,groupId:p}=e,{tabGroupChoices:d,setTabGroupChoices:m}=l(),[h,f]=Object(n.useState)(c);if(null!=p){const e=d[p];null!=e&&e!==h&&f(e)}const j=e=>{f(e),null!=p&&m(p,e)},O=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:o()("tabs",{"tabs--block":t})},i.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":h===e,className:o()("tab-item",s.a.tabItem,{"tab-item--active":h===e}),key:e,ref:e=>O.push(e),onKeyDown:e=>((e,t,a)=>{switch(a.keyCode){case b:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case u:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(O,e.target,e),onFocus:()=>j(e),onClick:()=>j(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter(e=>e.props.value===h)[0]))}},208:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));a(12);var n=a(0),r=a.n(n),c=a(207),l=a(206),i=a(211),o=a(94),p=a.n(o);class s extends r.a.Component{render(){return r.a.createElement("div",{className:p.a.code},r.a.createElement(i.a,{className:"language-"+this.language},this.code))}get language(){return this.props.language||"php"}get code(){let e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every(e=>"string"==typeof e))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}class u extends r.a.Component{render(){return r.a.createElement(r.a.Fragment,null,r.a.createElement(c.a,{defaultValue:"t-regx",values:this.values},this.props.tregx&&r.a.createElement(l.a,{value:"t-regx"},r.a.createElement(s,null,this.props.tregx)),this.props.php&&r.a.createElement(l.a,{value:"php"},r.a.createElement(s,null,this.props.php))))}get values(){return[this.props.tregx?{label:"T-Regx",value:"t-regx"}:{},this.props.php?{label:"PHP",value:"php"}:{}].filter(e=>e.value)}}var b=a(95),d=a.n(b),m=({text:e,children:t})=>r.a.createElement("div",{className:d.a.result},r.a.createElement(s,{language:e?"text":"php"},t))}}]);