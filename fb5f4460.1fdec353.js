(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{176:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return h}));var a=n(2),c=n(6),i=(n(0),n(185)),r=n(186),o={id:"match-find-first",title:"Optional matches (Find first)"},s={unversionedId:"match-find-first",id:"match-find-first",isDocsHomePage:!1,title:"Optional matches (Find first)",description:"If you call [first()] on a subject that isn't matched by a pattern - SubjectNotMatchedException is",source:"@site/../docs/match-find-first.mdx",slug:"/match-find-first",permalink:"/docs/match-find-first",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"First occurrence",permalink:"/docs/match-first"},next:{title:"Iterate matches (For each)",permalink:"/docs/match-for-each"}},l=[{value:"Optional matches with <code>findFirst()</code>",id:"optional-matches-with-findfirst",children:[{value:"<code>orReturn()</code>",id:"orreturn",children:[]},{value:"<code>orElse()</code>",id:"orelse",children:[]},{value:"<code>orThrow()</code>",id:"orthrow",children:[]},{value:"Custom exceptions for <code>orThrow()</code>",id:"custom-exceptions-for-orthrow",children:[]}]},{value:"I don&#39;t like functional",id:"i-dont-like-functional",children:[]}],b={rightToc:l};function h(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"If you call ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(i.b)("inlineCode",{parentName:"a"},"first()"))," on a subject that isn't matched by a pattern - ",Object(i.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," is\nthrown. We discussed that in the previous chapter."),Object(i.b)("p",null,"But what if you ",Object(i.b)("strong",{parentName:"p"},"expected")," the subject not to be matched? And how do you to react to it? "),Object(i.b)("h2",{id:"optional-matches-with-findfirst"},"Optional matches with ",Object(i.b)("inlineCode",{parentName:"h2"},"findFirst()")),Object(i.b)("p",null,"Method ",Object(i.b)("inlineCode",{parentName:"p"},"findFirst()")," can be called with a callback (that accepts ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail")),") just like ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(i.b)("inlineCode",{parentName:"a"},"first()")),".\nThe difference is: ",Object(i.b)("inlineCode",{parentName:"p"},"findFirst()")," never throws ",Object(i.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException"),", and allows you to control an unmatched subject by\nappropriate control methods: ",Object(i.b)("inlineCode",{parentName:"p"},"orThrow()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"orReturn()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"orElse()"),"."),Object(i.b)("p",null,"For example:"),Object(i.b)(r.a,{tregx:"return pattern('[0-9]+')->match(\"I'm 19 years old\")\n   ->findFirst(function (Detail $match) {\n       // highlight-next-line\n       return \"I was born $match years ago\";\n   })\n   ->orReturn('Unmatched :/');",php:"if (preg::match('/[0-9]+/', \"I'm 19 years old\", $match)) {\n    $text = $match[0];\n    // highlight-next-line\n    return \"I was born $text years ago\";\n}\nreturn 'Unmatched :/';",mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"'I was born 19 years ago'"),Object(i.b)("p",null,"If a match is found, then the result of ",Object(i.b)("inlineCode",{parentName:"p"},"findFirst()")," callback is returned. If a match is not found, however, then the\nhandling of an unmatched subject relies in the chained method."),Object(i.b)("h3",{id:"orreturn"},Object(i.b)("inlineCode",{parentName:"h3"},"orReturn()")),Object(i.b)("p",null,"If a match is not found, it returns a default value."),Object(i.b)(r.a,{tregx:'return pattern(\'[0-9]+\')->match("I\'m a dog")\n    ->findFirst(function (Detail $match) {\n       return "I was born $match years ago";\n    })\n    // highlight-next-line\n    ->orReturn("Match is not found");',php:'if (preg::match(\'/[0-9]+/\', "I\'m a dog", $match)) {\n    $text = $match[0];\n    return "I was born $text years ago";\n}\n// highlight-next-line\nreturn "Match is not found";',mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"'Match is not found'"),Object(i.b)("h3",{id:"orelse"},Object(i.b)("inlineCode",{parentName:"h3"},"orElse()")),Object(i.b)("p",null,"If a match is not found, it calls ",Object(i.b)("inlineCode",{parentName:"p"},"orElse()")," callback and uses ",Object(i.b)("em",{parentName:"p"},"it")," to evaluate a return value."),Object(i.b)(r.a,{tregx:'return pattern(\'[0-9]+\')->match("I\'m a dog")\n    ->findFirst(function (Detail $match) {\n       return "I was born $match years ago";\n    })\n    ->orElse(function (NotMatched $notMatched) { \n        // highlight-next-line\n        return "I couldn\'t match subject: " . $notMatched->subject();\n    });',php:'$subject = "I\'m a dog";\nif (preg::match(\'/[0-9]+/\', $subject, $match)) {\n    $text = $match[0];\n    return "I was born $text years ago";\n}\n// highlight-next-line\nreturn "I couldn\'t match subject: $subject";',mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"\"I couldn't match subject: I'm a dog\""),Object(i.b)("p",null,"Callback of ",Object(i.b)("inlineCode",{parentName:"p"},"orElse()")," is called with ",Object(i.b)("inlineCode",{parentName:"p"},"NotMatched"),", which contains only a handful of methods\npresent in ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail")),": ",Object(i.b)("inlineCode",{parentName:"p"},"subject()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"groupNames()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"groupsCount()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"hasGroup($nameOrIndex)"),"."),Object(i.b)("h3",{id:"orthrow"},Object(i.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(i.b)("p",null,"If a match is not found, it throws ",Object(i.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," by default."),Object(i.b)(r.a,{tregx:'try {\n    return pattern(\'[0-9]+\')->match("I\'m a dog")\n        ->findFirst(function (Detail $detail) {\n            return "Match is found!";\n        })\n        // highlight-next-line\n        ->orThrow();\n}\ncatch (SubjectNotMatchedException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',php:'try {\n    if (preg::match(\'/[0-9]+/\', "I\'m a dog")) {\n        return "Match is found!";\n    }\n    // highlight-next-line\n    throw new SubjectNotMatchedException(\n        // highlight-next-line\n        \'Expected to get the first match, but subject was not matched\',\n        // highlight-next-line\n        "I\'m a dog");\n}\ncatch (SubjectNotMatchedException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',mdxType:"CodeTabs"}),Object(i.b)("h3",{id:"custom-exceptions-for-orthrow"},"Custom exceptions for ",Object(i.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(i.b)("p",null,"You can also supply your own exception class name."),Object(i.b)(r.a,{tregx:'class MyException extends \\Exception {}\n\ntry {\n    return pattern(\'[0-9]+\')->match("I\'m a dog")\n        ->findFirst(function (Detail $detail) {\n            return "Match is found!";\n        })\n        // highlight-next-line\n        ->orThrow(MyException::class);\n}\ncatch (MyException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',php:'class MyException extends \\Exception {}\n\ntry {\n    if (preg::match(\'/[0-9]+/\', "I\'m a dog")) {\n        return "Match is found!";\n    } \n    // highlight-next-line\n    throw new MyException(\'Expected to get the first match, but subject was not matched\');\n}\ncatch (MyException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',mdxType:"CodeTabs"}),Object(i.b)("p",null,"Of course, your custom exception must meet certain requirements:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"It has to be a class")),Object(i.b)("p",{parentName:"li"},'Trying to instantiate interfaces or abstract classes would break our "Explicity rule"\nThe class must be concrete and explicit.')),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"It has to implement ",Object(i.b)("inlineCode",{parentName:"strong"},"\\Throwable"))),Object(i.b)("p",{parentName:"li"},"Obviously.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"It must have a suitable constructor")),Object(i.b)("p",{parentName:"li"},"The class must be instantiable with one of the following signatures and parameter types."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"__construct()")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"__construct($message)"),", where ",Object(i.b)("inlineCode",{parentName:"li"},"$message")," can be a string"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"__construct($message, $subject)"),", where ",Object(i.b)("inlineCode",{parentName:"li"},"$message")," and ",Object(i.b)("inlineCode",{parentName:"li"},"$subject")," can be strings")))),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"Notice!")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Using ",Object(i.b)("inlineCode",{parentName:"p"},"findFirst()->orThrow()")," without your custom exception is ",Object(i.b)("strong",{parentName:"p"},"identical")," to ",Object(i.b)("inlineCode",{parentName:"p"},"first()"),"."))),Object(i.b)("h2",{id:"i-dont-like-functional"},"I don't like functional"),Object(i.b)("p",null,"If you don't like functional programming style, you are free to use ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(i.b)("inlineCode",{parentName:"a"},"first()")),"\n(which throws an exception) and just catch it."),Object(i.b)(r.a,{tregx:'try {\n    // highlight-next-line\n    return pattern(\'[0-9]+\')->match("I\'m a dog")->first();\n}\ncatch (SubjectNotMatchedException $e) {\n    return "Some other value";\n}',php:"try {\n    if (preg::match('/[0-9]+/', \"I'm a dog\", $match)) {\n        return $match[0];\n    }\n    // highlight-next-line\n    throw new SubjectNotMatchedException();\n}\ncatch (SubjectNotMatchedException $e) {\n    return 'Some other value';\n}",mdxType:"CodeTabs"}))}h.isMDXComponent=!0},186:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return j}));var a=n(0),c=n.n(a),i=n(189),r=n(190),o=n(191),s=n(4),l=n(187),b=n(48),h=n.n(b),d=function(e){function t(){return e.apply(this,arguments)||this}return Object(s.a)(t,e),t.prototype.render=function(){return c.a.createElement("div",{className:h.a.code},c.a.createElement(l.a,{className:"language-"+this.language},this.code))},Object(o.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(c.a.Component),p=function(e){var t=e.tregx,n=e.php,a=[t?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return c.a.createElement(i.a,{defaultValue:"t-regx",values:a},t&&c.a.createElement(r.a,{value:"t-regx"},c.a.createElement(d,null,t)),n&&c.a.createElement(r.a,{value:"php"},c.a.createElement(d,null,n)))},u=n(49),m=n.n(u),j=function(e){var t=e.text,n=e.children;return c.a.createElement("div",{className:m.a.result},c.a.createElement(d,{language:t?"text":"php"},n))}}}]);