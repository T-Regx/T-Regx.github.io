(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{111:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return m}));var a=t(2),o=t(6),r=(t(0),t(161)),i=t(162),p=(t(165),t(166),{id:"replace-by-map",title:"Replace by map"}),s={unversionedId:"replace-by-map",id:"replace-by-map",isDocsHomePage:!1,title:"Replace by map",description:"There are cases when you have to use more than one replacement, but you also don't need Match details or",source:"@site/..\\docs\\replace-by-map.mdx",permalink:"/docs/replace-by-map",lastUpdatedAt:1586997896,sidebar:"docs",previous:{title:"Replace by group",permalink:"/docs/replace-by-group"},next:{title:"Handling user input",permalink:"/docs/handling-user-input"}},c=[{value:"Standard map",id:"standard-map",children:[{value:"Superfluous matches",id:"superfluous-matches",children:[]},{value:"Ignored replacements",id:"ignored-replacements",children:[]}]},{value:"Groups",id:"groups",children:[]}],l={rightToc:c};function m(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There are cases when you have to use more than one replacement, but you also don't need ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," details or\nany replacement logic, really, so both ",Object(r.b)("inlineCode",{parentName:"p"},"with()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"callback()")," are a little unfit."),Object(r.b)("p",null,"Replacing by map allows T-Regx to save a little performance overhead, by not creating ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," object."),Object(r.b)("h2",{id:"standard-map"},"Standard map"),Object(r.b)(i.a,{tregx:"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npattern('\\b\\w{3}\\b')->replace($message)->all()->by()->map([\n    'mp3' => 'Audio file',\n    'mp4' => 'Video file',\n    'gif' => 'Animation'\n]);",php:"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npreg::replace_callback('/\\b\\w{3}\\b/', function ($match) {\n    $map = [\n        'mp3' => 'Audio file',\n        'mp4' => 'Video file',\n        'gif' => 'Animation'\n    ];\n    if (!array_key_exists($match[0], $map)) {\n        throw new MissingReplacementKeyException();\n    }\n    $result = $map[$match[0]];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $message);",mdxType:"CodeTabs"}),Object(r.b)(i.b,{text:!0,mdxType:"Result"},'My words: "Audio file", "Video file", "Animation"'),Object(r.b)("p",null,"And of course ",Object(r.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(r.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(r.b)("inlineCode",{parentName:"p"},"only(int)")," modifiers are taken into account."),Object(r.b)("h3",{id:"superfluous-matches"},"Superfluous matches"),Object(r.b)("p",null,"Normally, had you found a match that's not present in your map - ",Object(r.b)("inlineCode",{parentName:"p"},"MissingReplacementKeyException")," would be thrown\n(as long as ",Object(r.b)("inlineCode",{parentName:"p"},"gif")," is matched by your pattern, of course):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npattern('\\w{3}')->replace($message)->all()->by()->map([\n   'mp3'   => 'Audio file',\n   'mp4'   => 'Video file'\n  // 'gif'  => 'Animation'\n]);\n")),Object(r.b)("p",null,"If you don't need to specify all your possible ",Object(r.b)("inlineCode",{parentName:"p"},"[match => replacement]")," pairs, you should use one of the below ",Object(r.b)("inlineCode",{parentName:"p"},"mapIfExists()"),"."),Object(r.b)("h3",{id:"ignored-replacements"},"Ignored replacements"),Object(r.b)("p",null,"With ",Object(r.b)("inlineCode",{parentName:"p"},"mapIfExists()")," - superfluous occurrences are left unchanged:"),Object(r.b)(i.a,{tregx:"$message = \"Extensions: mp3, mp4, jpg, jpeg, png, gif\";\n\npattern('\\b\\w{3,4}\\b')->replace($message)->all()->by()->mapIfExists([\n   'mp3' => 'Audio',\n   'gif' => 'Animation'\n]);",php:"$message = \"Extensions: mp3, mp4, jpg, jpeg, png, gif\";\n\npreg::replace_callback('/\\b\\w{3}\\b/', function ($match) {\n    $map = [\n        'mp3' => 'Audio',\n        'gif' => 'Animation'\n    ];\n    if (!array_key_exists($match[0], $map)) {\n        return $match[0];\n    }\n    $result = $map[$match[0]];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $message);",mdxType:"CodeTabs"}),Object(r.b)(i.b,{text:!0,mdxType:"Result"},"Extensions: Audio, mp4, jpg, jpeg, png, Animation"),Object(r.b)("h2",{id:"groups"},"Groups"),Object(r.b)("p",null,"Resolving a replacement based on a ",Object(r.b)("strong",{parentName:"p"},"whole match")," however, is both uncommon and unpractical. It's much more elastic to resolve\nit based on a specific capturing group, using ",Object(r.b)("inlineCode",{parentName:"p"},"by()->group()->map()"),":"),Object(r.b)(i.a,{tregx:"$links = 'Links: www.google.com, http://socket.io, facebook.com, https://t-regx.com';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')\n    ->replace($links)\n    ->all()\n    ->by()\n    ->group('domain')\n    ->map([\n       'google'   => 'Search Engine',\n       'socket'   => 'Documentation',\n       'facebook' => 'Social Portal',\n       't-regx'   => 'Documentation',\n    ])\n    ->orThrow();",php:"$links = 'Links: www.google.com, http://socket.io, facebook.com, https://t-regx.com';\n\npreg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)#', function (array $match) {\n    // possible invalid group, e.g. \"2group\" or -2\n    validateGroupName('domain');\n\n    $group = $match['domain'];\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            $group = $match['domain'];\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (validateGroupMatched('domain', $match)) {\n            $group = $match['domain'];\n        } else {\n            throw new GroupNotMatchedException();\n        }\n    }\n\n    $map = [\n        'google'   => 'Search Engine',\n        'socket'   => 'Documentation',\n        'facebook' => 'Social Portal',\n        't-regx'   => 'Documentation',\n    ];\n    if (!array_key_exists($group, $map)) {\n        throw new MissingReplacementKeyException();\n    }\n    $result = $map[$group];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $links);",mdxType:"CodeTabs"}),Object(r.b)(i.b,{text:!0,mdxType:"Result"},"Links: Search Engine, Documentation, Social Portal, Documentation"))}m.isMDXComponent=!0},162:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var a=t(0),o=t.n(a),r=t(165),i=t(166),p=t(164),s=t(47),c=t.n(s);class l extends o.a.Component{render(){return o.a.createElement("div",{className:c.a.code},o.a.createElement(p.a,{className:"language-"+this.language},this.code))}get language(){return this.props.language||"php"}get code(){let e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every(e=>"string"==typeof e))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}class m extends o.a.Component{render(){return o.a.createElement(r.a,{defaultValue:"t-regx",values:this.values,groupId:"language"},this.props.tregx&&o.a.createElement(i.a,{value:"t-regx"},o.a.createElement(l,null,this.props.tregx)),this.props.php&&o.a.createElement(i.a,{value:"php"},o.a.createElement(l,null,this.props.php)))}get values(){return[this.props.tregx?{label:"T-Regx",value:"t-regx"}:{},this.props.php?{label:"PHP",value:"php"}:{}].filter(e=>e.value)}}var u=t(48),d=t.n(u),b=({text:e,children:n})=>o.a.createElement("div",{className:d.a.result},o.a.createElement(l,{language:e?"text":"php"},n))}}]);