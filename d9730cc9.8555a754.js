(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{187:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return o}));var n=a(1),r=a(6),i=(a(0),a(204)),l={id:"whats-the-point",title:"What's the point?",sidebar_label:"Why would I use T-Regx?"},c={id:"whats-the-point",title:"What's the point?",description:"Here is a few reasons why one might consider using T-Regx. Main of which are:\r",source:"@site/..\\docs\\whats-the-point.md",permalink:"/docs/whats-the-point",lastUpdatedAt:1582209938,sidebar_label:"Why would I use T-Regx?",sidebar:"docs",previous:{title:"What's T-Regx?",permalink:"/docs/overview"},next:{title:"Installation",permalink:"/docs/installation"}},b=[{value:"What&#39;s wrong with PHP Regular Expressions:",id:"whats-wrong-with-php-regular-expressions",children:[{value:"PHP is Implicit",id:"php-is-implicit",children:[]},{value:"PHP is Unintuitive",id:"php-is-unintuitive",children:[]},{value:"PHP is Messy",id:"php-is-messy",children:[]},{value:"PHP is Inconsistent",id:"php-is-inconsistent",children:[]},{value:"PHP is Deliberately buggy",id:"php-is-deliberately-buggy",children:[]}]},{value:"T-Regx to the rescue",id:"t-regx-to-the-rescue",children:[{value:"T-Regx is descriptive",id:"t-regx-is-descriptive",children:[]},{value:"T-Regx is for developers (it&#39;s reliable)",id:"t-regx-is-for-developers-its-reliable",children:[]},{value:"T-Regx is explicit",id:"t-regx-is-explicit",children:[]},{value:"T-Regx is really smart with its exceptions",id:"t-regx-is-really-smart-with-its-exceptions",children:[]}]}],p={rightToc:b};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Here is a few reasons why one might consider using T-Regx. Main of which are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"It's ",Object(i.b)("strong",{parentName:"li"},"bulletproof")),Object(i.b)("li",{parentName:"ul"},"It's ",Object(i.b)("strong",{parentName:"li"},"reliable")),Object(i.b)("li",{parentName:"ul"},"It's ",Object(i.b)("strong",{parentName:"li"},"readable"))),Object(i.b)("h2",{id:"whats-wrong-with-php-regular-expressions"},"What's wrong with PHP Regular Expressions:"),Object(i.b)("p",null,"PHP regular expressions API is far from perfect. Here's only a handful of what's wrong with it:"),Object(i.b)("h3",{id:"php-is-implicit"},"PHP is Implicit"),Object(i.b)("p",null,"You are probably a PHP developer. I would like to get ",Object(i.b)("inlineCode",{parentName:"p"},"'Robert likes apples'"),". Can you tell me which is the correct signature\nfor this task?"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"preg_replace('/Bob/', 'Robert', 'Bob likes apples');    // pattern, replacement, subject\n// or\npreg_replace('/Bob/', 'Bob likes apples', 'Robert');    // pattern, subject, replacement\n// ??\n")),Object(i.b)("p",null,"Another try. Let's say you'd like to limit replacements. But you remember that there's a reference parameter ",Object(i.b)("inlineCode",{parentName:"p"},"&$count"),"\nsomewhere. Again, which is the correct signature?"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$limit = 1;\n\npreg_replace(?, ?, ?, $limit, $count);\n// or\npreg_replace(?, ?, ?, $count, $limit);\n// ??\n")),Object(i.b)("h3",{id:"php-is-unintuitive"},"PHP is Unintuitive"),Object(i.b)("p",null,"Programming languages are ",Object(i.b)("strong",{parentName:"p"},"tools")," created to solve problems. An experienced programmer ",Object(i.b)("strong",{parentName:"p"},"should")," be able to look\nat the code and tell what it does. With PHP ",Object(i.b)("inlineCode",{parentName:"p"},"preg_*")," functions it's just. not. possible."),Object(i.b)("p",null,"Someone who doesn't know PHP regular expressions, can probably ask themselves:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_replace('//', $r, $s)")," - will this replace all occurrences? Or just one?"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_match('//', $subject)")," - will ",Object(i.b)("em",{parentName:"li"},"this")," match the first occurrence? Or all?"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_match_all('//', $subject);")," Ok, this will find all matches, so preg_match() only finds the first."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_filter('//', $replacements, $subject)")," - who needs ",Object(i.b)("inlineCode",{parentName:"li"},"$replacements")," in ",Object(i.b)("inlineCode",{parentName:"li"},"filter")," method?")),Object(i.b)("h4",{id:"whats-more"},"What's more"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Parameters:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Functions with 4 or 5 parameters (3 of which are optional)."),Object(i.b)("p",{parentName:"li"},"It means that, whoever looks at the code has to ",Object(i.b)("strong",{parentName:"p"},"remember")," (or to look up) what those optional values are and in which order.")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Return types:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Array of arrays, which contain either a ",Object(i.b)("inlineCode",{parentName:"li"},"string"),", ",Object(i.b)("inlineCode",{parentName:"li"},"null"),", or an array of ",Object(i.b)("inlineCode",{parentName:"li"},"null"),"s, ",Object(i.b)("inlineCode",{parentName:"li"},"strings")," and ",Object(i.b)("inlineCode",{parentName:"li"},"int"),"s.")))),Object(i.b)("h3",{id:"php-is-messy"},"PHP is Messy"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PREG_OFFSET_CAPTURE"),' is a nightmare! It changes return type from "an array of arrays" to "an array of arrays of arrays".'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"PREG_SET_ORDER")," / ",Object(i.b)("inlineCode",{parentName:"li"},"PREG_PATTERN_ORDER"),' change return values. It\'s either "groups of matches" or "matches of groups",\ndepending on the flag.')),Object(i.b)("p",null,"The worst part? You find yourself looking at this code"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"return $match[1][0];\n")),Object(i.b)("p",null,"having no idea what. it. does. You have to see whether you're using ",Object(i.b)("inlineCode",{parentName:"p"},"preg_match()")," or ",Object(i.b)("inlineCode",{parentName:"p"},"preg_match_all()")," and\nwhether any of ",Object(i.b)("inlineCode",{parentName:"p"},"PREG_SET_ORDER"),"/",Object(i.b)("inlineCode",{parentName:"p"},"PREG_PATTERN_ORDER"),"/",Object(i.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE")," were used."),Object(i.b)("h3",{id:"php-is-inconsistent"},"PHP is Inconsistent"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"How do you get results and the count of the results?"),Object(i.b)("table",{parentName:"li"},Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Value"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"th"},"preg_replace()")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Count"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return type"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Argument reference")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Values"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Argument reference"),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return type")))),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$replaced = preg_replace($p, $r, $s, $count);\n$count    = preg_match($p, $s, $matched);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"If you use ",Object(i.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE")," and your subject isn't matched with the pattern; these are the results:"),Object(i.b)("table",{parentName:"li"},Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Success"),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"th"},"preg_match_all()")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"true")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"['match', 2]")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"['match', 2']"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"false")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"''")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"[null, -1]")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"preg_quote()")," quotes different characters for different PHP versions.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"PHP ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"http://php.net/manual/en/function.preg-filter.php"}),"documentation")," promises that"),Object(i.b)("blockquote",{parentName:"li"},Object(i.b)("p",{parentName:"blockquote"},Object(i.b)("inlineCode",{parentName:"p"},"preg_filter()")," is identical to ",Object(i.b)("inlineCode",{parentName:"p"},"preg_replace()")," except it only returns the (possibly transformed) subjects...")),Object(i.b)("p",{parentName:"li"},"but ",Object(i.b)("inlineCode",{parentName:"p"},"preg_filter()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"preg_replace()")," actually return ",Object(i.b)("em",{parentName:"p"},"completely")," different values for ",Object(i.b)("strong",{parentName:"p"},"the same")," parameters.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Found ",Object(i.b)("inlineCode",{parentName:"p"},"$matches")," received from ",Object(i.b)("inlineCode",{parentName:"p"},"preg_match()")," have completely difference structure than those from ",Object(i.b)("inlineCode",{parentName:"p"},"preg_replace_callback()"),"."))),Object(i.b)("h3",{id:"php-is-deliberately-buggy"},"PHP is Deliberately buggy"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"preg_match")," and ",Object(i.b)("inlineCode",{parentName:"p"},"preg_match_all")," return either:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(int) x")," - a number of matches, if a match is found"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(int) 0")," - if no matches are found"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"(bool) false")," - if a runtime error occurred")),Object(i.b)("p",{parentName:"li"},"So if you do just this:"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"if (preg_match('//', '')) {\n")))),Object(i.b)("p",null,"there's no way of knowing whether your pattern is incorrect or whether it's correct but your subject isn't matched by\nyour pattern. You need to ",Object(i.b)("strong",{parentName:"p"},"remember")," to add an explicit ",Object(i.b)("inlineCode",{parentName:"p"},"false")," check each time you use it."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"All ",Object(i.b)("inlineCode",{parentName:"li"},"preg_*")," functions only return ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"/",Object(i.b)("inlineCode",{parentName:"li"},"null"),"/",Object(i.b)("inlineCode",{parentName:"li"},"[]")," on error. You have to remember to call ",Object(i.b)("inlineCode",{parentName:"li"},"preg_last_error()")," to get\nsome insight in the nature of your error. Of course it only returns ",Object(i.b)("inlineCode",{parentName:"li"},"int"),"! So you have to look up that ",Object(i.b)("inlineCode",{parentName:"li"},"4"),' is\n"invalid utf8 sequence" and ',Object(i.b)("inlineCode",{parentName:"li"},"2"),' is "backtrack limit exceeded".'),Object(i.b)("li",{parentName:"ul"},"However, ",Object(i.b)("inlineCode",{parentName:"li"},"false"),"-check and ",Object(i.b)("inlineCode",{parentName:"li"},"preg_last_error()")," can only save you from runtime errors. So called compile errors don't\nwork that way and require either setting a custom error handler (bad idea) or read and clear just one of those errors\n(good luck with errors in ",Object(i.b)("inlineCode",{parentName:"li"},"preg_replace_callback()")," for example)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_filter()")," for arrays returns ",Object(i.b)("inlineCode",{parentName:"li"},"[]")," if an error occurred; even though ",Object(i.b)("inlineCode",{parentName:"li"},"[]")," is the perfectly valid result for this\nfunction. For example, it could have filtered out all values or its input was an empty array right from the beginning."),Object(i.b)("li",{parentName:"ul"},"For certain parameter types, some PCRE methods (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"preg_filter()"),") raise ",Object(i.b)("strong",{parentName:"li"},"fatal errors")," terminating the application.")),Object(i.b)("h2",{id:"t-regx-to-the-rescue"},"T-Regx to the rescue"),Object(i.b)("p",null,"That's why T-Regx happened. It addresses all of PHP regular expressions flaws:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#its-descriptive"}),"It's descriptive")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#its-for-developers-its-reliable"}),"It's for developers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"#its-explicit"}),"It's explicit"))),Object(i.b)("h3",{id:"t-regx-is-descriptive"},"T-Regx is descriptive"),Object(i.b)("p",null,"What about now? Is the task easier?"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->replace('Bob likes applees')->first()->with('Robert');\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->replace('Bob likes applees')->only($limit)->with('Robert');\n")),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->count('Bob likes applees');\n")),Object(i.b)("h3",{id:"t-regx-is-for-developers-its-reliable"},"T-Regx is for developers (it's reliable)"),Object(i.b)("p",null,"If you try to use an invalid regular expression in Java or JavaScript, you would probably get a ",Object(i.b)("inlineCode",{parentName:"p"},"SyntaxError")," exception\nand you'd be forced to handle it. Such things don't happen in PHP regular expressions."),Object(i.b)("p",null,"T-Regx always throws an exception and never issues any warnings, fatals, errors or notices."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"try {\n    return pattern('Foo')->match('Bar')->all();\n}\ncatch (CleanRegexException $exception) {\n    // handle the error\n}\n")),Object(i.b)("p",null,"Furthermore, T-Regx throws different exceptions for different errors:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"SubjectNotMatchedException"),Object(i.b)("li",{parentName:"ul"},"MalformedPatternException"),Object(i.b)("li",{parentName:"ul"},"FlagNotAllowedException"),Object(i.b)("li",{parentName:"ul"},"GroupNotMatchedException"),Object(i.b)("li",{parentName:"ul"},"NonexistentGroupException"),Object(i.b)("li",{parentName:"ul"},"InvalidReplacementException"),Object(i.b)("li",{parentName:"ul"},"InvalidReturnValueException"),Object(i.b)("li",{parentName:"ul"},"MissingSplitDelimiterGroupException"),Object(i.b)("li",{parentName:"ul"},"InternalCleanRegexException")),Object(i.b)("p",null,"They all extend ",Object(i.b)("inlineCode",{parentName:"p"},"CleanRegexException")," though."),Object(i.b)("p",null,"Further, furthermore, if you pass an invalid data type to any of the T-Regx methods, ",Object(i.b)("inlineCode",{parentName:"p"},"\\InvalidArgumentException")," is thrown."),Object(i.b)("h3",{id:"t-regx-is-explicit"},"T-Regx is explicit"),Object(i.b)("p",null,"Looking at T-Regx code, everyone can immediately see author's intentions and will be able to recognize what\nthe code ",Object(i.b)("strong",{parentName:"p"},"exactly")," does, right away."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z]+')->match($subject)->all();\n// or\npattern('[A-Z]+')->replace($subject)->first()->with('word');\n")),Object(i.b)("p",null,"Looking at this code is like reading a book."),Object(i.b)("hr",null),Object(i.b)("p",null,"You will not find arrays of arrays of arrays in T-Regx API. Each functionality has a dedicated set of methods."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern($pattern)->match($subject)->first(function (Match $match) {\n\n    $match->offset();           // offset of a matched occurrence\n\n    $match->group(2)->offset(); // offset of a matched capturing group\n\n    $match->hasGroup('uri');    // group validation\n\n    $match->hasGroup('2asd');   // throws \\InvalidArgumentException\n});\n")),Object(i.b)("p",null,"Read more about ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Match")," details"),"."),Object(i.b)("h3",{id:"t-regx-is-really-smart-with-its-exceptions"},"T-Regx is really smart with its exceptions"),Object(i.b)("p",null,"We really did put a lot of thoughts to make T-Regx secure, so for example these code snippets aren't a big deal:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($subject)->all()->callback(function (Match $match) {\n    try {\n        return pattern('intentionally (( invalid {{ pattern ')->match('Foo')->first();\n    }\n    catch (MalformedPatternException $ex) {\n        // it's all good and dandy with the catching of this exception :)\n        return $match;\n    }\n});\n")),Object(i.b)("p",null,"In other words, warnings and flags raised and set by the first ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()->match()")," invalid call will be represented as\n",Object(i.b)("inlineCode",{parentName:"p"},"MalformedPatternException")," and won't interfere with the upper ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()->replace()"),"."))}o.isMDXComponent=!0},204:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c({},t,{},e)),a},s=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=b(e,["components","mdxType","originalType","parentName"]),s=o(a),m=n,d=s["".concat(l,".").concat(m)]||s[m]||u[m]||i;return a?r.a.createElement(d,c({ref:t},p,{components:a})):r.a.createElement(d,c({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=m;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var p=2;p<i;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);