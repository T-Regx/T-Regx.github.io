/*! For license information please see 52df82c0.22c160be.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{151:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return b})),t.d(a,"metadata",(function(){return i})),t.d(a,"rightToc",(function(){return o})),t.d(a,"default",(function(){return u}));var n=t(1),r=t(6),c=(t(0),t(196)),l=t(199),p=t(198),b={id:"match-flat-map",title:"Map with keys (Flat map)"},i={id:"match-flat-map",title:"Map with keys (Flat map)",description:"There are cases when you would like to create a single list of all your matches. `flatMap()` is great for it.\r",source:"@site/..\\docs\\match-flat-map.md",permalink:"/docs/match-flat-map",lastUpdatedAt:1582919750,sidebar:"docs",previous:{title:"Map occurrences",permalink:"/docs/match-map"},next:{title:"Iterator",permalink:"/docs/match-iterator"}},o=[{value:"Making a flat map",id:"making-a-flat-map",children:[]},{value:"Return types",id:"return-types",children:[]},{value:"Variable callbacks",id:"variable-callbacks",children:[]},{value:"Mapping with keys",id:"mapping-with-keys",children:[]},{value:"Duplicate keys",id:"duplicate-keys",children:[]}],s={rightToc:o};function u(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"There are cases when you would like to create a single list of all your matches. ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is great for it."),Object(c.b)("h2",{id:"making-a-flat-map"},"Making a flat map"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is basically method ",Object(c.b)("inlineCode",{parentName:"p"},"map()"),", from which you can return multiple values."),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match('I have 19 trains')->flatMap(function (Match $match) {\n    return [\n        $match->text(), strlen($match)\n    ];\n});\n"))),Object(c.b)(p.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"preg::match_all(\"/\\w+/\", 'I have 19 trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [\n        $text, strlen($text)\n    ];\n}, $matches[0]));\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"['I', 1, 'have', 4, '19', 2, 'trains', 6]\n")),Object(c.b)("h2",{id:"return-types"},"Return types"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," only accepts an ",Object(c.b)("inlineCode",{parentName:"p"},"array")," as its return type. Returning a single element and implicitly creating a one-element\narray under the hood would break our ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"'),"."),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Match $match) {\n    return $match;  // <- throws InvalidReturnValueException\n});\n")))),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Match $match) {\n    return [$match];  // ok\n});\n")))),Object(c.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(c.b)("p",null,"You can invoke ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," with any valid PHP ",Object(c.b)("inlineCode",{parentName:"p"},"callable"),", which accepts one or zero string parameters\n(just like ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()"))," and ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(c.b)("inlineCode",{parentName:"a"},"map()")),") and returns ",Object(c.b)("inlineCode",{parentName:"p"},"array"),"."),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern(\"[\\w']+\")->match(\"I'm 19 years old\")->flatMap('str_split');\n"))),Object(c.b)(p.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"preg::match_all(\"/[\\w']+/\", \"I'm 19 years old\", $matches);\nreturn array_merge(...array_map('str_split', $matches[0]));\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"['I', '\\'', 'm', '1', '9', 'y', 'e', 'a', 'r', 's', 'o', 'l', 'd']\n")),Object(c.b)("p",null,"The ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/language.types.callable.php"}),Object(c.b)("inlineCode",{parentName:"a"},"callable"))," passed to ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," must return an array.\n",Object(c.b)("inlineCode",{parentName:"p"},"InvalidReturnValueException")," is thrown, otherwise."),Object(c.b)("h2",{id:"mapping-with-keys"},"Mapping with keys"),Object(c.b)("p",null,"Because ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," receives an array from its callback, it's possible to also return an associative array with\nspecified keys:"),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'pattern("\\w+")->match("Apples are cool")->flatMap(function (Match $match) {\n    return [$match->text() => $match->offset()];   // offset is UTF-8 safe\n});\n'))),Object(c.b)(p.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'preg::match_all("/\\w+/", "Apples are cool", $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) {\n    return [$match[0] => $match[1]];    // offset is given in bytes\n}, $matches[0]));\n')))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"[\n    'Apples' => 0,\n    'are'    => 7,\n    'cool'   => 11\n]\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Keep in mind that ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," uses ",Object(c.b)("inlineCode",{parentName:"p"},"array_merge()")," to flatten the results! So If you use ",Object(c.b)("inlineCode",{parentName:"p"},"int")," as a key, or even\na ",Object(c.b)("inlineCode",{parentName:"p"},"string")," with numeric values (like ",Object(c.b)("inlineCode",{parentName:"p"},"'19'"),") they will be ",Object(c.b)("strong",{parentName:"p"},"reindexed")," by ",Object(c.b)("inlineCode",{parentName:"p"},"array_merge()"),".")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("inlineCode",{parentName:"p"},"Match.offset()")," returns offset as a ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),"valid UTF-8 sequence"),", whereas ",Object(c.b)("inlineCode",{parentName:"p"},"preg::match_all"),"\ncounts them as ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),"bytes"),". To return bytes number with T-Regx as well,\nuse ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(c.b)("inlineCode",{parentName:"a"},"byteOffset()")),".")),Object(c.b)("h2",{id:"duplicate-keys"},"Duplicate keys"),Object(c.b)("p",null,"Duplicate keys are not allowed in PHP arrays, so they'll only appear once in the results."),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(p.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'pattern("\\w+")->match("Apples are cool")->flatMap(function (Match $match) {\n    return [\n        $match->text() => $match->offset(),   // offset is UTF-8 safe\n        \'subject\'      => $match->subject()\n    ];\n});\n'))),Object(c.b)(p.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'Apples are cool';\npreg::match_all(\"/\\w+/\", $subject, $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) use ($subject) {\n    return [\n        $match[0] => $match[1],   // offset is given in bytes\n        'subject' => $subject\n    ];\n}, $matches[0]));\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"[\n    'Apples'  => 0,\n    'subject' => \"Apples are cool\",\n    'are'     => 7,\n    'cool'    => 11\n]\n")))}u.isMDXComponent=!0},196:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return d}));var n=t(0),r=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function b(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=r.a.createContext({}),o=function(e){var a=r.a.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):p({},a,{},e)),t},s=function(e){var a=o(e.components);return r.a.createElement(i.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,i=b(e,["components","mdxType","originalType","parentName"]),s=o(t),m=n,d=s["".concat(l,".").concat(m)]||s[m]||u[m]||c;return t?r.a.createElement(d,p({ref:a},i,{components:t})):r.a.createElement(d,p({ref:a},i))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,l=new Array(c);l[0]=m;var p={};for(var b in a)hasOwnProperty.call(a,b)&&(p[b]=a[b]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var i=2;i<c;i++)l[i]=t[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},197:function(e,a,t){var n;!function(){"use strict";var t={}.hasOwnProperty;function r(){for(var e=[],a=0;a<arguments.length;a++){var n=arguments[a];if(n){var c=typeof n;if("string"===c||"number"===c)e.push(n);else if(Array.isArray(n)&&n.length){var l=r.apply(null,n);l&&e.push(l)}else if("object"===c)for(var p in n)t.call(n,p)&&n[p]&&e.push(p)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(n=function(){return r}.apply(a,[]))||(e.exports=n)}()},198:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){return r.a.createElement("div",null,e.children)}},199:function(e,a,t){"use strict";var n=t(0),r=t.n(n),c=t(200);var l=function(){return Object(n.useContext)(c.a)},p=t(197),b=t.n(p),i=t(93),o=t.n(i);const s=37,u=39;a.a=function(e){const{block:a,children:t,defaultValue:c,values:p,groupId:i}=e,{tabGroupChoices:m,setTabGroupChoices:d}=l(),[h,f]=Object(n.useState)(c);if(null!=i){const e=m[i];null!=e&&e!==h&&f(e)}const O=e=>{f(e),null!=i&&d(i,e)},j=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:b()("tabs",{"tabs--block":a})},p.map(({value:e,label:a})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":h===e,className:b()("tab-item",o.a.tabItem,{"tab-item--active":h===e}),key:e,ref:e=>j.push(e),onKeyDown:e=>((e,a,t)=>{switch(t.keyCode){case u:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case s:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(j,e.target,e),onFocus:()=>O(e),onClick:()=>O(e)},a))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter(e=>e.props.value===h)[0]))}},200:function(e,a,t){"use strict";var n=t(0);const r=Object(n.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});a.a=r}}]);