(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{167:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return h})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var a=n(2),c=n(6),r=(n(0),n(175)),i=n(176),o={id:"match-find-first",title:"Optional matches (Find first)"},h={unversionedId:"match-find-first",id:"match-find-first",isDocsHomePage:!1,title:"Optional matches (Find first)",description:"If you call [first()] on a subject that isn't matched by a pattern - SubjectNotMatchedException is",source:"@site/../docs/match-find-first.mdx",slug:"/match-find-first",permalink:"/docs/match-find-first",version:"current",lastUpdatedAt:1601912446,sidebar:"docs",previous:{title:"First occurrence",permalink:"/docs/match-first"},next:{title:"Iterate matches (For each)",permalink:"/docs/match-for-each"}},s=[{value:"Optional matches with <code>findFirst()</code>",id:"optional-matches-with-findfirst",children:[{value:"<code>orReturn()</code>",id:"orreturn",children:[]},{value:"<code>orElse()</code>",id:"orelse",children:[]},{value:"<code>orThrow()</code>",id:"orthrow",children:[]},{value:"Custom exceptions for <code>orThrow()</code>",id:"custom-exceptions-for-orthrow",children:[]}]},{value:"I don&#39;t like functional",id:"i-dont-like-functional",children:[]}],l={rightToc:s};function b(e){var t=e.components,n=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"If you call ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()"))," on a subject that isn't matched by a pattern - ",Object(r.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," is\nthrown. We discussed that in the previous chapter."),Object(r.b)("p",null,"But what if you ",Object(r.b)("strong",{parentName:"p"},"expected")," the subject not to be matched? And how do you to react to it? "),Object(r.b)("h2",{id:"optional-matches-with-findfirst"},"Optional matches with ",Object(r.b)("inlineCode",{parentName:"h2"},"findFirst()")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"findFirst()")," can be called with a callback (that accepts ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," details) just\nlike ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()")),". The difference is: ",Object(r.b)("inlineCode",{parentName:"p"},"findFirst()")," never throws ",Object(r.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException"),", and allows you to control\nan unmatched subject by appropriate control methods: ",Object(r.b)("inlineCode",{parentName:"p"},"orThrow()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"orReturn()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"orElse()"),"."),Object(r.b)("p",null,"For example:"),Object(r.b)(i.a,{tregx:"return pattern('[0-9]+')->match(\"I'm 19 years old\")\n   ->findFirst(function (Match $match) {\n       // highlight-next-line\n       return \"I was born $match years ago\";\n   })\n   ->orReturn('Unmatched :/');",php:"if (preg::match('/[0-9]+/', \"I'm 19 years old\", $match)) {\n    $text = $match[0];\n    // highlight-next-line\n    return \"I was born $text years ago\";\n}\nreturn 'Unmatched :/';",mdxType:"CodeTabs"}),Object(r.b)(i.b,{mdxType:"Result"},"'I was born 19 years ago'"),Object(r.b)("p",null,"If a match is found, then the result of ",Object(r.b)("inlineCode",{parentName:"p"},"findFirst()")," callback is returned. If a match is not found, however, then the\nhandling of an unmatched subject relies in the chained method."),Object(r.b)("h3",{id:"orreturn"},Object(r.b)("inlineCode",{parentName:"h3"},"orReturn()")),Object(r.b)("p",null,"If a match is not found, it returns a default value."),Object(r.b)(i.a,{tregx:'return pattern(\'[0-9]+\')->match("I\'m a dog")\n    ->findFirst(function (Match $match) {\n       return "I was born $match years ago";\n    })\n    // highlight-next-line\n    ->orReturn("Match is not found");',php:'if (preg::match(\'/[0-9]+/\', "I\'m a dog", $match)) {\n    $text = $match[0];\n    return "I was born $text years ago";\n}\n// highlight-next-line\nreturn "Match is not found";',mdxType:"CodeTabs"}),Object(r.b)(i.b,{mdxType:"Result"},"'Match is not found'"),Object(r.b)("h3",{id:"orelse"},Object(r.b)("inlineCode",{parentName:"h3"},"orElse()")),Object(r.b)("p",null,"If a match is not found, it calls ",Object(r.b)("inlineCode",{parentName:"p"},"orElse()")," callback and uses ",Object(r.b)("em",{parentName:"p"},"it")," to evaluate a return value."),Object(r.b)(i.a,{tregx:'return pattern(\'[0-9]+\')->match("I\'m a dog")\n    ->findFirst(function (Match $match) {\n       return "I was born $match years ago";\n    })\n    ->orElse(function (NotMatched $notMatched) { \n        // highlight-next-line\n        return "I couldn\'t match subject: " . $notMatched->subject();\n    });',php:'$subject = "I\'m a dog";\nif (preg::match(\'/[0-9]+/\', $subject, $match)) {\n    $text = $match[0];\n    return "I was born $text years ago";\n}\n// highlight-next-line\nreturn "I couldn\'t match subject: $subject";',mdxType:"CodeTabs"}),Object(r.b)(i.b,{mdxType:"Result"},"\"I couldn't match subject: I'm a dog\""),Object(r.b)("h3",{id:"orthrow"},Object(r.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(r.b)("p",null,"If a match is not found, it throws ",Object(r.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," by default."),Object(r.b)(i.a,{tregx:'try {\n    return pattern(\'[0-9]+\')->match("I\'m a dog")\n        ->findFirst(function (Match $match) {\n            return "Match is found!";\n        })\n        // highlight-next-line\n        ->orThrow();\n}\ncatch (SubjectNotMatchedException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',php:'try {\n    if (preg::match(\'/[0-9]+/\', "I\'m a dog")) {\n        return "Match is found!";\n    }\n    // highlight-next-line\n    throw new SubjectNotMatchedException(\n        // highlight-next-line\n        \'Expected to get the first match, but subject was not matched\',\n        // highlight-next-line\n        "I\'m a dog");\n}\ncatch (SubjectNotMatchedException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',mdxType:"CodeTabs"}),Object(r.b)("h3",{id:"custom-exceptions-for-orthrow"},"Custom exceptions for ",Object(r.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(r.b)("p",null,"You can also supply your own exception class name."),Object(r.b)(i.a,{tregx:'class MyException extends \\Exception {}\n\ntry {\n    return pattern(\'[0-9]+\')->match("I\'m a dog")\n        ->findFirst(function (Match $match) {\n            return "Match is found!";\n        })\n        // highlight-next-line\n        ->orThrow(MyException::class);\n}\ncatch (MyException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',php:'class MyException extends \\Exception {}\n\ntry {\n    if (preg::match(\'/[0-9]+/\', "I\'m a dog")) {\n        return "Match is found!";\n    } \n    // highlight-next-line\n    throw new MyException(\'Expected to get the first match, but subject was not matched\');\n}\ncatch (MyException $e) {\n    // React to an unmatched subject\n    echo "Not matched: " . $e->getMessage();\n}',mdxType:"CodeTabs"}),Object(r.b)("p",null,"Of course, your custom exception must meet certain requirements:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"It has to be a class")),Object(r.b)("p",{parentName:"li"},"Trying to instantiate interfaces or abstract classes would break our ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"'),".\nThe class must be concrete and explicit.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"It has to implement ",Object(r.b)("inlineCode",{parentName:"strong"},"\\Throwable"))),Object(r.b)("p",{parentName:"li"},"Obviously.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"It must have a suitable constructor")),Object(r.b)("p",{parentName:"li"},"The class must be instantiable with one of the following signatures and parameter types."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"__construct()")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"__construct($message)"),", where ",Object(r.b)("inlineCode",{parentName:"li"},"$message")," can be a string"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"__construct($message, $subject)"),", where ",Object(r.b)("inlineCode",{parentName:"li"},"$message")," and ",Object(r.b)("inlineCode",{parentName:"li"},"$subject")," can be strings")))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Notice, that using ",Object(r.b)("inlineCode",{parentName:"p"},"findFirst()->orThrow()")," without your custom exception is ",Object(r.b)("strong",{parentName:"p"},"identical")," to ",Object(r.b)("inlineCode",{parentName:"p"},"first()"),".")),Object(r.b)("h2",{id:"i-dont-like-functional"},"I don't like functional"),Object(r.b)("p",null,"If you don't like functional programming style, you are free to use ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()")),"\n(which throws an exception) and just catch it."),Object(r.b)(i.a,{tregx:'try {\n    // highlight-next-line\n    return pattern(\'[0-9]+\')->match("I\'m a dog")->first();\n}\ncatch (SubjectNotMatchedException $e) {\n    return "Some other value";\n}',php:"try {\n    if (preg::match('/[0-9]+/', \"I'm a dog\", $match)) {\n        return $match[0];\n    }\n    // highlight-next-line\n    throw new SubjectNotMatchedException();\n}\ncatch (SubjectNotMatchedException $e) {\n    return 'Some other value';\n}",mdxType:"CodeTabs"}))}b.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var a=n(0),c=n.n(a),r=n(180),i=n(181),o=n(182),h=n(4),s=n(177),l=n(48),b=n.n(l),u=function(e){function t(){return e.apply(this,arguments)||this}return Object(h.a)(t,e),t.prototype.render=function(){return c.a.createElement("div",{className:b.a.code},c.a.createElement(s.a,{className:"language-"+this.language},this.code))},Object(o.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(c.a.Component),d=function(e){var t=e.tregx,n=e.php,a=[t?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return c.a.createElement(r.a,{defaultValue:"t-regx",values:a},t&&c.a.createElement(i.a,{value:"t-regx"},c.a.createElement(u,null,t)),n&&c.a.createElement(i.a,{value:"php"},c.a.createElement(u,null,n)))},p=n(49),m=n.n(p),f=function(e){var t=e.text,n=e.children;return c.a.createElement("div",{className:m.a.result},c.a.createElement(u,{language:t?"text":"php"},n))}}}]);