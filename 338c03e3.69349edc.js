(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{180:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return h}));var n=a(0),c=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,c=function(e,t){if(null==e)return{};var a,n,c={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var p=c.a.createContext({}),o=function(e){var t=c.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},s=function(e){var t=o(e.components);return c.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},u=c.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=o(a),u=n,h=s["".concat(i,".").concat(u)]||s[u]||m[u]||r;return a?c.a.createElement(h,b(b({ref:t},p),{},{components:a})):c.a.createElement(h,b({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var b={};for(var l in t)hasOwnProperty.call(t,l)&&(b[l]=t[l]);b.originalType=e,b.mdxType="string"==typeof e?e:n,i[1]=b;for(var p=2;p<r;p++)i[p]=a[p];return c.a.createElement.apply(null,i)}return c.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},93:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return b})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return o}));var n=a(2),c=a(6),r=(a(0),a(180)),i={id:"match-details",title:"Match details"},b={unversionedId:"match-details",id:"match-details",isDocsHomePage:!1,title:"Match details",description:"When using [pattern()->match()] and [pattern()->replace->callback()], some methods receive a callback that accepts [Match]",source:"@site/../docs/match-details.md",slug:"/match-details",permalink:"/docs/match-details",version:"current",lastUpdatedAt:1611005578,sidebar:"docs",previous:{title:"Map with keys (Flat map)",permalink:"/docs/match-flat-map"},next:{title:"Capturing groups",permalink:"/docs/match-groups"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Matched text",id:"matched-text",children:[]},{value:"Integers",id:"integers",children:[]},{value:"Subject",id:"subject",children:[]},{value:"Ordinal value (index)",id:"ordinal-value-index",children:[]},{value:"Limit",id:"limit",children:[]},{value:"Offsets",id:"offsets",children:[]},{value:"Tail",id:"tail",children:[]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"User data",id:"user-data",children:[]},{value:"Groups",id:"groups",children:[]}],p={rightToc:l};function o(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When using ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match"}),Object(r.b)("inlineCode",{parentName:"a"},"pattern()->match()"))," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-callback"}),Object(r.b)("inlineCode",{parentName:"a"},"pattern()->replace->callback()")),", some methods receive a callback that accepts ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match")),"\ndetails object. These methods are: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(r.b)("inlineCode",{parentName:"a"},"findFirst()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-for-each"}),Object(r.b)("inlineCode",{parentName:"a"},"forEach()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(r.b)("inlineCode",{parentName:"a"},"map()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-flat-map"}),Object(r.b)("inlineCode",{parentName:"a"},"flatMap()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-callback"}),Object(r.b)("inlineCode",{parentName:"a"},"callback()")),"."),Object(r.b)("p",null,"The details can be used to get concise information about the matched occurrence, such as its value\n(i.e. ",Object(r.b)("inlineCode",{parentName:"p"},'"the whole match"'),"), capturing groups and their UTF-8/raw offsets, limits, indexes, other matches as well as the\nused subject (although it could also be pass as a closure parameter) and more."),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Using ",Object(r.b)("inlineCode",{parentName:"p"},"Match")," details, you gain access to:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#matched-text"}),Object(r.b)("inlineCode",{parentName:"a"},"text()")),"/",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#matched-text"}),Object(r.b)("inlineCode",{parentName:"a"},"textLength()"))," - value of a matched occurrence"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#integers"}),Object(r.b)("inlineCode",{parentName:"a"},"toInt()")),"/",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#integers"}),Object(r.b)("inlineCode",{parentName:"a"},"isInt()"))," which allow you to handle integers safely"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#subject"}),Object(r.b)("inlineCode",{parentName:"a"},"subject()"))," - subject against which the pattern was matched"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#ordinal-value-index"}),Object(r.b)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of a matched occurrence"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#limit"}),Object(r.b)("inlineCode",{parentName:"a"},"limit()"))," - limit which was put on the matches"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#offsets"}),"offsets of matched values")," in the subject:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#offsets"}),Object(r.b)("inlineCode",{parentName:"a"},"offset()"))),Object(r.b)("li",{parentName:"ul"},"byte offsets - ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#offsets"}),Object(r.b)("inlineCode",{parentName:"a"},"byteOffset()"))),Object(r.b)("li",{parentName:"ul"},"tail (offset of the end of the string) - ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#tail"}),Object(r.b)("inlineCode",{parentName:"a"},"tail()")),"  "))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#other-occurrences"}),Object(r.b)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#other-occurrences"}),"User data")," - sharing custom data between callbacks"),Object(r.b)("li",{parentName:"ul"},"details about capturing groups, in the next chapter: ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-groups"}),"Capturing groups")),Object(r.b)("li",{parentName:"ul"},"byte versions of the methods (as opposed to character (utf-8) versions):",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"byteTextLength()")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"byteOffset()")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"byteTail()"))))),Object(r.b)("h2",{id:"matched-text"},"Matched text"),Object(r.b)("p",null,"There are 6 similar ways to get the value of the matched occurrence."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{3-4,6-8}","{3-4,6-8}":!0}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n\n    return $match->text();             // using text() method\n    return $match->group(0)->text();   // group #0 is the whole match in all regexp engines\n\n    return (string) $match;            // cast it to string\n    return (string) $match->group(0);  // cast group #0 to string\n    return \"$match\";                   // enclose it in double quotes\n});\n")),Object(r.b)("p",null,"or you can just accept ",Object(r.b)("inlineCode",{parentName:"p"},"string")," in the callback signature."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (string $match) {\n    return $match;\n});\n")),Object(r.b)("p",null,"All of them are redundant and equal to each other. Their redundancy comes from the fact the there are a few ways of\ncasting an object to string in PHP, casting ",Object(r.b)("inlineCode",{parentName:"p"},"Match")," to string is the same as getting ",Object(r.b)("inlineCode",{parentName:"p"},"text()")," in T-Regx, and that the\nwhole match is also group ",Object(r.b)("inlineCode",{parentName:"p"},"0")," in regular expressions."),Object(r.b)("p",null,"There's also UTF8-safe method ",Object(r.b)("inlineCode",{parentName:"p"},"textLength()")," which, you guessed it, returns the length of a matched text."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n    return $match->text();         // 'Trains'\n    return $match->textLength();   // 6\n});\n")),Object(r.b)("h2",{id:"integers"},"Integers"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"isInt()")," returns ",Object(r.b)("inlineCode",{parentName:"p"},"true"),' if, and only if, the matched occurrence is numeric. And by "numeric", we mean "real" numeric,\nnot PHP numeric:'),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"String values considered valid integers: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"'14'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'-14'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'000'")," "))),Object(r.b)("li",{parentName:"ul"},"Strings that aren't treated as valid integers: ",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"'+14'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"' 10'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'10 '"),", ",Object(r.b)("inlineCode",{parentName:"li"},"''"),", ",Object(r.b)("inlineCode",{parentName:"li"},"' '"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'0.0'"),", ",Object(r.b)("inlineCode",{parentName:"li"},"'0,0'"),",")))),Object(r.b)("p",null,"The string is considered a valid integer if:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"contains only ",Object(r.b)("inlineCode",{parentName:"li"},"0-9")," characters, and more than 1 of them (so ",Object(r.b)("inlineCode",{parentName:"li"},"00")," is also a valid integer, but ",Object(r.b)("inlineCode",{parentName:"li"},"''")," isn't)"),Object(r.b)("li",{parentName:"ul"},"optionally starts with only one ",Object(r.b)("inlineCode",{parentName:"li"},"-")," sign"),Object(r.b)("li",{parentName:"ul"},"its numeric representation is:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"higher than ",Object(r.b)("inlineCode",{parentName:"li"},"PHP_INT_MIN")," (-9223372036854775808)"),Object(r.b)("li",{parentName:"ul"},"lower than ",Object(r.b)("inlineCode",{parentName:"li"},"PHP_INT_MAX")," (9223372036854775807)"))),Object(r.b)("li",{parentName:"ul"},"doesn't contain any other characters")),Object(r.b)("h4",{id:"checking-and-parsing"},"Checking and parsing"),Object(r.b)("p",null,"There are two methods regarding integers: ",Object(r.b)("inlineCode",{parentName:"p"},"isInt()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"toInt()"),"."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"$match->isInt()")," returns ",Object(r.b)("inlineCode",{parentName:"p"},"true"),"/",Object(r.b)("inlineCode",{parentName:"p"},"false")," depending on whether the matched occurrence is numeric. ",Object(r.b)("inlineCode",{parentName:"p"},"toInt()"),"\nreturns said numeric occurrence as an integer, or throws ",Object(r.b)("inlineCode",{parentName:"p"},"IntegerFormatException")," instead."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{3}","{3}":!0}),"pattern('\\d+')->match('User input was: 4 times')->first(function (Match $match) {\n    if ($match->isInt()) {\n        for ($i = 0; $i < $match->toInt(); $i++) {\n            // tasks\n        }\n    }\n});\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"It's implemented with ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.filter-var.php"}),Object(r.b)("inlineCode",{parentName:"a"},"filter_var()")),", but you can think of it as ",Object(r.b)("inlineCode",{parentName:"p"},"/^-?\\d+$/")," with max/min values check."))),Object(r.b)("h2",{id:"subject"},"Subject"),Object(r.b)("p",null,"To get the subject in your callback, use ",Object(r.b)("inlineCode",{parentName:"p"},"Match.subject()"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+')->match('I like Trains')->map(function (Match $match) {\n    return $match->subject();\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"'I like Trains'\n")),Object(r.b)("p",null,"This is equivalent to storing the subject in a variable and using it in your closure."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like Trains';\n\npattern('[A-Z][a-z]+')->match($subject)->map(function (Match $match) use ($subject) {\n    return $subject;\n});\n")),Object(r.b)("h2",{id:"ordinal-value-index"},"Ordinal value (index)"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Match.index()")," returns the ordinal number of a matched occurrence."),Object(r.b)("p",null,"In this example, we'll modify every second word:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{2}","{2}":!0}),"pattern('\\w+')->match('I like Trains, but I also like bikes')->map(function (Match $match) {\n    if ($match->index() % 2 === 0) {\n        return strtolower($match);\n    }\n    return strtoupper($match);\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"['i', 'LIKE', 'trains', 'BUT', 'i', 'ALSO', 'like', 'BIKES']\n")),Object(r.b)("p",null,"Results of ",Object(r.b)("inlineCode",{parentName:"p"},"Match.index()")," are always ",Object(r.b)("strong",{parentName:"p"},"continuous integer")," numbers, going from ",Object(r.b)("inlineCode",{parentName:"p"},"0")," to ",Object(r.b)("inlineCode",{parentName:"p"},"1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"2"),", ",Object(r.b)("inlineCode",{parentName:"p"},"3"),"..., even when filtered."),Object(r.b)("h2",{id:"limit"},"Limit"),Object(r.b)("p",null,"Depending on whether you used ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match#many"}),Object(r.b)("inlineCode",{parentName:"a"},"all()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()"))," or ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match#many"}),Object(r.b)("inlineCode",{parentName:"a"},"only(int)"))," - method ",Object(r.b)("inlineCode",{parentName:"p"},"limit()")," will return ",Object(r.b)("inlineCode",{parentName:"p"},"-1"),", ",Object(r.b)("inlineCode",{parentName:"p"},"1")," or an\nargument given to ",Object(r.b)("inlineCode",{parentName:"p"},"only()")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->all()->callback(function (Match $match) {\n    $match->limit();   // -1\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->first()->callback(function (Match $match) {\n    $match->limit();   // 1\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($string)->only(5)->callback(function (Match $match) {\n    $match->limit();   // 5\n});\n")),Object(r.b)("h2",{id:"offsets"},"Offsets"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Match.offset()")," can be used to get the offset of the matched occurrence in the subject. ",Object(r.b)("inlineCode",{parentName:"p"},"Match.offset()")," is multi-byte\ncharacter safe and returns offset in characters, whereas ",Object(r.b)("inlineCode",{parentName:"p"},"Match.byteOffset()")," returns the offset in bytes."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('here')->match('Apples for 0.30\u20ac, here')->first(function (Match $match) {\n    $characters = $match->offset();   // 18\n    $byes = $match->byteOffset();     // 20\n});\n")),Object(r.b)("p",null,"Here's what the numbers mean:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"Apples for 0.30\u20ac, here\n                  \u2191\n                  offset()\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-text"}),"A  p   p   l   e   s      f   o   r      0  .  3  0  \u20ac           ,     h   e   r   e\n65 112 112 108 101 115 32 102 111 114 32 48 46 51 48 226 130 172 44 32 104 101 114 101\n                                                                       \u2191\n                                                                       byteOffset()\n")),Object(r.b)("p",null,"In other words, ",Object(r.b)("inlineCode",{parentName:"p"},"offset()")," treats bytes ",Object(r.b)("inlineCode",{parentName:"p"},"[226, 130, 172]")," as one multi-byte character (euro sign ",Object(r.b)("inlineCode",{parentName:"p"},"\u20ac"),") and counts them as\none; whereas ",Object(r.b)("inlineCode",{parentName:"p"},"byteOffset()")," would count them as three."),Object(r.b)("p",null,"Use:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"offset()")," with functions: ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.mb-substr.php"}),Object(r.b)("inlineCode",{parentName:"a"},"mb_substr()")),", ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.mb-strpos.php"}),Object(r.b)("inlineCode",{parentName:"a"},"mb_strpos()"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"byteOffset()")," with functions: ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.substr.php"}),Object(r.b)("inlineCode",{parentName:"a"},"substr()")),", ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.strpos.php"}),Object(r.b)("inlineCode",{parentName:"a"},"strpos()")))),Object(r.b)("h2",{id:"tail"},"Tail"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"Match.tail()")," simply returns the position of the last character in a matched occurrence."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('ipsum')->match('Lorem ipsum')->first(function (Match $match) {\n    $start = $match->offset();   // 6\n    $end = $match->tail();       // 11\n});\n")),Object(r.b)("p",null,"There's also ",Object(r.b)("inlineCode",{parentName:"p"},"Match.byteTail()")," which returns the tail in bytes, instead of characters."),Object(r.b)("h2",{id:"other-occurrences"},"Other occurrences"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Match")," has access to other matched occurrences:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Match.all()")," - for whole matches (like ",Object(r.b)("inlineCode",{parentName:"li"},"Match.text()"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Match.group().all()")," - for capturing groups (like ",Object(r.b)("inlineCode",{parentName:"li"},"Match.group().text()"),")")),Object(r.b)("p",null,"Even if you use ",Object(r.b)("inlineCode",{parentName:"p"},"first()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"only(int)")," methods, ",Object(r.b)("inlineCode",{parentName:"p"},"Match.all()")," always returns unlimited occurrences."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{4}","{4}":!0}),"pattern('\\w+')->match('Apples are cool')->map(function (Match $match) {\n    return [\n        'match' => $match->text(),\n        'all'   => $match->all()\n    ];\n});\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"[\n  ['match' => 'Apples', 'all' => ['Apples', 'are', 'cool']],\n  ['match' => 'are',    'all' => ['Apples', 'are', 'cool']],\n  ['match' => 'cool',   'all' => ['Apples', 'are', 'cool']]\n]\n")),Object(r.b)("h2",{id:"user-data"},"User data"),Object(r.b)("p",null,"To most users this functionality will occur as redundant - it's only use case are multiple calls to callbacks, for example\nwhen using chained ",Object(r.b)("inlineCode",{parentName:"p"},"filter()->map()"),". With user data, it's possible to perform an operation in ",Object(r.b)("inlineCode",{parentName:"p"},"filter()"),", store its\nvalue in user data, and then use the value in ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(r.b)("inlineCode",{parentName:"a"},"map()"))," without reference closure variables."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{4,8}","{4,8}":!0}),"pattern('\\w{2}')->match('Languages: en, de, xd, sv')\n    ->filter(function (Match $match) {\n        $languageInfo = HeavyService::fetch($match->text());\n        $match->setUserData($languageInfo);\n        return $languageInfo->isValid();\n    })\n    ->map(function (Match $match) {\n        $languageInfo = $match->getUserData();\n        return $languageInfo->languages():\n    });\n")),Object(r.b)("h2",{id:"groups"},"Groups"),Object(r.b)("p",null,"With ",Object(r.b)("inlineCode",{parentName:"p"},"Match.group(string|int)"),", you can easily retrieve capturing groups."),Object(r.b)("p",null,"Just like with ",Object(r.b)("inlineCode",{parentName:"p"},"Match"),", retrieving matched occurrence value is done with ",Object(r.b)("inlineCode",{parentName:"p"},"text()")," method or by casting it to ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php",metastring:"{5,7-8}","{5,7-8}":!0}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $text = $match->text();                            // '192mm'\n\n    $value = (string) $match->group('value');          // '192'\n    $unit  =          $match->group('unit')->text();   // 'mm'\n});\n")),Object(r.b)("p",null,"More about capturing groups can be found in the next section: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-groups"}),"Capturing groups"),"."))}o.isMDXComponent=!0}}]);