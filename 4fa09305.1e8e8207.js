(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{103:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return o}));var n=a(2),r=a(6),p=(a(0),a(179)),i={id:"why-php-sucks",title:"Why PHP sucks?"},c={unversionedId:"why-php-sucks",id:"why-php-sucks",isDocsHomePage:!1,title:"Why PHP sucks?",description:"If you'd like to learn the reasons behind certain T-Regx feature, and know how it manages to",source:"@site/../docs/why-php-sucks.md",slug:"/why-php-sucks",permalink:"/docs/why-php-sucks",version:"current",lastUpdatedAt:1610584644,sidebar:"docs",previous:{title:"Prepared Patterns in details",permalink:"/docs/prepared-patterns-in-details"}},l=[{value:"What&#39;s wrong with PHP Regular Expressions:",id:"whats-wrong-with-php-regular-expressions",children:[{value:"PHP is Implicit",id:"php-is-implicit",children:[]},{value:"PHP is Unintuitive",id:"php-is-unintuitive",children:[]},{value:"PHP is Messy",id:"php-is-messy",children:[]},{value:"PHP is Inconsistent",id:"php-is-inconsistent",children:[]},{value:"PHP is Deliberately buggy",id:"php-is-deliberately-buggy",children:[]},{value:"PHP silently ignores invalid arguments",id:"php-silently-ignores-invalid-arguments",children:[]}]},{value:"T-Regx showcase",id:"t-regx-showcase",children:[{value:"T-Regx eliminates gotcha&#39;s",id:"t-regx-eliminates-gotchas",children:[]},{value:"T-Regx maps warnings and errors to exceptions",id:"t-regx-maps-warnings-and-errors-to-exceptions",children:[]},{value:"T-Regx is clean and simple",id:"t-regx-is-clean-and-simple",children:[]},{value:"T-Regx unifies the differences between matching and replacing",id:"t-regx-unifies-the-differences-between-matching-and-replacing",children:[]},{value:"T-Regx provides rich API for building patterns",id:"t-regx-provides-rich-api-for-building-patterns",children:[]},{value:"T-Regx is really smart with its exceptions",id:"t-regx-is-really-smart-with-its-exceptions",children:[]}]}],b={rightToc:l};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(p.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(p.b)("p",null,"If you'd like to learn the reasons behind certain T-Regx feature, and know how it manages to\nsupersede PHP regular expressions, read on."),Object(p.b)("h2",{id:"whats-wrong-with-php-regular-expressions"},"What's wrong with PHP Regular Expressions:"),Object(p.b)("p",null,"PHP regular expressions API is far from perfect. Here's only a handful of what's wrong with it:"),Object(p.b)("h3",{id:"php-is-implicit"},"PHP is Implicit"),Object(p.b)("p",null,"You are probably a PHP developer. I would like to get ",Object(p.b)("inlineCode",{parentName:"p"},"'Robert likes apples'"),". Can you tell me which\nis the correct signature for this task?"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"preg_replace('/Bob/', 'Robert', 'Bob likes apples');    // pattern, replacement, subject\n// or\npreg_replace('/Bob/', 'Bob likes apples', 'Robert');    // pattern, subject, replacement\n// ??\n")),Object(p.b)("h3",{id:"php-is-unintuitive"},"PHP is Unintuitive"),Object(p.b)("p",null,"Programming languages are ",Object(p.b)("strong",{parentName:"p"},"tools")," created to solve problems. An experienced programmer ",Object(p.b)("strong",{parentName:"p"},"should"),"\nbe able to look at the code and tell what it does."),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"Whole set of regular expressions with PHP throws all kinds of notices, warnings, errors and fatal errors, as well as\nsilently ignoring invalid data."),Object(p.b)("li",{parentName:"ul"},"Matching API has two functions: ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," (first) or ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()")),"."),Object(p.b)("li",{parentName:"ul"},"Replacing API has four functions: ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace()")),", ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-replace-callback.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace_callback()")),", ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-replace-callback-array.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace_callback_array()"))," and ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()")),"."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace()"))," and other replacing functions have two optional ",Object(p.b)("inlineCode",{parentName:"li"},"int")," parameters, and I never know\nwhich is ",Object(p.b)("inlineCode",{parentName:"li"},"$limit")," and which is ",Object(p.b)("inlineCode",{parentName:"li"},"&$count"),"."),Object(p.b)("li",{parentName:"ul"},"Function which does ",Object(p.b)("strong",{parentName:"li"},"replacing")," is named ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()")),"."),Object(p.b)("li",{parentName:"ul"},"Matching returns an array of arrays, which contain either a ",Object(p.b)("inlineCode",{parentName:"li"},"string"),", ",Object(p.b)("inlineCode",{parentName:"li"},"null"),", or an array of ",Object(p.b)("inlineCode",{parentName:"li"},"null"),"s,\n",Object(p.b)("inlineCode",{parentName:"li"},"strings")," and ",Object(p.b)("inlineCode",{parentName:"li"},"int"),"s. What type exactly is returned depends on the runtime subject and the order of the values."),Object(p.b)("li",{parentName:"ul"},"Functions with 4, 5, 6 parameters (3-4 of which are optional)."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace()"))," on error returns ",Object(p.b)("inlineCode",{parentName:"li"},"null"),", but ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()"))," (which is supposed to be identical) returns ",Object(p.b)("inlineCode",{parentName:"li"},"[]")," on error.")),Object(p.b)("h3",{id:"php-is-messy"},"PHP is Messy"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_OFFSET_CAPTURE")),' is a nightmare! It changes return type from "an array of arrays" to "an array of arrays of arrays".'),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_SET_ORDER"))," / ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_PATTERN_ORDER")),' change return values. It\'s either "groups of matches" or "matches of groups",\ndepending on the flag.')),Object(p.b)("p",null,"The worst part? You find yourself looking at this code:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"return $match[1][0];\n")),Object(p.b)("p",null,"having no idea what. it. does. You have to see whether you're using ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," or ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()"))," and\nwhether any of ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_SET_ORDER")),"/",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_PATTERN_ORDER")),"/",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_OFFSET_CAPTURE"))," were used."),Object(p.b)("p",null,"And to refactor it, later? Replace ",Object(p.b)("inlineCode",{parentName:"p"},"$match[1]")," with ",Object(p.b)("inlineCode",{parentName:"p"},"array_map($match, ...)"),". Good luck. With that."),Object(p.b)("h3",{id:"php-is-inconsistent"},"PHP is Inconsistent"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Matches returned from ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()")),", ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()"))," and ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-replace-callback.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace_callback()"))," each have completely\ndifferent structures and each has own magic values and rules. So when you, say, change ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," to\n",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()")),", there's a high chance you'll break something."),Object(p.b)("p",{parentName:"li"},"For example, ",Object(p.b)("inlineCode",{parentName:"p"},'""')," for ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()")),' means "maybe matched empty string, maybe unmatched", but for\n',Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()")),' it means "definitely not matched".')),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"Flag ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_UNMATCHED_AS_NULL"))," works for ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()")),"/",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()")),", but not for replacing.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"How do you get results and the count of the results?"),Object(p.b)("table",{parentName:"li"},Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Value"),Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"th"},"preg_replace()")))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Count"),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return type"),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Argument reference")),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Values"),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Argument reference"),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Return type")))),Object(p.b)("pre",{parentName:"li"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$replaced = preg_replace($p, $r, $s, $count);\n$count    = preg_match($p, $s, $matched);\n"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"If you use ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_OFFSET_CAPTURE"))," and your subject isn't matched with the pattern; these are the results:"),Object(p.b)("table",{parentName:"li"},Object(p.b)("thead",{parentName:"table"},Object(p.b)("tr",{parentName:"thead"},Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Success"),Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(p.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"th"},"preg_match_all()")))),Object(p.b)("tbody",{parentName:"table"},Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"true")),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"['match', 2]")),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"['match', 2']"))),Object(p.b)("tr",{parentName:"tbody"},Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"false")),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"''")),Object(p.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(p.b)("inlineCode",{parentName:"td"},"[null, -1]")))))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_quote()"))," quotes different characters for different PHP versions.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," signature states it returns ",Object(p.b)("inlineCode",{parentName:"p"},"int"),", but it returns ",Object(p.b)("inlineCode",{parentName:"p"},"false")," on error.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"PHP ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"http://php.net/manual/en/function.preg-filter.php"}),"documentation")," promises that"),Object(p.b)("blockquote",{parentName:"li"},Object(p.b)("p",{parentName:"blockquote"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()"))," is identical to ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace()"))," except it only returns the (possibly transformed) subjects...")),Object(p.b)("p",{parentName:"li"},"but ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()"))," and ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-replace.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace()"))," actually return ",Object(p.b)("em",{parentName:"p"},"completely")," different values for ",Object(p.b)("strong",{parentName:"p"},"the same")," parameters."))),Object(p.b)("h3",{id:"php-is-deliberately-buggy"},"PHP is Deliberately buggy"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," and ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match-all.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match_all()"))," return either:"),Object(p.b)("ul",{parentName:"li"},Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"(int) x")," - a number of matches, if a match is found"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"(int) 0")," - if no matches are found"),Object(p.b)("li",{parentName:"ul"},Object(p.b)("inlineCode",{parentName:"li"},"(bool) false")," - if a runtime error occurred")),Object(p.b)("p",{parentName:"li"},"So if you do just this:"),Object(p.b)("pre",{parentName:"li"},Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"if (preg_match('//', '')) {\n")),Object(p.b)("p",{parentName:"li"}," there's no way of knowing whether your pattern is ",Object(p.b)("em",{parentName:"p"},"incorrect")," or whether it's correct, but your subject isn't\nmatched by your pattern. "),Object(p.b)("p",{parentName:"li"}," You need to ",Object(p.b)("strong",{parentName:"p"},"remember")," to add an explicit ",Object(p.b)("inlineCode",{parentName:"p"},"!== false")," check each time you use it.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"All ",Object(p.b)("inlineCode",{parentName:"p"},"preg_*")," functions only return ",Object(p.b)("inlineCode",{parentName:"p"},"false"),"/",Object(p.b)("inlineCode",{parentName:"p"},"null"),"/",Object(p.b)("inlineCode",{parentName:"p"},"[]")," on error. You have to remember to call ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-last_error.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_last_error()"))," to get\nsome insight in the nature of your error. Of course, it only returns ",Object(p.b)("inlineCode",{parentName:"p"},"int"),"! So you have to look up that ",Object(p.b)("inlineCode",{parentName:"p"},"4"),' is\n"invalid utf8 sequence" and ',Object(p.b)("inlineCode",{parentName:"p"},"2"),' is "backtrack limit exceeded".')),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"However, ",Object(p.b)("inlineCode",{parentName:"p"},"false"),"-check and ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-last_error.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_last_error()"))," can only save you from runtime errors. So called compile errors don't\nwork that way and require either setting a custom error handler (bad idea) or read and clear just one of those errors\n(good luck with errors in ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-replace-callback.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_replace_callback()"))," for example).")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()"))," for arrays returns ",Object(p.b)("inlineCode",{parentName:"p"},"[]")," if an error occurred; even though ",Object(p.b)("inlineCode",{parentName:"p"},"[]")," is the perfectly valid result for this\nfunction. For example, it could have filtered out all values or its input was an empty array right from the beginning.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"For certain parameter types, some PCRE methods (e.g. ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-filter.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_filter()")),") raise ",Object(p.b)("strong",{parentName:"p"},"fatal errors")," terminating the application.")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_quote()"))," completely ignores whitespace, which should be quoted when used with ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php"}),Object(p.b)("inlineCode",{parentName:"a"},"x")," flag"),"."))),Object(p.b)("h3",{id:"php-silently-ignores-invalid-arguments"},"PHP silently ignores invalid arguments"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," called with negative offset is simply ignored."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," called with offset longer than the subject changes nothing, and ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-last_error.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_last_error()"))," returns ",Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/pcre.constants.php"}),Object(p.b)("inlineCode",{parentName:"a"},"PREG_INTERNAL_ERROR"))," code."),Object(p.b)("li",{parentName:"ul"},Object(p.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_quote()"))," accepts a single character as the second parameter, and simply ignores any longer string.")),Object(p.b)("h2",{id:"t-regx-showcase"},"T-Regx showcase"),Object(p.b)("p",null,"That's why T-Regx happened. It addresses ",Object(p.b)("strong",{parentName:"p"},"all")," of PHP regular expressions flaws."),Object(p.b)("h3",{id:"t-regx-eliminates-gotchas"},"T-Regx eliminates gotcha's"),Object(p.b)("p",null,"PHP PCRE API is full of false negatives and false positives. For example, missing group in ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-match.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_match()"))," doesn't\nnecessarily mean the group doesn't exist or wasn't matched. It's just a \"gotcha\" set for you by PHP."),Object(p.b)("p",null,"T-Regx performs all the necessary ",Object(p.b)("inlineCode",{parentName:"p"},"if"),"ology and checks to verify that methods that return ",Object(p.b)("inlineCode",{parentName:"p"},"true")," and ",Object(p.b)("inlineCode",{parentName:"p"},"false")," are really\ntrue or false :)"),Object(p.b)("p",null,"If, because of reasons, there isn't a way to determine something with absolute certainty (like the index of a group with ",Object(p.b)("inlineCode",{parentName:"p"},"J")," modifier),\nthen T-Regx API simply doesn't have ",Object(p.b)("inlineCode",{parentName:"p"},"index()")," method for ",Object(p.b)("inlineCode",{parentName:"p"},"usingDuplicateName().group()"),"."),Object(p.b)("h3",{id:"t-regx-maps-warnings-and-errors-to-exceptions"},"T-Regx maps warnings and errors to exceptions"),Object(p.b)("p",null,"If you try to use an invalid regular expression in Java or JavaScript, you would probably get a ",Object(p.b)("inlineCode",{parentName:"p"},"SyntaxError"),"\nexception, so you'd be forced to handle it. Such things don't happen in PHP regular expressions."),Object(p.b)("p",null,"T-Regx always throws an exception and never issues any warnings, fatal errors, errors or notices."),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"try {\n    return pattern('Foo')->match('Bar')->all();\n}\ncatch (PatternException $exception) {\n    // handle the error\n}\n")),Object(p.b)("p",null,"Furthermore, T-Regx throws different exceptions for different errors:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"SubjectNotMatchedException"),Object(p.b)("li",{parentName:"ul"},"MalformedPatternException"),Object(p.b)("li",{parentName:"ul"},"FlagNotAllowedException"),Object(p.b)("li",{parentName:"ul"},"GroupNotMatchedException"),Object(p.b)("li",{parentName:"ul"},"NonexistentGroupException"),Object(p.b)("li",{parentName:"ul"},"InvalidReplacementException"),Object(p.b)("li",{parentName:"ul"},"InvalidReturnValueException"),Object(p.b)("li",{parentName:"ul"},"CatastrophicBacktrackingPregException"),Object(p.b)("li",{parentName:"ul"},"RecursionLimitPregException"),Object(p.b)("li",{parentName:"ul"},"Utf8OffsetPregException")),Object(p.b)("p",null,"They all extend ",Object(p.b)("inlineCode",{parentName:"p"},"PatternException")," though."),Object(p.b)("p",null,"Further, furthermore, if you pass an invalid data type to any of the T-Regx methods, ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(p.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," is thrown."),Object(p.b)("h3",{id:"t-regx-is-clean-and-simple"},"T-Regx is clean and simple"),Object(p.b)("p",null,"You will not find arrays, of arrays, of arrays in T-Regx API. Each functionality has a dedicated set of methods."),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->offset();           // offset of a matched occurrence\n    $match->group(2)->offset(); // offset of a matched capturing group\n    $match->group(-3);          // throws \\InvalidArgumentException\n});\n")),Object(p.b)("h3",{id:"t-regx-unifies-the-differences-between-matching-and-replacing"},"T-Regx unifies the differences between matching and replacing"),Object(p.b)("p",null,"Matching"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->offset();            // exactly the same interface\n    $match->group(2)->offset();\n    $match->group(-3);\n});\n")),Object(p.b)("p",null,"Replacing:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern($pattern)->replace($subject)->first()->callback(function (Match $match) {\n    $match->offset();            // exactly the same interface\n    $match->group(2)->offset(); \n    $match->group(-3);\n});\n")),Object(p.b)("p",null,"Read more about ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(p.b)("inlineCode",{parentName:"a"},"Match")," details"),"."),Object(p.b)("h3",{id:"t-regx-provides-rich-api-for-building-patterns"},"T-Regx provides rich API for building patterns"),Object(p.b)("p",null,"Because of ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::prepare()"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::inject()"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::bind()"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::compose()"),", ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::format()")," and ",Object(p.b)("inlineCode",{parentName:"p"},"Pattern::template()"),"\nthere is never a need for using ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_quote()"))," yourself."),Object(p.b)("p",null,"For example to build pattern with un-safe data, instead of building pattern with ",Object(p.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(p.b)("inlineCode",{parentName:"a"},"preg_quote()")),", simply use:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"Pattern::prepare([\"(My|Our) (dog|cat) names are \", [$dog], ' and ', [$cat], '!']);\n")),Object(p.b)("p",null,"or"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),'Pattern::inject("(My|Our) (dog|cat) names are @ and @!", [$dog, $cat]);\n')),Object(p.b)("h3",{id:"t-regx-is-really-smart-with-its-exceptions"},"T-Regx is really smart with its exceptions"),Object(p.b)("p",null,"We really did put a lot of thoughts to make T-Regx secure, so for example these code snippets aren't a big deal:"),Object(p.b)("pre",null,Object(p.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace($subject)->all()->callback(function (Match $match) {\n    try {\n        return pattern('intentionally (( invalid {{ pattern ')->match('Foo')->first();\n    }\n    catch (MalformedPatternException $ex) {\n        // it's all good and dandy\n        // this exception $ex here, won't interfere with the pattern \"outside\"\n        return $match;\n    }\n});\n")),Object(p.b)("p",null,"In other words, warnings and flags raised by the inner ",Object(p.b)("inlineCode",{parentName:"p"},"pattern()->match()")," invalid call will be represented as\n",Object(p.b)("inlineCode",{parentName:"p"},"MalformedPatternException"),", and won't interfere with the outer ",Object(p.b)("inlineCode",{parentName:"p"},"pattern()->replace()"),"."))}o.isMDXComponent=!0},179:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},p=Object.keys(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)a=p[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),o=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},s=function(e){var t=o(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,p=e.originalType,i=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),s=o(a),m=n,u=s["".concat(i,".").concat(m)]||s[m]||h[m]||p;return a?r.a.createElement(u,c(c({ref:t},b),{},{components:a})):r.a.createElement(u,c({ref:t},b))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=a.length,i=new Array(p);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var b=2;b<p;b++)i[b]=a[b];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);