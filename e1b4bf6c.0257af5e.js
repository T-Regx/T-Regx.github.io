(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{190:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return u}));n(211);var a=n(207);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const i={id:"handling-user-input",title:"Handling user input"},o=[{value:"Why handling user input is important",id:"why-handling-user-input-is-important",children:[]},{value:"Why not just <code>preg_quote()</code>",id:"why-not-just-preg_quote",children:[]}],p={rightToc:o},l="wrapper";function u({components:e,...t}){return Object(a.b)(l,r({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Prepared Patterns allow you to confidently use user-input or unsafe data that might contain regular expression special\ncharacters. It's also integrated with ",Object(a.b)("a",r({parentName:"p"},{href:"/docs/delimiters"}),"Automatic Delimiters"),", so they're quoted with regard to the delimiter\nthat was chosen automatically for you."),Object(a.b)("p",null,"There are two entry points for prepared patterns:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-prepare"}),Object(a.b)("inlineCode",{parentName:"a"},"Pattern::prepare()"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",r({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-inject"}),Object(a.b)("inlineCode",{parentName:"a"},"Pattern::inject()")))),Object(a.b)("p",null,"You can read about each of them in the next section, but for now, let's cover the basics."),Object(a.b)("h2",{id:"why-handling-user-input-is-important"},"Why handling user input is important"),Object(a.b)("p",null,"Let's say, you would like to search a subject for ",Object(a.b)("inlineCode",{parentName:"p"},"My dog's name is Barky"),", where the dog's name is user input."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),"$input = $_GET['name'];\n\nPattern::of(\"(My|Our) dog's name is \" . $input . '!');\n")),Object(a.b)("p",null,"Immediately though, you can see that ",Object(a.b)("inlineCode",{parentName:"p"},"$input")," can contain regexp special characters and mess with your pattern."),Object(a.b)("p",null,"If, by accident, ",Object(a.b)("inlineCode",{parentName:"p"},"$input")," had a value of ",Object(a.b)("inlineCode",{parentName:"p"},"B(arky")," - you would receive an exception ",Object(a.b)("inlineCode",{parentName:"p"},"missing ) at offset 31")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-php"}),'Pattern::of("(My|Our) dog\'s name is (Barky!");\n')),Object(a.b)("p",null,"They need to be escaped!"),Object(a.b)("p",null,"Read on, to learn about proper handling of user input."),Object(a.b)("h2",{id:"why-not-just-preg_quote"},"Why not just ",Object(a.b)("inlineCode",{parentName:"h2"},"preg_quote()")),Object(a.b)("p",null,"Good question."),Object(a.b)("p",null,"The same reason why good programmers use Prepared SQL Statements, instead of ",Object(a.b)("inlineCode",{parentName:"p"},"mysql_real_escape_string()"),".\nThey allow you to separate regular expression from unsafe data, which helps with making the pattern safer:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"delimiters become an implementation detail, about which programmer doesn't have to care"),Object(a.b)("li",{parentName:"ul"},"some flags (e.g. ",Object(a.b)("inlineCode",{parentName:"li"},"x"),") require spaces and whitespaces to also be quoted, which ",Object(a.b)("inlineCode",{parentName:"li"},"preg_quote()")," doesn't quote"),Object(a.b)("li",{parentName:"ul"},"inside comments (",Object(a.b)("inlineCode",{parentName:"li"},"\\Q")," and ",Object(a.b)("inlineCode",{parentName:"li"},"\\E"),"), values shouldn't be quoted! This would cause double quotation, which ",Object(a.b)("inlineCode",{parentName:"li"},"preg_quote()")," does\n",Object(a.b)("em",{parentName:"li"},"(kinda how ",Object(a.b)("inlineCode",{parentName:"em"},">")," becomes ",Object(a.b)("inlineCode",{parentName:"em"},"&amp;gt;")," when double quoted)"),"."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"preg_quote()")," doesn't quote comments before PHP 7.1.3")))}u.isMDXComponent=!0}}]);