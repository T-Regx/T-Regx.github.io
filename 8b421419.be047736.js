(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{165:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return p}));var n=a(1),r=a(6),c=(a(0),a(196)),i={id:"match-groups",title:"Capturing groups"},o={id:"match-groups",title:"Capturing groups",description:"When using `pattern()->match()` and `->replace->callback()`, some methods receive a callback that accepts `Match` details\r",source:"@site/..\\docs\\match-groups.md",permalink:"/docs/match-groups",lastUpdatedAt:1586367927,sidebar:"docs",previous:{title:"Match details",permalink:"/docs/match-details"},next:{title:"Match offsets",permalink:"/docs/match-offsets"}},b=[{value:"Overview",id:"overview",children:[]},{value:"Group details",id:"group-details",children:[{value:"Offsets",id:"offsets",children:[]},{value:"Optional groups",id:"optional-groups",children:[]},{value:"Index, name and identifier",id:"index-name-and-identifier",children:[]}]},{value:"Group is matched",id:"group-is-matched",children:[]},{value:"Group exists",id:"group-exists",children:[]},{value:"Composite groups",id:"composite-groups",children:[{value:"Group names",id:"group-names",children:[]},{value:"Groups count",id:"groups-count",children:[]}]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"Groups In-Depth",id:"groups-in-depth",children:[{value:"Invalid group identifiers",id:"invalid-group-identifiers",children:[]}]}],l={rightToc:b};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"When using ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->match()")," and ",Object(c.b)("inlineCode",{parentName:"p"},"->replace->callback()"),", some methods receive a callback that accepts ",Object(c.b)("inlineCode",{parentName:"p"},"Match")," details\nobject. These methods are:\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),",\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(c.b)("inlineCode",{parentName:"a"},"findFirst()")),",\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-for-each"}),Object(c.b)("inlineCode",{parentName:"a"},"forEach()")),",\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(c.b)("inlineCode",{parentName:"a"},"map()")),",\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-flat-map"}),Object(c.b)("inlineCode",{parentName:"a"},"flatMap()")),",\n",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-callback"}),Object(c.b)("inlineCode",{parentName:"a"},"callback()")),". "),Object(c.b)("p",null,'The details can be used to get concise information about the matched occurrence, such\nas its value (i.e. "the whole match"), capturing groups and their UTF-8 safe offsets, limits, indexes, other matches\nas well as the used subject (although it could also be pass as a closure parameter).'),Object(c.b)("h2",{id:"overview"},"Overview"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"This page only concerns ",Object(c.b)("strong",{parentName:"p"},"capturing groups")," of ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match")),", specifically. See ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," details for more throughout documentation.")),Object(c.b)("p",null,"Using ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," details, you gain access complete information about capturing groups:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#group-details"}),Object(c.b)("inlineCode",{parentName:"a"},"group(int|string)"))," - capturing group details. If group is matched, below methods are available:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"matched()")," - whether the group was matched by the subject"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"text()")," - value of the group"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"toInt()"),"/",Object(c.b)("inlineCode",{parentName:"li"},"isInt()")," - allow you to handle integers safely"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#offsets"}),"offsets of matched values")," in the subject:",Object(c.b)("ul",{parentName:"li"},Object(c.b)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",Object(c.b)("inlineCode",{parentName:"li"},"offset()")),Object(c.b)("li",{parentName:"ul"},"byte offsets - ",Object(c.b)("inlineCode",{parentName:"li"},"byteOffset()")))))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(c.b)("inlineCode",{parentName:"a"},"orReturn()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(c.b)("inlineCode",{parentName:"a"},"orElse()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(c.b)("inlineCode",{parentName:"a"},"orThrow()"))," - returns a group, or controls the absence of the group"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(c.b)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of the capturing group in a pattern"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(c.b)("inlineCode",{parentName:"a"},"name()"))," - name of the capturing group, or ",Object(c.b)("inlineCode",{parentName:"li"},"null")," of group is not named"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(c.b)("inlineCode",{parentName:"a"},"usedIdentifier()"))," - either ",Object(c.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(c.b)("inlineCode",{parentName:"li"},"name()"),", depending on the argument of ",Object(c.b)("inlineCode",{parentName:"li"},"group(int|string)")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#group-is-matched"}),Object(c.b)("inlineCode",{parentName:"a"},"matched(int|string)"))," - whether the group was matched by the subject"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#group-exists"}),Object(c.b)("inlineCode",{parentName:"a"},"hasGroup(int|string)"))," - whether group was used in a pattern"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#composite-groups"}),Object(c.b)("inlineCode",{parentName:"a"},"groups()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#composite-groups"}),Object(c.b)("inlineCode",{parentName:"a"},"namedGroups()"))," - interface for composite operations for all groups"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#group-names"}),Object(c.b)("inlineCode",{parentName:"a"},"groupNames()"))," - string list of named groups used in a pattern"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#groups-count"}),Object(c.b)("inlineCode",{parentName:"a"},"groupsCount()"))," - counts number of capturing groups (without duplicates of named and regular groups)"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#other-occurrences"}),Object(c.b)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences of the group")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"With PHP, all groups' syntax: ",Object(c.b)("inlineCode",{parentName:"p"},"(?<name>)"),", ",Object(c.b)("inlineCode",{parentName:"p"},"(?'name')")," and ",Object(c.b)("inlineCode",{parentName:"p"},"(?P<name>)"),' are considered "named". Regular, indexed groups\nare use with syntax ',Object(c.b)("inlineCode",{parentName:"p"},"()"),". Group ",Object(c.b)("inlineCode",{parentName:"p"},"(?:)")," is considered a non-capturing group.")),Object(c.b)("h2",{id:"group-details"},"Group details"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->forEach(function (Match $match) {\n    \n    $match->group('value')->text();     // '168' (string)\n    $match->group('value')->isInt();    // true  (boolean)\n    $match->group('value')->toInt();    // 168   (int)\n    \n    $match->group('unit')->offset();    // 13\n    $match->group('unit')->text();      // 'cm'\n    $match->group('unit')->isInt();     // false\n    $match->group('unit')->toInt();     // throws IntegerFormatException\n    \n    $match->group('unit')->index();     // 2\n    $match->group(2)->name();           // 'unit'\n});\n")),Object(c.b)("h3",{id:"offsets"},"Offsets"),Object(c.b)("h3",{id:"optional-groups"},"Optional groups"),Object(c.b)("p",null,"Some patterns have required capturing groups, e.g ",Object(c.b)("inlineCode",{parentName:"p"},"^(cm|mm)$"),". Others, have capturing groups that are optional,\ne.g. ",Object(c.b)("inlineCode",{parentName:"p"},"\\d+(cm|mm)?"),". As you can see the ",Object(c.b)("inlineCode",{parentName:"p"},"(cm|mm)")," doesn't have to be matched for the whole subject to be matched -\nboth ",Object(c.b)("inlineCode",{parentName:"p"},"14")," and ",Object(c.b)("inlineCode",{parentName:"p"},"14cm")," are subjects that match the pattern."),Object(c.b)("p",null,"Optional groups allow you to deal with potentially unmatched groups with elegance. If the group ",Object(c.b)("strong",{parentName:"p"},"is matched"),", each of the methods:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"text()")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"orReturn()")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"orElse()")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"orThrow()"))),Object(c.b)("p",null,"work exactly the same."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>http://)?\\w+\\.\\w+')->match('http://google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                  // 'http://'\n    $match->group('schema')->orThrow();               // 'http://'\n    $match->group('schema')->orReturn('other');       // 'http://'\n    $match->group('schema')->orElse(function() {      // 'http://'\n        return '';\n    });  \n});\n")),Object(c.b)("p",null,"The difference is - how they work when then group is not matched:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                  // `GroupNotMatchedException`\n    $match->group('schema')->orThrow();               // `GroupNotMatchedException` by default\n    $match->group('schema')->orReturn('other');       // 'other'\n    $match->group('schema')->orElse(function() {      // whatever is returned, in this case: ''\n        return '';\n    });   \n});\n")),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," works exactly the same as ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(c.b)("inlineCode",{parentName:"a"},"findFirst()->orThrow()")),", which means it accepts user defined exception\nto instantiate:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"class MyException extends Exception {}\n\npattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->orThrow(MyException::class);  // `MyException`\n});\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Method ",Object(c.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," throws ",Object(c.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException")," by default, so - when called without user defined exception -\nit's actually identical to ",Object(c.b)("inlineCode",{parentName:"p"},"group()->text()"),".")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Method ",Object(c.b)("inlineCode",{parentName:"p"},"group()->orElse(callable)")," callback receives ",Object(c.b)("inlineCode",{parentName:"p"},"NotMatched"),", just like ",Object(c.b)("inlineCode",{parentName:"p"},"findFirst()->orElse()"),".")),Object(c.b)("h3",{id:"index-name-and-identifier"},"Index, name and identifier"),Object(c.b)("p",null,"Groups can be referred to either by index or by name, if the group in a pattern is named. What was the group referred\nwith is called an identifier. If group was referred by index, then the index is the identifier."),Object(c.b)("p",null,"T-Regx has 3 separate methods for each of the group reference method:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"index()")," - returns the ordinal number of a group"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"name()")," - returns the name of a group, or ",Object(c.b)("inlineCode",{parentName:"li"},"null")," if the group is not named"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"usedIdentifier()")," - returns either ",Object(c.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(c.b)("inlineCode",{parentName:"li"},"name()"),", depending on what was the group referred with")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->group(1)->index();                  //  1\n    $match->group('schema')->index();           //  1\n\n    $match->group(1)->name();                   // 'schema'\n    $match->group('schema')->name();            // 'schema'\n\n    $match->group(1)->usedIdentifier();         //  1\n    $match->group('schema')->usedIdentifier();  // 'schema'\n});\n")),Object(c.b)("h2",{id:"group-is-matched"},"Group is matched"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"matched(int|string)")," allows you to verify whether a given group was matched by the subject:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'Links: google.com and http://facebook.com';\n\npattern('(https?://)?\\w+\\.\\w+')->match($subject)->forEach(function (Match $match) {\n    // first iteration\n    $match->text();       // 'google.com'\n    $match->matched(1);   // false, `google.com` doesn't have a schema \n    $match->group(1);     // GroupNotMatchedException\n    \n    // second iteration\n    $match->text();       // 'http://facebook.com'    \n    $match->matched(1);   // true, `http://facebook.com` does have a schema \n    $match->group(1);     // 'http://'    \n});\n")),Object(c.b)("p",null,"It'll work just as well with named groups:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->text();              // 'google.com'  \n    $match->matched('schema');   // false, `google.com` doesn't have a schema \n    $match->group('schema');     // GroupNotMatchedException\n});\n")),Object(c.b)("p",null,"Although method ",Object(c.b)("inlineCode",{parentName:"p"},"$match->matched(int|string)")," is the preferred way - same effect can be achieved with\nusing ",Object(c.b)("inlineCode",{parentName:"p"},"$match->group(int|string)->matched()"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->group('schema')->matched();   // false, `google.com` doesn't have a schema\n});\n")),Object(c.b)("h4",{id:"invalid-groups-and-arguments"},"Invalid groups and arguments"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(c.b)("inlineCode",{parentName:"li"},"NonexistentGroupException"),", when used with a non-existent group ",Object(c.b)("em",{parentName:"li"},"(i.e. ",Object(c.b)("inlineCode",{parentName:"em"},"asdf"),")"),"."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(c.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException"),", when used with an invalid group ",Object(c.b)("em",{parentName:"li"},"(i.e. ",Object(c.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(c.b)("inlineCode",{parentName:"em"},"-1")," or any type other than ",Object(c.b)("inlineCode",{parentName:"em"},"string")," or ",Object(c.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(c.b)("h2",{id:"group-exists"},"Group exists"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"hasGroup(int|string)")," allows you to verify whether the group was used in a pattern:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)?')->match('14')->first(function (Match $match) {\n    $match->hasGroup('value');  // true\n    $match->hasGroup('unit');   // true, group exists in pattern\n    $match->hasGroup('other');  // false, group doesn't exist in pattern\n    \n    $match->matched('value');  // true\n    $match->matched('unit');   // false, group exists, but was not matched in pattern\n    $match->matched('other');  // NonexistentGroupException\n});\n")),Object(c.b)("p",null,"It'll work just the same with regular (not named) groups:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('')->first(function (Match $match) {\n    $match->hasGroup(0);  // true\n    $match->hasGroup(1);  // true\n    $match->hasGroup(2);  // false\n});\n")),Object(c.b)("h4",{id:"invalid-groups-and-arguments-1"},"Invalid groups and arguments"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"hasGroup()")," will throw ",Object(c.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException"),", when used with an invalid group ",Object(c.b)("em",{parentName:"li"},"(i.e. ",Object(c.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(c.b)("inlineCode",{parentName:"em"},"-1")," or any type other than ",Object(c.b)("inlineCode",{parentName:"em"},"string")," or ",Object(c.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Usages of ",Object(c.b)("inlineCode",{parentName:"p"},"hasGroup()")," are rather infrequent, because rarely patterns are dynamic - they're constant much more often; hence the developer doesn't have to check whether the group exists. The pattern is constant - the collection of groups is also constant.")),Object(c.b)("h2",{id:"composite-groups"},"Composite groups"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p)->match($s)->forEach(function (Match $match) { \n    $match->groups()->texts();       // ['168', 'cm']\n    $match->namedGroups()->texts();  // ['value' => '168', 'unit' => 'cm']\n});\n")),Object(c.b)("h3",{id:"group-names"},"Group names"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"groupNames()")," returns a simple ",Object(c.b)("inlineCode",{parentName:"p"},"string[]")," with names of the capturing groups in order:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();    // ['value', 'unit']\n});\n")),Object(c.b)("p",null,"If there are no named groups, it simply returns an empty array:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)(cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();    // []\n});\n")),Object(c.b)("h3",{id:"groups-count"},"Groups count"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"groupsCount()")," returns a number of the capturing groups (without duplicates of named and regular groups)"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupsCount();    // 2\n});\n")),Object(c.b)("h2",{id:"other-occurrences"},"Other occurrences"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"group()->all()")," allows you to get the group from all other matches:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', 'cm', 'mm', 'cm']\n});\n")),Object(c.b)("p",null,"If the group is not matched in other occurrences, its value in ",Object(c.b)("inlineCode",{parentName:"p"},"all()")," result array will be ",Object(c.b)("inlineCode",{parentName:"p"},"null"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)?';\n$subject = '192mm and 168 or 18mm and 12';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', null, 'mm', null]\n});\n")),Object(c.b)("h2",{id:"groups-in-depth"},"Groups In-Depth"),Object(c.b)("h3",{id:"invalid-group-identifiers"},"Invalid group identifiers"),Object(c.b)("p",null,"In plain, old, vanilla PHP there's no difference between:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"an invalid group (name ",Object(c.b)("inlineCode",{parentName:"li"},"2group")," or index ",Object(c.b)("inlineCode",{parentName:"li"},"-1"),")"),Object(c.b)("li",{parentName:"ul"},"valid, but non-existent group"),Object(c.b)("li",{parentName:"ul"},"existent, but not matched group"),Object(c.b)("li",{parentName:"ul"},"matched group, but value is ",Object(c.b)("inlineCode",{parentName:"li"},"''")," (empty string)")),Object(c.b)("p",null,"The two first cases always return ",Object(c.b)("inlineCode",{parentName:"p"},"null"),", the third one returns either ",Object(c.b)("inlineCode",{parentName:"p"},"''")," or ",Object(c.b)("inlineCode",{parentName:"p"},"null")," (depending on the ",Object(c.b)("strong",{parentName:"p"},"order of groups!"),").\nIf you used ",Object(c.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE"),", it'll return ",Object(c.b)("inlineCode",{parentName:"p"},"['', -1]")," instead. And of course the last one returns ",Object(c.b)("inlineCode",{parentName:"p"},"''"),", which might the same\nas the third."),Object(c.b)("p",null,"Since PHP 7.2, there's ",Object(c.b)("inlineCode",{parentName:"p"},"PREG_UNMATCHED_AS_NULL")," - it's a little better, it allows to distinguish unmatched from matched empty string,\nbut to distinguish invalid and non-existent groups from unmatched - you have to use ",Object(c.b)("inlineCode",{parentName:"p"},"array_key_exists()"),"."),Object(c.b)("p",null,"For ",Object(c.b)("inlineCode",{parentName:"p"},"preg_match()"),"/",Object(c.b)("inlineCode",{parentName:"p"},"preg_match_all()")," we can use ",Object(c.b)("inlineCode",{parentName:"p"},"PREG_UNMATCHED_AS_NULL"),", for ",Object(c.b)("inlineCode",{parentName:"p"},"preg_replace_callback()")," we have... nothing. There's no way to verify it."),Object(c.b)("hr",null),Object(c.b)("p",null,"And T-Regx ",Object(c.b)("strong",{parentName:"p"},"hates")," it. We ",Object(c.b)("strong",{parentName:"p"},"hate")," it."),Object(c.b)("hr",null),Object(c.b)("p",null,"That's why in T-Regx, ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," details has 3 separate methods to deal with each of these cases separately. "),Object(c.b)("p",null,"Of course, the interface of ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," is the same for matching, replacing and any other operation,\nso validation of groups in T-Regx works completely alike for ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->match()"),", ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->replace()")," and any other\nmethod. It's bulletproof."),Object(c.b)("p",null,"Here's how they work:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Group"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"th"},"hasGroup()")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"th"},"matched()")),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"th"},"text()")))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Invalid group"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"InvalidArgument")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"InvalidArgument")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"InvalidArgument"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Non-existent group"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"false")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"NonexistentGroup")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"NonexistentGroup"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Not matched group"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"true")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"false")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"GroupNotMatched"))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Matched group"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"true")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"true")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Value of the group")))),Object(c.b)("p",null,"In short:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"You can't use an invalid group (",Object(c.b)("inlineCode",{parentName:"li"},"2startingWithDigit")," or negative ",Object(c.b)("inlineCode",{parentName:"li"},"-1"),")"),Object(c.b)("li",{parentName:"ul"},"You can't use a non-existent method (except with ",Object(c.b)("inlineCode",{parentName:"li"},"hasGroup()"),")"),Object(c.b)("li",{parentName:"ul"},"You can't use a non-matched group (except with ",Object(c.b)("inlineCode",{parentName:"li"},"hasGroup()")," and with ",Object(c.b)("inlineCode",{parentName:"li"},"matched()"),")")),Object(c.b)("blockquote",null,Object(c.b)("ul",{parentName:"blockquote"},Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"InvalidArgument")," is ",Object(c.b)("inlineCode",{parentName:"li"},"\\InvalidArgumentException")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"NonexistentGroup")," is ",Object(c.b)("inlineCode",{parentName:"li"},"NonexistentGroupException")),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"GroupNotMatched")," is ",Object(c.b)("inlineCode",{parentName:"li"},"GroupNotMatchedException")))))}p.isMDXComponent=!0},196:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function b(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},m=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,i=e.parentName,l=b(e,["components","mdxType","originalType","parentName"]),m=p(a),s=n,h=m["".concat(i,".").concat(s)]||m[s]||u[s]||c;return a?r.a.createElement(h,o({ref:t},l,{components:a})):r.a.createElement(h,o({ref:t},l))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,i=new Array(c);i[0]=s;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<c;l++)i[l]=a[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);