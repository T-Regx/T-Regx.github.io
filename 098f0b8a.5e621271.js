(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{214:function(e,t,a){"use strict";var n=a(0),c=a.n(n),l=a(216),r=a.n(l);t.a=function(e){const{block:t,children:a,defaultValue:l,values:b}=e,[p,o]=Object(n.useState)(l);return c.a.createElement("div",null,c.a.createElement("ul",{className:r()("tabs",{"tabs--block":t})},b.map(({value:e,label:t})=>c.a.createElement("li",{className:r()("tab-item",{"tab-item--active":p===e}),key:e,onClick:()=>o(e)},t))),c.a.createElement("div",{className:"margin-vert--md"},n.Children.toArray(a).filter(e=>e.props.value===p)[0]))}},215:function(e,t,a){"use strict";var n=a(0),c=a.n(n);t.a=function(e){return c.a.createElement("div",null,e.children)}},96:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return s}));a(217);var n=a(209),c=a(214),l=a(215);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}const b={id:"match-first",title:"First occurrence"},p=[{value:"Return from <code>first()</code>",id:"return-from-first",children:[]},{value:"Use <code>first()</code> with callback",id:"use-first-with-callback",children:[{value:"Match details",id:"match-details",children:[]},{value:"Groups in match",id:"groups-in-match",children:[]},{value:"Return value",id:"return-value",children:[]},{value:"Variable callbacks",id:"variable-callbacks",children:[]},{value:"Arbitrary return types",id:"arbitrary-return-types",children:[]}]},{value:"<code>forFirst()</code>",id:"forfirst",children:[]}],o={rightToc:p},i="wrapper";function s({components:e,...t}){return Object(n.b)(i,r({},o,t,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Matching a first occurrence in a string is the most common use-case."),Object(n.b)("h2",{id:"return-from-first"},"Return from ",Object(n.b)("inlineCode",{parentName:"h2"},"first()")),Object(n.b)("p",null,"You can get the first occurrence of a pattern in a subject by calling ",Object(n.b)("inlineCode",{parentName:"p"},"first()"),"."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[0-9]+')->match(\"I'm 19 years old\")->first();\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/[0-9]+/', \"I'm 19 years old\", $match)) {\n    return $match[0];\n}\nthrow new SubjectNotMatchedException();\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"'19'\n")),Object(n.b)("p",null,"If a match is ",Object(n.b)("strong",{parentName:"p"},"not found")," in a subject, ",Object(n.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," is thrown. This is done to relieve you from the\n",Object(n.b)("a",r({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(n.b)("strong",{parentName:"a"},"brain strain")),". It's much easier to develop an application and ",Object(n.b)("em",{parentName:"p"},"just assume")," that this\nmethod ",Object(n.b)("strong",{parentName:"p"},"has")," to return a value and go on. No more bothers about empty arrays and empty strings, or a possible\n",Object(n.b)("inlineCode",{parentName:"p"},"null"),"/",Object(n.b)("inlineCode",{parentName:"p"},"false")," hiding somewhere."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"If you would like to control the subject that ",Object(n.b)("strong",{parentName:"p"},"isn't matched")," with your pattern though;\nyou can do it ",Object(n.b)("strong",{parentName:"p"},"explicitly")," with ",Object(n.b)("a",r({parentName:"p"},{href:"#forfirst"}),Object(n.b)("inlineCode",{parentName:"a"},"forFirst()"))," (and ",Object(n.b)("inlineCode",{parentName:"p"},"orReturn()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"orElse()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"orThrow()"),").")),Object(n.b)("h2",{id:"use-first-with-callback"},"Use ",Object(n.b)("inlineCode",{parentName:"h2"},"first()")," with callback"),Object(n.b)("p",null,"You can call an anonymous function for the first matched occurrence. In this example, we'll print the matched text to the\nstandard output."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match(\"Apples are cool\")->first(function (string $match) {\n    echo 'I matched ' . $match;\n});\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/\\w+/', \"Apples are cool\", $match)) {\n    echo 'I matched ' . $match[0];\n} \nelse {\n    throw new SubjectNotMatchedException();\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-text"}),"I matched Apples\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Casting ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," to a string is the same as calling a ",Object(n.b)("inlineCode",{parentName:"p"},"text()")," method.")),Object(n.b)("h3",{id:"match-details"},"Match details"),Object(n.b)("p",null,"With ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," details, you can gain access to useful information about the matched occurrence. "),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match(\"Apples are cool\")->first(function (Match $match) {\n    $subject = $match->subject();\n    echo \"Match '$match' was matched inside '$subject'.\";\n});\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"$subject = \"Apples are cool\";\nif (preg::match('/\\w+/', $subject, $match)) {\n    $text = $match[0];\n    echo \"Match '$text' was matched inside '$subject'.\";\n} \nelse {\n    throw new SubjectNotMatchedException();\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-text"}),"Match 'Apples' was matched inside 'Apples are cool'.\n")),Object(n.b)("p",null,"You can learn more about ",Object(n.b)("inlineCode",{parentName:"p"},"Match")," on ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match")," details")," page."),Object(n.b)("h3",{id:"groups-in-match"},"Groups in match"),Object(n.b)("p",null,"Retrieving capturing groups from a match is really simple."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<capital>[A-Z])[a-z]+')->match('hello there, General Kenobi')->first(function (Match $match) {\n    $capital = $match->group('capital')->text();\n    \n    return $capital;\n});\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('~(?<capital>[A-Z])[a-z]+~', 'hello there, General Kenobi', $match)) {\n    $capital = $match['capital'][0];\n    \n    return $capital;\n}\nelse {\n    throw new SubjectNotMatchedException();\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"'G'\n")),Object(n.b)("p",null,"Of course, ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," callback will only be invoked if your pattern matches the subject."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"You can learn more about groups on ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-groups"}),"Capturing Group")," page. ")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Even more, you can visit ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-group"}),"Inline groups")," and use familiar ",Object(n.b)("inlineCode",{parentName:"p"},"all()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"first()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"only()")," and ",Object(n.b)("inlineCode",{parentName:"p"},"offsets()"),"\nmethods on groups. ")),Object(n.b)("h3",{id:"return-value"},"Return value"),Object(n.b)("p",null,"It's also possible to return your custom value from within ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," callback. This custom value will be then returned\nfrom ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," function."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"$first = pattern('\\w+')->match('Apples are cool')->first(function (Match $match) {\n    return [\n        $match->text(), \n        strtoupper($match->text()),\n        lcfirst($match->text())\n    ];\n});\n\nreturn $first;\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/\\w+/', 'Apples are cool', $match)) {\n    $first = [\n        $match[0],\n        strtoupper($match[0]),\n        lcfirst($match[0])\n    ];\n}\nelse {\n    throw new SubjectNotMatchedException();\n}\n\nreturn $first;\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"['Apples', 'APPLES', 'apples']\n")),Object(n.b)("h3",{id:"variable-callbacks"},"Variable callbacks"),Object(n.b)("p",null,"You can call ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," for any valid PHP ",Object(n.b)("inlineCode",{parentName:"p"},"callable")," which accepts one string parameter (or no parameters)."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"return pattern('\\w+')->match('Apples are cool')->first('strtoupper');\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/\\w+/', 'Apples are cool', $match)) {\n    $method = 'strtoupper';\n    return $method($match[0]);\n}\nelse {\n    throw new SubjectNotMatchedException();\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"'APPLES'\n")),Object(n.b)("p",null,"In this example, ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," will be cast to string, which is the same as calling ",Object(n.b)("inlineCode",{parentName:"p"},"Match.text()")," method."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Of course, ",Object(n.b)("inlineCode",{parentName:"p"},"strtoupper")," (or any other callback) is only invoked ",Object(n.b)("strong",{parentName:"p"},"if")," your subject is matched with the pattern.")),Object(n.b)("h3",{id:"arbitrary-return-types"},"Arbitrary return types"),Object(n.b)("p",null,"From within ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," callback, you can return any value:"),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"return pattern('\\w+')->match('Apples are cool')->first('str_split');\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/\\w+/', 'Apples are cool', $match)) {\n    $method = 'str_split';\n    return $method($match[0]);\n}\nelse {\n    throw new SubjectNotMatchedException();\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"['A', 'p', 'p', 'l', 'e', 's']\n")),Object(n.b)("p",null,"The ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," callback accepts all return types, including: numbers, objects, arrays, booleans and ",Object(n.b)("inlineCode",{parentName:"p"},"null"),":"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p)->match($s)->first();                 // '192mm'\npattern($p)->match($s)->first('str_split');      // ['1', '9', '2', 'm', 'm']\npattern($p)->match($s)->first('strlen')          // 5\n")),Object(n.b)("h2",{id:"forfirst"},Object(n.b)("inlineCode",{parentName:"h2"},"forFirst()")),Object(n.b)("p",null,"This method allows you to explicitly specify how to handle an unmatched subject. Just chain ",Object(n.b)("inlineCode",{parentName:"p"},"forFirst()")," with\none of the following ",Object(n.b)("inlineCode",{parentName:"p"},"orReturn()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"orElse()")," or ",Object(n.b)("inlineCode",{parentName:"p"},"orThrow()"),"."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"echo pattern('\\w+')->match('Dog')\n         ->forFirst(function (Match $match) {\n             return \"Yay $match\";\n         })\n         ->orReturn('Aw, man :/');\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/\\w+/', 'Dog', $match)) {\n    echo \"Yay {$match[0]}\";\n}\nelse {\n    echo 'Aw, man :/';\n}\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-text"}),"Yay Dog\n")),Object(n.b)("hr",null),Object(n.b)("p",null,"Read on to learn more about ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-for-first"}),Object(n.b)("inlineCode",{parentName:"a"},"forFirst()")),"."))}s.isMDXComponent=!0}}]);