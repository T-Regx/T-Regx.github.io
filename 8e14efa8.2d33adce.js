(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{134:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return u}));var n=a(3),r=a(7),c=(a(0),a(199)),l=a(201),i={id:"match-flat-map",title:"Map with keys (Flat map)"},o={unversionedId:"match-flat-map",id:"match-flat-map",isDocsHomePage:!1,title:"Map with keys (Flat map)",description:"There are cases when you would like to create a single list of all your matches. flatMap() is great for it.",source:"@site/../docs/match-flat-map.mdx",slug:"/match-flat-map",permalink:"/docs/match-flat-map",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"Map occurrences",permalink:"/docs/match-map"},next:{title:"Match details",permalink:"/docs/match-details"}},p=[{value:"Making a flat map",id:"making-a-flat-map",children:[]},{value:"Return types",id:"return-types",children:[]},{value:"Variable callbacks",id:"variable-callbacks",children:[]},{value:"Mapping with keys",id:"mapping-with-keys",children:[]},{value:"Duplicate keys",id:"duplicate-keys",children:[]}],s={toc:p};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"There are cases when you would like to create a single list of all your matches. ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is great for it.\nIn other words, it allows you to return one, zero or more elements from your mapping function."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"->map(function () {\n    return $value;        // Exactly one element\n}\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"->flatMap(function () {\n    return [...$values];  // Can be 1, many or even zero elements\n}\n")),Object(c.b)("h2",{id:"making-a-flat-map"},"Making a flat map"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is basically method ",Object(c.b)("a",{parentName:"p",href:"/docs/match-map"},Object(c.b)("inlineCode",{parentName:"a"},"map()")),", from which you can return multiple values."),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match('I have 19 trains')->flatMap(function (Detail $detail) {\n    return [\n        $detail->text(), strlen($detail)\n    ];\n});",php:"preg::match_all(\"/\\w+/\", 'I have 19 trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [\n        $text, strlen($text)\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"['I', 1, 'have', 4, '19', 2, 'trains', 6]"),Object(c.b)("h2",{id:"return-types"},"Return types"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," only accepts an ",Object(c.b)("inlineCode",{parentName:"p"},"array"),' as its return type. Returning a single element and implicitly creating a one-element\narray under the hood would break our "Explicity rule".'),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Detail $detail) {\n    return $detail;  // <- throws InvalidReturnValueException\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    throw new InvalidReturnValueException(); // <- throws InvalidReturnValueException\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)("p",null,"So always remember to return an array."),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Detail $detail) {\n    return [$detail->text()];  // ok\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [$text];   // ok\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(c.b)("p",null,"You can invoke ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," with any valid PHP ",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},Object(c.b)("inlineCode",{parentName:"a"},"callable")),", which accepts one or zero string parameters\n(just like ",Object(c.b)("a",{parentName:"p",href:"/docs/match-first"},Object(c.b)("inlineCode",{parentName:"a"},"first()"))," and ",Object(c.b)("a",{parentName:"p",href:"/docs/match-map"},Object(c.b)("inlineCode",{parentName:"a"},"map()")),") and returns ",Object(c.b)("inlineCode",{parentName:"p"},"array"),"."),Object(c.b)(l.a,{tregx:"pattern(\"[\\w']+\")->match(\"I'm 19 years old\")->flatMap('str_split');",php:"preg::match_all(\"/[\\w']+/\", \"I'm 19 years old\", $matches);\nreturn array_merge(...array_map('str_split', $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"['I', '\\'', 'm', '1', '9', 'y', 'e', 'a', 'r', 's', 'o', 'l', 'd']"),Object(c.b)("p",null,"The ",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},Object(c.b)("inlineCode",{parentName:"a"},"callable"))," passed to ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," must return an array. ",Object(c.b)("inlineCode",{parentName:"p"},"InvalidReturnValueException")," is thrown, otherwise."),Object(c.b)("h2",{id:"mapping-with-keys"},"Mapping with keys"),Object(c.b)("p",null,"Because ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," receives an array from its callback, it's possible to also return an associative array with\nspecified keys:"),Object(c.b)(l.a,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMap(function (Detail $detail) {\n    return [$detail->text() => $detail->offset()];   // offset is UTF-8 safe\n});',php:'preg::match_all("/\\w+/", "Apples are cool", $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) {\n    return [$match[0] => $match[1]];    // offset is given in bytes\n}, $matches[0]));',mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"[\n    'Apples' => 0,\n    'are'    => 7,\n    'cool'   => 11\n]"),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"Keep in mind, that ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," uses ",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.array-merge.php"},Object(c.b)("inlineCode",{parentName:"a"},"array_merge()"))," to flatten the results! So If you use ",Object(c.b)("inlineCode",{parentName:"p"},"int")," as a key, or even\na ",Object(c.b)("inlineCode",{parentName:"p"},"string")," with numeric values (like ",Object(c.b)("inlineCode",{parentName:"p"},"'19'"),") they will be ",Object(c.b)("strong",{parentName:"p"},"reindexed")," by ",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.array-merge.php"},Object(c.b)("inlineCode",{parentName:"a"},"array_merge()")),"."))),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},Object(c.b)("inlineCode",{parentName:"p"},"Detail.offset()")," returns offset as a ",Object(c.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},"valid UTF-8 sequence"),", whereas ",Object(c.b)("inlineCode",{parentName:"p"},"preg::match_all"),"\ncounts them as ",Object(c.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},"bytes"),". To return bytes number with T-Regx as well,\nuse ",Object(c.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(c.b)("inlineCode",{parentName:"a"},"byteOffset()")),"."))),Object(c.b)("h2",{id:"duplicate-keys"},"Duplicate keys"),Object(c.b)("p",null,"Duplicate keys are not allowed in PHP arrays, so they'll only appear once in the results."),Object(c.b)(l.a,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMap(function (Detail $detail) {\n    return [\n        $detail->text() => $detail->offset(),   // offset is UTF-8 safe\n        \'subject\'       => $detail->subject()\n    ];\n});',php:"$subject = 'Apples are cool';\npreg::match_all(\"/\\w+/\", $subject, $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) use ($subject) {\n    return [\n        $match[0] => $match[1],   // offset is given in bytes\n        'subject' => $subject\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"[\n    'Apples'  => 0,\n    'subject' => \"Apples are cool\",\n    'are'     => 7,\n    'cool'    => 11\n]"))}u.isMDXComponent=!0},199:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return d}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(a),b=n,d=u["".concat(l,".").concat(b)]||u[b]||m[b]||c;return a?r.a.createElement(d,i(i({ref:t},p),{},{components:a})):r.a.createElement(d,i({ref:t},p))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=b;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<c;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},201:function(e,t,a){"use strict";a.d(t,"a",(function(){return y})),a.d(t,"b",(function(){return g}));var n=a(0),r=a.n(n),c=a(205),l=a(200),i=a(55),o=a.n(i),p=37,s=39;var u=function(e){var t=e.lazy,a=e.block,i=e.defaultValue,u=e.values,m=e.groupId,b=e.className,d=Object(c.a)(),f=d.tabGroupChoices,h=d.setTabGroupChoices,y=Object(n.useState)(i),v=y[0],O=y[1],j=n.Children.toArray(e.children);if(null!=m){var g=f[m];null!=g&&g!==v&&u.some((function(e){return e.value===g}))&&O(g)}var w=function(e){O(e),null!=m&&h(m,e)},N=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":a},b)},u.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":v===t,className:Object(l.a)("tabs__item",o.a.tabItem,{"tabs__item--active":v===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case s:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(N,e.target,e)},onFocus:function(){return w(t)},onClick:function(){w(t)}},a)}))),t?Object(n.cloneElement)(j.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},j.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))};var m=function(e){var t=e.children,a=e.hidden,n=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:n},t)},b=a(206),d=a(56),f=a.n(d),h=function(e){var t=e.children,a=e.language;return r.a.createElement("div",{className:f.a.code},r.a.createElement(b.a,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};var y=function(e){var t=e.tregx,a=e.php;return r.a.createElement(u,{defaultValue:"t-regx",values:v(t,a)},t&&r.a.createElement(m,{value:"t-regx"},r.a.createElement(h,null,t)),a&&r.a.createElement(m,{value:"php"},r.a.createElement(h,null,a)))};function v(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}var O=a(57),j=a.n(O),g=function(e){var t=e.text,a=e.children;return r.a.createElement("div",{className:j.a.result},r.a.createElement(h,{language:t?"text":"php"},a))}}}]);