(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{166:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return h}));var n=a(2),c=a(6),o=(a(0),a(179)),i=a(180),r={id:"match-offsets",title:"Match offsets"},s={unversionedId:"match-offsets",id:"match-offsets",isDocsHomePage:!1,title:"Match offsets",description:"There are several ways to read offsets of your matched occurrences and your capturing groups.",source:"@site/../docs/match-offsets.mdx",slug:"/match-offsets",permalink:"/docs/match-offsets",version:"current",lastUpdatedAt:1611005578,sidebar:"docs",previous:{title:"Capturing groups",permalink:"/docs/match-groups"},next:{title:"Inline groups",permalink:"/docs/match-group"}},p=[{value:"Using Match details",id:"using-match-details",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method",children:[{value:"Many",id:"many",children:[]},{value:"One",id:"one",children:[]}]},{value:"Group offsets",id:"group-offsets",children:[{value:"Using Match details",id:"using-match-details-1",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method-1",children:[]}]}],b={rightToc:p};function h(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"There are several ways to read offsets of your matched occurrences and your capturing groups."),Object(o.b)("h2",{id:"using-match-details"},"Using ",Object(o.b)("a",Object(n.a)({parentName:"h2"},{href:"/docs/match-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match"))," details"),Object(o.b)("p",null,"If you use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match"))," details object (like the one passed to ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(o.b)("inlineCode",{parentName:"a"},"first()")),", ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-for-each"}),Object(o.b)("inlineCode",{parentName:"a"},"forEach()"))," or ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(o.b)("inlineCode",{parentName:"a"},"map()"))," callback) you can just use\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," method."),Object(o.b)(i.a,{tregx:"pattern('\\d+')->match('I was born in 1996')->first(function (Match $match) {\n    return 'Match was found at ' . $match->offset();\n});",php:"preg::match_all('/\\d+/', 'I was born in 1996', $match, PREG_OFFSET_CAPTURE);\nreturn 'Match was found at ' . $match[0][0][1];",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"'Match was found at 14'"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Method ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," is UTF-8 safe and returns offsets in characters, not bytes.\nFor bytes, consider using ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(o.b)("inlineCode",{parentName:"a"},"byteOffset()"))," method."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"Use ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," with multibyte-safe methods like ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.mb-substr.php"}),Object(o.b)("inlineCode",{parentName:"a"},"mb_substr()")),", and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(o.b)("inlineCode",{parentName:"a"},"byteOffset()"))," with methods like ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.substr.php"}),Object(o.b)("inlineCode",{parentName:"a"},"substr()")),"."))),Object(o.b)("h2",{id:"using-inline-offsets-method"},"Using inline ",Object(o.b)("inlineCode",{parentName:"h2"},"offsets()")," method"),Object(o.b)("p",null,"Use inline methods to simply return the offsets - when there is no need for using ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match"))," details or any other operations."),Object(o.b)("h3",{id:"many"},"Many"),Object(o.b)("p",null,"If you only want to get offsets of your matches, use ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->all()"),"."),Object(o.b)(i.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, May 12\")->offsets()->all();",php:"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]);",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"[4, 32, 42]"),Object(o.b)("p",null,"You can also limit your matches."),Object(o.b)(i.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, May 12\")->offsets()->only(2);",php:"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_slice(array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]), 0, 2);",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"[4, 32]"),Object(o.b)("h3",{id:"one"},"One"),Object(o.b)("p",null,"To only get offset of the first occurrence of a matched pattern, call ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->first()"),"."),Object(o.b)(i.a,{tregx:"pattern('\\d+')->match(\"I was born in 1999\")->offsets()->first();",php:"preg::match('/[0-9]+/', \"I was born in 1999\", $match, PREG_OFFSET_CAPTURE);\nif ($match) {\n    return $match[0][1];\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"14"),Object(o.b)("p",null,"As any other ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(o.b)("inlineCode",{parentName:"a"},"first()"))," method, it throws ",Object(o.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't matched by your pattern."),Object(o.b)("h2",{id:"group-offsets"},"Group offsets"),Object(o.b)("p",null,"In a similar manner you can get offsets of your capturing groups, either using ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match"))," details or an inline method."),Object(o.b)("p",null,"These two snippets below are equal to each other."),Object(o.b)("h3",{id:"using-match-details-1"},"Using ",Object(o.b)("a",Object(n.a)({parentName:"h3"},{href:"/docs/match-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match"))," details"),Object(o.b)(i.a,{tregx:"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->first(function (Match $match) {\n    return $match->group('capital')->offset();\n});",php:"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    } else {\n        throw new NonexistentGroupException('capital');\n    }\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"11"),Object(o.b)("p",null,"Can also be written as..."),Object(o.b)("h3",{id:"using-inline-offsets-method-1"},"Using inline ",Object(o.b)("inlineCode",{parentName:"h3"},"offsets()")," method"),Object(o.b)(i.a,{tregx:"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->group('capital')->offsets()->first();",php:"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    } else {\n        throw new NonexistentGroupException('capital');\n    }\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(i.b,{mdxType:"Result"},"11"),Object(o.b)("p",null,"Both ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->first()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"group()->offsets()->first()")," throw ",Object(o.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't\nmatched by your pattern."),Object(o.b)("p",null,"Also, both ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-groups#group-details"}),Object(o.b)("inlineCode",{parentName:"a"},"Match.group()"))," details and inline ",Object(o.b)("inlineCode",{parentName:"p"},"match()->group()->offsets()")," throw ",Object(o.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException"),", when used with an unmatched group."))}h.isMDXComponent=!0},180:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return f}));var n=a(0),c=a.n(n),o=a(183),i=a(184),r=a(185),s=a(4),p=a(181),b=a(48),h=a.n(b),d=function(e){function t(){return e.apply(this,arguments)||this}return Object(s.a)(t,e),t.prototype.render=function(){return c.a.createElement("div",{className:h.a.code},c.a.createElement(p.a,{className:"language-"+this.language},this.code))},Object(r.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(c.a.Component),l=function(e){var t=e.tregx,a=e.php,n=[t?{label:"T-Regx",value:"t-regx"}:{},a?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return c.a.createElement(o.a,{defaultValue:"t-regx",values:n},t&&c.a.createElement(i.a,{value:"t-regx"},c.a.createElement(d,null,t)),a&&c.a.createElement(i.a,{value:"php"},c.a.createElement(d,null,a)))},m=a(49),u=a.n(m),f=function(e){var t=e.text,a=e.children;return c.a.createElement("div",{className:u.a.result},c.a.createElement(d,{language:t?"text":"php"},a))}}}]);