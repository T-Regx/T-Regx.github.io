(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{95:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return d}));n(211);var a=n(207);function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const r={id:"delimiters",title:"Automatic delimiters"},o=[{value:"Adding delimiters",id:"adding-delimiters",children:[]},{value:"Flags",id:"flags",children:[]},{value:"I want to break it",id:"i-want-to-break-it",children:[]}],c=e=>(function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}),b=c("Tabs"),l=c("TabItem"),p={rightToc:o},s="wrapper";function d({components:e,...t}){return Object(a.b)(s,i({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"This chapter doesn't contain ",Object(a.b)("inlineCode",{parentName:"p"},"PHP")," code snippets, because PHP PCRE require delimiters. There is no way to omit them\nin Vanilla PHP.")),Object(a.b)("p",null,"Thanks to automatic delimiters, one can use regular expressions without ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/overview#brain-strain"}),"brain strain"),"\nand without coming up with a suitable delimiter."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-php"}),"pattern('#[A-Z]/[a-z]+')->match($subject)->first();\n")),Object(a.b)("p",null,"The code snippets above are equal."),Object(a.b)("h2",{id:"adding-delimiters"},"Adding delimiters"),Object(a.b)("p",null,"To change undelimited pattern into a delimited one - use ",Object(a.b)("inlineCode",{parentName:"p"},"delimiter()")," method;"),Object(a.b)(b,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"}],mdxType:"Tabs"},Object(a.b)(l,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-php"}),"pattern('Welcome/Or not')->delimiter();\n")))),Object(a.b)("div",{className:"output-block"},Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-text"}),"#Welcome/Or not#\n"))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"delimiter()")," doesn't do anything if pattern was constructed with ",Object(a.b)("inlineCode",{parentName:"p"},"Pattern::pcre()"),", instead of ",Object(a.b)("inlineCode",{parentName:"p"},"Pattern::of()"),".")),Object(a.b)("h2",{id:"flags"},"Flags"),Object(a.b)("p",null,"There are two ways of passing flags:"),Object(a.b)("p",null,"Either pass a second argument to the ",Object(a.b)("a",i({parentName:"p"},{href:"/docs/introduction#entry-points"}),Object(a.b)("inlineCode",{parentName:"a"},"pattern()")),"/",Object(a.b)("a",i({parentName:"p"},{href:"/docs/introduction#entry-points"}),Object(a.b)("inlineCode",{parentName:"a"},"Pattern::of()")),":"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z][a-z]+', 'i')->match($subject)->first();\n")),Object(a.b)("p",null,"or use old-school pattern:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-php"}),"Pattern::pcre('/[A-Z][a-z]+/i')->match($subject)->first();\n")),Object(a.b)("h2",{id:"i-want-to-break-it"},"I want to break it"),Object(a.b)("p",null,"T-Regx has a set of predefined, suitable delimiters (like ",Object(a.b)("inlineCode",{parentName:"p"},"/"),", ",Object(a.b)("inlineCode",{parentName:"p"},"#"),", ",Object(a.b)("inlineCode",{parentName:"p"},"~"),", ",Object(a.b)("inlineCode",{parentName:"p"},"%"),", etc.) and simply uses the first one,\nthat doesn't occur in your pattern. If you exhaust each of them; if you use every possible, predefined, suitable delimiter -\nT-Regx will throw ",Object(a.b)("inlineCode",{parentName:"p"},"ExplicitDelimiterRequiredException"),"."),Object(a.b)("p",null,"In that case, you simply have to use an explicit delimiter with ",Object(a.b)("inlineCode",{parentName:"p"},"Pattern::pcre()"),"."),Object(a.b)("p",null,"If you think another automatic delimiter can be used,\nplease create ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/T-Regx/T-Regx/issues/new/choose"}),"a github issue"),"."))}d.isMDXComponent=!0}}]);