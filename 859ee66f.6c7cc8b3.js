(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{121:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),i=(n(0),n(168)),o={id:"introduction-clean",title:"Migrate to T-Regx"},c={unversionedId:"introduction-clean",id:"introduction-clean",isDocsHomePage:!1,title:"Migrate to T-Regx",description:"Because CleanRegex is built on top of SafeRegex, we get protection against warnings/compile-errors/notices/magic-values",source:"@site/..\\docs\\introduction-clean.md",permalink:"/docs/introduction-clean",lastUpdatedAt:1599861835,sidebar:"docs",previous:{title:"Start with SafeRegex",permalink:"/docs/introduction-safe"},next:{title:"What's the point?",permalink:"/docs/whats-the-point"}},l=[{value:"Entry points",id:"entry-points",children:[]},{value:"Automatic delimiters",id:"automatic-delimiters",children:[{value:"Old-school patterns",id:"old-school-patterns",children:[]}]},{value:"Prepared Patterns",id:"prepared-patterns-1",children:[]}],s={rightToc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Because CleanRegex is built on top of SafeRegex, we get protection against warnings/compile-errors/notices/magic-values\nfor free! "),Object(i.b)("p",null,"Additionally, CleanRegex provides clean API for regular expressions, as well as solving more complicated\nissues with PHP regex (like eliminating false positives, validating groups) and including features utterly missing\nin PHP: Prepared patterns, offsets while replacing, in-place replacement, composite patterns, built-alteration and more."),Object(i.b)("h2",{id:"entry-points"},"Entry points"),Object(i.b)("p",null,"We have multiple entry points, each with its own usecase:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Standard functions - ",Object(i.b)("inlineCode",{parentName:"li"},"Pattern::of('\\d+')")," or ",Object(i.b)("inlineCode",{parentName:"li"},"pattern('\\d+')")),Object(i.b)("li",{parentName:"ul"},"Compatibility legacy - ",Object(i.b)("inlineCode",{parentName:"li"},"Pattern::pcre('/\\d+/')")," to use vanilla patterns"),Object(i.b)("li",{parentName:"ul"},"Prepared patterns - to safely use user data in patterns (see ",Object(i.b)("a",Object(r.a)({parentName:"li"},{href:"/docs/handling-user-input"}),"Prepared Patterns"),")")),Object(i.b)("h4",{id:"class-method-style"},"Class method style:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"use TRegx\\CleanRegex\\Pattern;\n \nPattern::of('[A-Z][a-z]+')->test($subject);\n")),Object(i.b)("h4",{id:"global-function-style"},"Global function style:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"pattern('/[A-Z]#[a-z]+')->test($subject);\n")),Object(i.b)("h4",{id:"prepared-patterns"},"Prepared patterns:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"use TRegx\\CleanRegex\\Pattern;\n\nPattern::inject('^\\d+:@$', [$_GET['user']])->test('14:mark'); // true, if $_GET['user'] == 'mark'\n")),Object(i.b)("h2",{id:"automatic-delimiters"},"Automatic delimiters"),Object(i.b)("p",null,"Notice, that these patterns ",Object(i.b)("strong",{parentName:"p"},"are not")," delimited. Smart T-Regx will conveniently add them for you, if you\nuse ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::of()")," or ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()"),". You can add flags to your regular expression by passing a second argument."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z]+', 'im')->test($subject);\n")),Object(i.b)("p",null,"To learn more, go to ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/delimiters"}),"Automatic Delimiters"),"."),Object(i.b)("h3",{id:"old-school-patterns"},"Old-school patterns"),Object(i.b)("p",null,"Of course, you can still use delimited patterns with flags, with ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::pcre()"),". Both versions are equal with each other."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-php"}),"Pattern::pcre('/[A-Z]+/im')->test($subject);\n")),Object(i.b)("h2",{id:"prepared-patterns-1"},"Prepared Patterns"),Object(i.b)("p",null,"To safely handle unsafe date or user input, see ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/prepared-patterns"}),"Prepared Patterns"),"."))}p.isMDXComponent=!0},168:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,m=u["".concat(o,".").concat(d)]||u[d]||b[d]||i;return n?a.a.createElement(m,c(c({ref:t},s),{},{components:n})):a.a.createElement(m,c({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);