/*! For license information please see 860d2d89.68d96a10.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{212:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"rightToc",(function(){return o})),a.d(n,"default",(function(){return p}));a(51),a(24),a(19),a(20),a(52),a(0);var t=a(269),r=a(271),c=a(272);function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}var i={id:"replace-with",title:"Replace with a constant value"},o=[{value:"Limits",id:"limits",children:[{value:"First occurrence - <code>first()</code>",id:"first-occurrence---first",children:[]},{value:"All occurrences - <code>all()</code>",id:"all-occurrences---all",children:[]},{value:"Limited occurrences - <code>only()</code>",id:"limited-occurrences---only",children:[]}]},{value:"Regular expression references",id:"regular-expression-references",children:[]},{value:"Intentional references",id:"intentional-references",children:[]}],b={rightToc:o};function p(e){var n=e.components,a=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,["components"]);return Object(t.b)("wrapper",l({},b,a,{components:n,mdxType:"MDXLayout"}),Object(t.b)("p",null,"After ",Object(t.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(t.b)("p",null,"Specifying limits is done to relieve you from ",Object(t.b)("a",l({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(t.b)("strong",{parentName:"a"},"brain strain"))," - so you can immediately\nrecognize author's intentions."),Object(t.b)("h2",{id:"limits"},"Limits"),Object(t.b)("p",null,"Using ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," is semantically identical to passing ",Object(t.b)("inlineCode",{parentName:"p"},"$limit")," argument to ",Object(t.b)("inlineCode",{parentName:"p"},"preg::replace()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"preg::replace_callback()"),"."),Object(t.b)("p",null,"Neither of methods ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," modify the subject if it wasn't matched by a pattern."),Object(t.b)("h3",{id:"first-occurrence---first"},"First occurrence - ",Object(t.b)("inlineCode",{parentName:"h3"},"first()")),Object(t.b)(r.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(c.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->with('___');\n"))),Object(t.b)(c.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg_replace('/[A-Z][a-z]+/', '___', $subject, 1);\n")))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, Norway and Denmark'\n")),Object(t.b)("h3",{id:"all-occurrences---all"},"All occurrences - ",Object(t.b)("inlineCode",{parentName:"h3"},"all()")),Object(t.b)(r.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(c.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->with('___');\n"))),Object(t.b)(c.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject);\n")))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, ___ and ___'\n")),Object(t.b)("h3",{id:"limited-occurrences---only"},"Limited occurrences - ",Object(t.b)("inlineCode",{parentName:"h3"},"only()")),Object(t.b)(r.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(c.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->with('___');\n"))),Object(t.b)(c.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject, 2);\n")))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, ___ and Denmark'\n")),Object(t.b)("hr",null),Object(t.b)("p",null,"Read on to learn more about replacing with ",Object(t.b)("a",l({parentName:"p"},{href:"/docs/replace-callback"}),"a callback"),"."),Object(t.b)("h2",{id:"regular-expression-references"},"Regular expression references"),Object(t.b)("p",null,"Normally, had you passed a replacement to ",Object(t.b)("inlineCode",{parentName:"p"},"preg_replace()"),", that contains a backslash or a dollar sign followed by a\nnumber (eg. ",Object(t.b)("inlineCode",{parentName:"p"},"\\1")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$2"),") - that reference would be replaced by a corresponding capturing group (or by an empty string,\nif the group wasn't matched)."),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n")),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-text"}),"I have <15> and <192>\n")),Object(t.b)("p",null,"Resolving such references won't happen with T-Regx."),Object(t.b)("p",null,"This is done to relieve you from the ",Object(t.b)("a",l({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(t.b)("strong",{parentName:"a"},"brain strain")),". A programmer should be able to merely\nreplace a string with a constant value without ",Object(t.b)("a",l({parentName:"p"},{href:"/docs/overview#brain-strain"}),"cognitive load")," about possible ",Object(t.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$")," hiding somewhere."),Object(t.b)(r.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(c.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->with('<$1>');\n"))),Object(t.b)(c.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// in T-Regx, special function is used to quote all references\n")))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-text"}),"I have <$1> and <$1>\n")),Object(t.b)("p",null,"You can be sure, what's put into ",Object(t.b)("inlineCode",{parentName:"p"},"with()")," will certainly be present unchanged in your final result."),Object(t.b)("p",null,"Some replacement strings containing a backslash or a dollar sign (like file system paths, URL addresses or even user input)\nmight interfere with logic and cause bugs that are very hard to find."),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"Neither of types of references are resolved: ",Object(t.b)("inlineCode",{parentName:"p"},"$12"),", ",Object(t.b)("inlineCode",{parentName:"p"},"\\12")," nor ",Object(t.b)("inlineCode",{parentName:"p"},"${12}"),".")),Object(t.b)("h2",{id:"intentional-references"},"Intentional references"),Object(t.b)("p",null,"If you, however, would like to intentionally use regular expression references and have validated your input\nagainst ",Object(t.b)("em",{parentName:"p"},"an unexpected")," ",Object(t.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$")," - feel free to use ",Object(t.b)("inlineCode",{parentName:"p"},"withReferences()")," which ",Object(t.b)("strong",{parentName:"p"},"will")," resolve replacement references."),Object(t.b)(r.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(c.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->withReferences('<$1>');\n"))),Object(t.b)(c.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// using withReferences(), back references are preserved\n")))),Object(t.b)("pre",null,Object(t.b)("code",l({parentName:"pre"},{className:"language-text"}),"I have <15> and <192>\n")))}p.isMDXComponent=!0},269:function(e,n,a){"use strict";a.d(n,"a",(function(){return u})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function c(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){c(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),p=function(e){var n=r.a.useContext(b),a=n;return e&&(a="function"==typeof e?e(n):i({},n,{},e)),a},u=function(e){var n=p(e.components);return r.a.createElement(b.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=Object(t.forwardRef)((function(e,n){var a=e.components,t=e.mdxType,c=e.originalType,l=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),u=p(a),d=t,m=u["".concat(l,".").concat(d)]||u[d]||s[d]||c;return a?r.a.createElement(m,i({ref:n},b,{components:a})):r.a.createElement(m,i({ref:n},b))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=a.length,l=new Array(c);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:t,l[1]=i;for(var b=2;b<c;b++)l[b]=a[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},270:function(e,n,a){var t;!function(){"use strict";var a={}.hasOwnProperty;function r(){for(var e=[],n=0;n<arguments.length;n++){var t=arguments[n];if(t){var c=typeof t;if("string"===c||"number"===c)e.push(t);else if(Array.isArray(t)&&t.length){var l=r.apply(null,t);l&&e.push(l)}else if("object"===c)for(var i in t)a.call(t,i)&&t[i]&&e.push(i)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(t=function(){return r}.apply(n,[]))||(e.exports=t)}()},271:function(e,n,a){"use strict";a(24),a(19),a(20);var t=a(0),r=a.n(t),c=a(270),l=a.n(c),i=a(124),o=a.n(i),b=37,p=39;n.a=function(e){var n=e.block,a=e.children,c=e.defaultValue,i=e.values,u=Object(t.useState)(c),s=u[0],d=u[1],m=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:l()("tabs",{"tabs--block":n})},i.map((function(e){var n=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":s===n,className:l()("tab-item",o.a.tabItem,{"tab-item--active":s===n}),key:n,ref:function(e){return m.push(e)},onKeyDown:function(e){return function(e,n,a){switch(a.keyCode){case p:!function(e,n){var a=e.indexOf(n)+1;e[a]?e[a].focus():e[0].focus()}(e,n);break;case b:!function(e,n){var a=e.indexOf(n)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,n)}}(m,e.target,e)},onFocus:function(){return d(n)},onClick:function(){return d(n)}},a)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},t.Children.toArray(a).filter((function(e){return e.props.value===s}))[0]))}},272:function(e,n,a){"use strict";var t=a(0),r=a.n(t);n.a=function(e){return r.a.createElement("div",null,e.children)}}}]);