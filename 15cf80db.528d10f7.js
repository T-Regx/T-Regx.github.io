(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{186:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n),i=a(189),p=a(190),c=a(191),o=a(4),u=a(187),l=a(48),b=a.n(l),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(o.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{className:b.a.code},r.a.createElement(u.a,{className:"language-"+this.language},this.code))},Object(c.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(r.a.Component),d=function(e){var t=e.tregx,a=e.php,n=[t?{label:"T-Regx",value:"t-regx"}:{},a?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return r.a.createElement(i.a,{defaultValue:"t-regx",values:n},t&&r.a.createElement(p.a,{value:"t-regx"},r.a.createElement(s,null,t)),a&&r.a.createElement(p.a,{value:"php"},r.a.createElement(s,null,a)))},h=a(49),m=a.n(h),j=function(e){var t=e.text,a=e.children;return r.a.createElement("div",{className:m.a.result},r.a.createElement(s,{language:t?"text":"php"},a))}},75:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return u})),a.d(t,"default",(function(){return b}));var n=a(2),r=a(6),i=(a(0),a(185)),p=a(186),c={id:"quote",title:"Quote regular expression"},o={unversionedId:"quote",id:"quote",isDocsHomePage:!1,title:"Quote regular expression",description:"Before you engage in this article, please visit Handling user input first,",source:"@site/../docs/quote.mdx",slug:"/quote",permalink:"/docs/quote",version:"current",lastUpdatedAt:1610998029,sidebar:"docs",previous:{title:"T-Regx Utilities",permalink:"/docs/utils"},next:{title:"Validate a pattern",permalink:"/docs/valid"}},u=[{value:"Procedural quoting - be careful",id:"procedural-quoting---be-careful",children:[{value:"Contract",id:"contract",children:[]}]}],l={rightToc:u};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Before you engage in this article, please visit ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/handling-user-input"}),"Handling user input")," first,\nif you're interested in using unsafe data in your patterns :)"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"Pattern::prepare([\"(My|Our) dog's name is \", [$input], '!']);\n")),Object(i.b)("p",null,"Suggested articles:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-prepare"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::prepare()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-inject"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::inject()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/prepared-patterns#with-pattern-bind"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::bind()"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Pattern::template()"))),Object(i.b)("p",null,"Building your own patterns can be dangerous and lead to security errors. T-Regx offers a rich variety of\ndedicated builders including ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/prepared-patterns#with-pattern-prepare"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::prepare()")),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/prepared-patterns#with-pattern-inject"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::inject()")),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/prepared-patterns#with-pattern-bind"}),Object(i.b)("inlineCode",{parentName:"a"},"Pattern::bind()"))," and ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::template()"),"."),Object(i.b)("h2",{id:"procedural-quoting---be-careful"},"Procedural quoting - be careful"),Object(i.b)("p",null,"There are two methods ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::quote()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::unquote()"),"."),Object(i.b)("p",null,"First of which works as ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(i.b)("inlineCode",{parentName:"a"},"preg_quote()"))," is supposed to work (except for the fact that ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/function.preg-quote.php"}),Object(i.b)("inlineCode",{parentName:"a"},"preg_quote()"))," is broken\nbefore PHP 7.1.3)."),Object(i.b)(p.a,{tregx:"Pattern::quote('Welcome\\How are you?');",mdxType:"CodeTabs"}),Object(i.b)(p.b,{text:!0,mdxType:"Result"},"Welcome\\\\How are you\\?"),Object(i.b)("p",null,"...second of which is the direct opposite:"),Object(i.b)(p.a,{tregx:"Pattern::unquote('Welcome\\\\How are you\\?');",mdxType:"CodeTabs"}),Object(i.b)(p.b,{text:!0,mdxType:"Result"},"Welcome\\How are you?"),Object(i.b)("p",null,"Please, keep in mind that this ",Object(i.b)("strong",{parentName:"p"},"is not")," a safe way to create patterns with unsafe characters - for that, consider\nusing ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/prepared-patterns"}),"Prepared Patterns"),"."),Object(i.b)("h3",{id:"contract"},"Contract"),Object(i.b)("p",null,"These two methods should be transitive, so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// when\n$output = Pattern::unquote(Pattern::quote($input));\n\n// then\n$this->assertEquals($input, $output); \n")),Object(i.b)("p",null,"The contract is that ",Object(i.b)("inlineCode",{parentName:"p"},"$input")," should be identical to ",Object(i.b)("inlineCode",{parentName:"p"},"$output")," for any ",Object(i.b)("inlineCode",{parentName:"p"},"string")," value."))}b.isMDXComponent=!0}}]);