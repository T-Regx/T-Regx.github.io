(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{140:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return p})),t.d(a,"rightToc",(function(){return c})),t.d(a,"default",(function(){return s}));var n=t(2),r=t(6),i=(t(0),t(161)),l=t(162),o={id:"match-group",title:"Inline groups"},p={unversionedId:"match-group",id:"match-group",isDocsHomePage:!1,title:"Inline groups",description:"Apart from retrieving matched capturing groups, you can also replace by an [inline group].",source:"@site/..\\docs\\match-group.mdx",permalink:"/docs/match-group",lastUpdatedAt:1597016108,sidebar:"docs",previous:{title:"Match offsets",permalink:"/docs/match-offsets"},next:{title:"Handling integers",permalink:"/docs/match-as-int"}},c=[{value:"Matched occurrences of a group",id:"matched-occurrences-of-a-group",children:[]},{value:"Optional groups",id:"optional-groups",children:[]},{value:"Missing or invalid groups",id:"missing-or-invalid-groups",children:[]}],u={rightToc:c};function s(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},u,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Apart from retrieving matched capturing groups, you can also replace by an ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-by-group"}),"inline group"),"."),Object(i.b)("p",null,"Method ",Object(i.b)("inlineCode",{parentName:"p"},"match()->group()")," behaves exactly like ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Match.group(int|string)")),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"it can accept either group index (where #0 is the whole match) or a group name (when a group is named)"),Object(i.b)("li",{parentName:"ul"},"it throws ",Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(i.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," for an invalid index or an invalid group name (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'"2group"')," or ",Object(i.b)("inlineCode",{parentName:"li"},"-2"),")"),Object(i.b)("li",{parentName:"ul"},"and throws ",Object(i.b)("inlineCode",{parentName:"li"},"NonexistentGroupException")," if ",Object(i.b)("inlineCode",{parentName:"li"},"group()")," is used with a non-existent group")),Object(i.b)("h2",{id:"matched-occurrences-of-a-group"},"Matched occurrences of a group"),Object(i.b)("p",null,"Similarly to how you can retrieve all matched occurrences of pattern from subject:"),Object(i.b)(l.a,{tregx:'pattern("(?<capital>[A-Z])[a-z]+")->match("Hello there, General Kenobi")->all();',php:'preg::match_all("/(?<capital>[A-Z])[a-z]+/", "Hello there, General Kenobi", $matches);\nreturn $matches[0];',mdxType:"CodeTabs"}),Object(i.b)(l.b,{mdxType:"Result"},"['Hello', 'General', 'Kenobi']"),Object(i.b)("p",null,"...you can retrieve all matched occurrences of a capturing group in a subject:"),Object(i.b)(l.a,{tregx:'pattern("(?<capital>[A-Z])[a-z]+")->match("Hello there, General Kenobi")->group(\'capital\')->all();',php:"// possible invalid group, e.g. \"2group\" or -2\nvalidateGroupName('capital');\n\npreg::match_all(\"/(?<capital>[A-Z])[a-z]+/\", \"Hello there, General Kenobi\", $matches);\nif (validateGroupExists('capital', $matches)) {\n    return $matches['capital'];\n} else {\n    throw new NonexistentGroupException('capital');\n}",mdxType:"CodeTabs"}),Object(i.b)(l.b,{mdxType:"Result"},"['H', 'G', 'K']"),Object(i.b)("h2",{id:"optional-groups"},"Optional groups"),Object(i.b)("p",null,"Inline groups ",Object(i.b)("inlineCode",{parentName:"p"},"match()->group()->all()")," also handle optional capturing groups."),Object(i.b)("p",null,"In this example, we'll match words, with a pattern that specifies an optional capturing group named ",Object(i.b)("inlineCode",{parentName:"p"},"capital"),", which\nis supposed to match a capital letter. Not every word in the subject has a capital letter, so not every occurrence will\nhave group ",Object(i.b)("inlineCode",{parentName:"p"},"capital")," matched."),Object(i.b)(l.a,{tregx:'pattern("(?<capital>[A-Z])?[a-z]+")->match("Hello there, General kenobi")->group(\'capital\')->all();',php:"// possible invalid group, e.g. \"2group\" or -2\nvalidateGroupName('capital');\n\npreg::match_all(\"/(?<capital>[A-Z])?[a-z]+/\", \"Hello there, General kenobi\", $matches);\nif (validateGroupExists('capital', $matches)) {\n    return array_map(function ($match) {\n        if ($match === '') {\n            if (validateGroupMatched('capital', $match)) {\n                return '';  // group was indeed matched\n            }\n            return null;  // group was not matched and falsely represented as an empty string\n        }\n        return $match;\n    }, $matches['capital']);\n} else {\n    throw new NonexistentGroupException('capital');\n}",mdxType:"CodeTabs"}),Object(i.b)(l.b,{mdxType:"Result"},"['H', null, 'G', null]"),Object(i.b)("h2",{id:"missing-or-invalid-groups"},"Missing or invalid groups"),Object(i.b)("p",null,"When ",Object(i.b)("inlineCode",{parentName:"p"},"match()->group()")," is called with a group that wasn't used in pattern (for example ",Object(i.b)("inlineCode",{parentName:"p"},'"asd"')," or ",Object(i.b)("inlineCode",{parentName:"p"},"1200"),"), ",Object(i.b)("inlineCode",{parentName:"p"},"NonexistentGroupException")," is thrown.CodeTabs"),Object(i.b)("p",null,"If, however, an invalid group is used:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"group name starting with a number (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'"2asd"'),")"),Object(i.b)("li",{parentName:"ul"},"negative group index (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},"-12"),")"),Object(i.b)("li",{parentName:"ul"},"group name containing invalid characters (e.g. ",Object(i.b)("inlineCode",{parentName:"li"},'"!@#"'),")")),Object(i.b)("p",null,"... then ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(i.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," is thrown."))}s.isMDXComponent=!0},162:function(e,a,t){"use strict";t.d(a,"a",(function(){return s})),t.d(a,"b",(function(){return m}));var n=t(0),r=t.n(n),i=t(165),l=t(166),o=t(164),p=t(47),c=t.n(p);class u extends r.a.Component{render(){return r.a.createElement("div",{className:c.a.code},r.a.createElement(o.a,{className:"language-"+this.language},this.code))}get language(){return this.props.language||"php"}get code(){const e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every(e=>"string"==typeof e))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}var s=({tregx:e,php:a})=>{const t=[e?{label:"T-Regx",value:"t-regx"}:{},a?{label:"PHP",value:"php"}:{}].filter(e=>e.value);return r.a.createElement(i.a,{defaultValue:"t-regx",values:t,groupId:"language"},e&&r.a.createElement(l.a,{value:"t-regx"},r.a.createElement(u,null,e)),a&&r.a.createElement(l.a,{value:"php"},r.a.createElement(u,null,a)))},b=t(48),d=t.n(b),m=({text:e,children:a})=>r.a.createElement("div",{className:d.a.result},r.a.createElement(u,{language:e?"text":"php"},a))}}]);