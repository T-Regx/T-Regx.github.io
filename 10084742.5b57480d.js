(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{189:function(e,t,a){"use strict";a.d(t,"a",(function(){return h})),a.d(t,"b",(function(){return j}));var n=a(0),r=a.n(n),c=a(192),i=a(193),b=a(194),l=a(4),o=a(190),s=a(48),p=a.n(s),m=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{className:p.a.code},r.a.createElement(o.a,{className:"language-"+this.language},this.code))},Object(b.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(r.a.Component),h=function(e){var t=e.tregx,a=e.php,n=[t?{label:"T-Regx",value:"t-regx"}:{},a?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return r.a.createElement(c.a,{defaultValue:"t-regx",values:n},t&&r.a.createElement(i.a,{value:"t-regx"},r.a.createElement(m,null,t)),a&&r.a.createElement(i.a,{value:"php"},r.a.createElement(m,null,a)))},u=a(49),d=a.n(u),j=function(e){var t=e.text,a=e.children;return r.a.createElement("div",{className:d.a.result},r.a.createElement(m,{language:t?"text":"php"},a))}},71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),c=(a(0),a(188)),i=a(189),b={id:"match",title:"Match a subject"},l={unversionedId:"match",id:"match",isDocsHomePage:!1,title:"Match a subject",description:"Using pattern()->match() you can:",source:"@site/../docs/match.mdx",slug:"/match",permalink:"/docs/match",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"Migrate to T-Regx",permalink:"/docs/introduction-clean"},next:{title:"First occurrence",permalink:"/docs/match-first"}},o=[{value:"Test a subject",id:"test-a-subject",children:[]},{value:"Retrieve the first match",id:"retrieve-the-first-match",children:[]},{value:"Retrieve multiple matches",id:"retrieve-multiple-matches",children:[]}],s={rightToc:o};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"Using ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->match()")," you can:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Test a subject against a pattern: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#test-a-subject"}),Object(c.b)("inlineCode",{parentName:"a"},"test()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#test-a-subject"}),Object(c.b)("inlineCode",{parentName:"a"},"fails()"))),Object(c.b)("li",{parentName:"ul"},"Retrieve matches from the subject: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-first#use-first-with-callback"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#many"}),Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#many"}),Object(c.b)("inlineCode",{parentName:"a"},"only()"))),Object(c.b)("li",{parentName:"ul"},"Get capturing groups from matches: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"group()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Detail.group()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"groups()"))),Object(c.b)("li",{parentName:"ul"},"Invoke callbacks for matches: ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-first#use-first-with-callback"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-find-first"}),Object(c.b)("inlineCode",{parentName:"a"},"findFirst()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-for-each"}),Object(c.b)("inlineCode",{parentName:"a"},"forEach()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-map"}),Object(c.b)("inlineCode",{parentName:"a"},"map()")),"/",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/match-flat-map"}),Object(c.b)("inlineCode",{parentName:"a"},"flatMap()")))),Object(c.b)("h2",{id:"test-a-subject"},"Test a subject"),Object(c.b)("p",null,"If you only need to check whether a pattern matches a subject, use:"),Object(c.b)(i.a,{tregx:"pattern('[0-9]+')->test(\"I'm 19 years old\");",php:"preg::match('/[0-9]+/', \"I'm 19 years old\") > 0;",mdxType:"CodeTabs"}),Object(c.b)("p",null,"...or to check whether it doesn't:"),Object(c.b)(i.a,{tregx:"pattern('[0-9]{3}')->fails(\"I'm 19 years old\");",php:"preg::match('/[0-9]{3}/', \"I'm 19 years old\") === 0;",mdxType:"CodeTabs"}),Object(c.b)("p",null,"Of course ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->match()")," throws an exception if the pattern is invalid (or in case of any other error)."),Object(c.b)("h2",{id:"retrieve-the-first-match"},"Retrieve the first match"),Object(c.b)("p",null,"To get the first occurrence of a matched pattern, call ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first#use-first-with-callback"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"."),Object(c.b)(i.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999\")->first();",php:"if (preg::match('/[0-9]+/', \"I'm 19 years old. I was born in 1999\", $match)) {\n    return $match[0];\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'19'"),Object(c.b)("p",null,"Read on the ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),"next page")," to learn more about ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first#use-first-with-callback"}),Object(c.b)("inlineCode",{parentName:"a"},"first()")),"."),Object(c.b)("h2",{id:"retrieve-multiple-matches"},"Retrieve multiple matches"),Object(c.b)("p",null,"You can easily retrieve matched occurrences of a pattern in your subject."),Object(c.b)(i.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19. I was born in 1999, on May 12\")->all();",php:"preg::match_all('/[0-9]+/', \"I'm 19. I was born in 1999, on May 12\", $matches);\nreturn $matches[0];",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"['19', '1999', '12']"),Object(c.b)("p",null,"You can limit your matches with ",Object(c.b)("inlineCode",{parentName:"p"},"only(int)"),"."),Object(c.b)(i.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19. I was born in 1999, on May 12\")->only(2);",php:"preg::match_all('/[0-9]+/', \"I'm 19. I was born in 1999, on May 12\", $matches);\nreturn array_slice($matches[0], 0, 2);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"['19', '1999']"))}p.isMDXComponent=!0}}]);