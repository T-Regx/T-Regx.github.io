(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{158:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return l})),a.d(n,"metadata",(function(){return o})),a.d(n,"toc",(function(){return p})),a.d(n,"default",(function(){return b}));var t=a(3),r=a(7),c=(a(0),a(198)),i=a(200),l={id:"replace-with",title:"Replace with a constant value"},o={unversionedId:"replace-with",id:"replace-with",isDocsHomePage:!1,title:"Replace with a constant value",description:"After replace(), you need to explicitly use one of [first()]/[all()]/[only(int)] methods, to express how many",source:"@site/../docs/replace-with.mdx",slug:"/replace-with",permalink:"/docs/replace-with",version:"current",lastUpdatedAt:1611107902,sidebar:"docs",previous:{title:"Replacing a string",permalink:"/docs/replace"},next:{title:"Replace with callback",permalink:"/docs/replace-callback"}},p=[{value:"Limits",id:"limits",children:[{value:"First occurrence - first()",id:"first-occurrence---first",children:[]},{value:"All occurrences - <code>all()</code>",id:"all-occurrences---all",children:[]},{value:"Limited occurrences - <code>only()</code>",id:"limited-occurrences---only",children:[]}]},{value:"Regular expression references",id:"regular-expression-references",children:[]},{value:"PHP-style intentional references",id:"php-style-intentional-references",children:[]},{value:"Remove occurrence",id:"remove-occurrence",children:[]}],s={toc:p};function b(e){var n=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(t.a)({},s,a,{components:n,mdxType:"MDXLayout"}),Object(c.b)("p",null,"After ",Object(c.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(c.b)("a",{parentName:"p",href:"/docs/match-first"},Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",{parentName:"p",href:"/docs/match#many"},Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",{parentName:"p",href:"/docs/match#many"},Object(c.b)("inlineCode",{parentName:"a"},"only(int)"))," methods, to express how many\nreplacements should be done."),Object(c.b)("p",null,"Specifying limits is done to relieve you from ",Object(c.b)("a",{parentName:"p",href:"/docs/overview#brain-strain"},Object(c.b)("strong",{parentName:"a"},"brain strain"))," - so you can immediately\nrecognize author's intentions."),Object(c.b)("h2",{id:"limits"},"Limits"),Object(c.b)("p",null,"Using ",Object(c.b)("a",{parentName:"p",href:"/docs/match-first"},Object(c.b)("inlineCode",{parentName:"a"},"first()")),"/",Object(c.b)("a",{parentName:"p",href:"/docs/match#many"},Object(c.b)("inlineCode",{parentName:"a"},"all()")),"/",Object(c.b)("a",{parentName:"p",href:"/docs/match#many"},Object(c.b)("inlineCode",{parentName:"a"},"only(int)"))," is semantically identical to passing ",Object(c.b)("inlineCode",{parentName:"p"},"$limit")," argument to\n",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-replace.php"},Object(c.b)("inlineCode",{parentName:"a"},"preg_replace()")),"/",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-replace-callback.php"},Object(c.b)("inlineCode",{parentName:"a"},"preg_replace_callback()")),"."),Object(c.b)("h3",{id:"first-occurrence---first"},"First occurrence - ",Object(c.b)("a",{parentName:"h3",href:"/docs/match-first"},Object(c.b)("inlineCode",{parentName:"a"},"first()"))),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg_replace('/[A-Z][a-z]+/', '___', $subject, 1);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, Norway and Denmark'"),Object(c.b)("h3",{id:"all-occurrences---all"},"All occurrences - ",Object(c.b)("inlineCode",{parentName:"h3"},"all()")),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, ___ and ___'"),Object(c.b)("h3",{id:"limited-occurrences---only"},"Limited occurrences - ",Object(c.b)("inlineCode",{parentName:"h3"},"only()")),Object(c.b)(i.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->with('___');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject, 2);",mdxType:"CodeTabs"}),Object(c.b)(i.b,{mdxType:"Result"},"'I like scandinavia: ___, ___ and Denmark'"),Object(c.b)("p",null,"Read on, to learn more about replacing with ",Object(c.b)("a",{parentName:"p",href:"/docs/replace-callback"},"a callback"),"."),Object(c.b)("h2",{id:"regular-expression-references"},"Regular expression references"),Object(c.b)("p",null,"Normally, had you passed a replacement to ",Object(c.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-replace.php"},Object(c.b)("inlineCode",{parentName:"a"},"preg_replace()")),", that contains a backslash or a dollar sign followed by a\nnumber (eg. ",Object(c.b)("inlineCode",{parentName:"p"},"\\1")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$2"),") - that reference would be replaced by a corresponding capturing group (or by an empty string,\nif the group wasn't matched)."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-php"},"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-text"},"I have <15> and <192>\n")),Object(c.b)("p",null,"Resolving such references won't happen using ",Object(c.b)("inlineCode",{parentName:"p"},"with()"),"."),Object(c.b)("p",null,"This is done to relieve you from the ",Object(c.b)("a",{parentName:"p",href:"/docs/overview#brain-strain"},Object(c.b)("strong",{parentName:"a"},"brain strain")),". A programmer should be able to merely\nreplace a string with a constant value without ",Object(c.b)("a",{parentName:"p",href:"/docs/overview#brain-strain"},"cognitive load")," about possible ",Object(c.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$")," hiding somewhere."),Object(c.b)(i.a,{tregx:"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->with('<$1>');",php:"preg::replace('/(\\d+)cm/', '<\\$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// in T-Regx, special function is used to quote all references",mdxType:"CodeTabs"}),Object(c.b)(i.b,{text:!0,mdxType:"Result"},"I have <$1> and <$1>"),Object(c.b)("p",null,"You can be sure, what's put into ",Object(c.b)("inlineCode",{parentName:"p"},"with()")," will certainly be present unchanged in your final result."),Object(c.b)("p",null,"Some replacement strings containing a backslash or a dollar sign (like file system paths, URL addresses or even user input)\nmight interfere with logic and cause bugs that are very hard to find."),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"Neither of types of references are resolved: ",Object(c.b)("inlineCode",{parentName:"p"},"$12"),", ",Object(c.b)("inlineCode",{parentName:"p"},"\\12")," nor ",Object(c.b)("inlineCode",{parentName:"p"},"${12}"),"."))),Object(c.b)("h2",{id:"php-style-intentional-references"},"PHP-style intentional references"),Object(c.b)("p",null,"If you, however, would like to intentionally use regular expression references and have validated your input\nagainst ",Object(c.b)("em",{parentName:"p"},"an unexpected")," ",Object(c.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(c.b)("inlineCode",{parentName:"p"},"$")," - feel free to use ",Object(c.b)("inlineCode",{parentName:"p"},"withReferences()")," which ",Object(c.b)("strong",{parentName:"p"},"will")," resolve replacement references."),Object(c.b)(i.a,{tregx:"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->withReferences('<$1>');",php:"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// using withReferences(), back references are preserved",mdxType:"CodeTabs"}),Object(c.b)(i.b,{text:!0,mdxType:"Result"},"I have <15> and <192>"),Object(c.b)("p",null,"However, this is not recommended. For that, try using ",Object(c.b)("a",{parentName:"p",href:"/docs/replace-by-group"},Object(c.b)("inlineCode",{parentName:"a"},"replace()->by()->group()"))," or ",Object(c.b)("a",{parentName:"p",href:"/docs/replace-callback"},Object(c.b)("inlineCode",{parentName:"a"},"replace()->callback()")),"."),Object(c.b)("p",null,"The only valid use-cases for ",Object(c.b)("inlineCode",{parentName:"p"},"withReferences()")," is:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Performance (since ",Object(c.b)("inlineCode",{parentName:"li"},"withReferences()")," uses ",Object(c.b)("a",{parentName:"li",href:"https://www.php.net/manual/en/function.preg-replace.php"},Object(c.b)("inlineCode",{parentName:"a"},"preg_replace()")),", and not ",Object(c.b)("a",{parentName:"li",href:"https://www.php.net/manual/en/function.preg-replace-callback.php"},Object(c.b)("inlineCode",{parentName:"a"},"preg_replace_callback()")),")"),Object(c.b)("li",{parentName:"ul"},"Migration from ",Object(c.b)("inlineCode",{parentName:"li"},"preg_replace()")," used in legacy codebase")),Object(c.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(c.b)("div",{parentName:"div",className:"admonition-heading"},Object(c.b)("h5",{parentName:"div"},Object(c.b)("span",{parentName:"h5",className:"admonition-icon"},Object(c.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(c.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(c.b)("div",{parentName:"div",className:"admonition-content"},Object(c.b)("p",{parentName:"div"},"Using ",Object(c.b)("inlineCode",{parentName:"p"},"withReferences()")," is not recommended. Instead, try using ",Object(c.b)("inlineCode",{parentName:"p"},"with()"),", ",Object(c.b)("inlineCode",{parentName:"p"},"by()->map()")," or ",Object(c.b)("inlineCode",{parentName:"p"},"callback()"),"."),Object(c.b)("p",{parentName:"div"},"We don't encourage its usage, but we're keeping it nonetheless, to allow users to decide for\nthemselves whether they want to use T-Regx API, or stay with PHP replace style."))),Object(c.b)("h2",{id:"remove-occurrence"},"Remove occurrence"),Object(c.b)("p",null,"There are times when you'd like to simply remove the occurrence of a pattern from your subject. To do that,\nuse ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->remove()")," instead of ",Object(c.b)("inlineCode",{parentName:"p"},"pattern()->replace()"),":"),Object(c.b)(i.a,{tregx:"pattern('[cm]m')->remove('I have 15cm and 192cm')->all();",php:"preg::replace('/[cm]m/', '', 'I have 15cm and 192cm');",mdxType:"CodeTabs"}),Object(c.b)(i.b,{text:!0,mdxType:"Result"},"I have 15 and 192"),Object(c.b)("p",null,"It's actually identical to calling ",Object(c.b)("inlineCode",{parentName:"p"},"replace()->with('')")," under the hood, but it's a bit shorter and more expressive."))}b.isMDXComponent=!0},198:function(e,n,a){"use strict";a.d(n,"a",(function(){return b})),a.d(n,"b",(function(){return m}));var t=a(0),r=a.n(t);function c(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){c(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var n=r.a.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},b=function(e){var n=s(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var a=e.components,t=e.mdxType,c=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),b=s(a),u=t,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||c;return a?r.a.createElement(m,l(l({ref:n},p),{},{components:a})):r.a.createElement(m,l({ref:n},p))}));function m(e,n){var a=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var c=a.length,i=new Array(c);i[0]=u;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var p=2;p<c;p++)i[p]=a[p];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},200:function(e,n,a){"use strict";a.d(n,"a",(function(){return j})),a.d(n,"b",(function(){return y}));var t=a(0),r=a.n(t),c=a(204),i=a(199),l=a(55),o=a.n(l),p=37,s=39;var b=function(e){var n=e.lazy,a=e.block,l=e.defaultValue,b=e.values,d=e.groupId,u=e.className,m=Object(c.a)(),h=m.tabGroupChoices,f=m.setTabGroupChoices,j=Object(t.useState)(l),O=j[0],v=j[1],g=t.Children.toArray(e.children);if(null!=d){var y=h[d];null!=y&&y!==O&&b.some((function(e){return e.value===y}))&&v(y)}var w=function(e){v(e),null!=d&&f(d,e)},N=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},u)},b.map((function(e){var n=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===n,className:Object(i.a)("tabs__item",o.a.tabItem,{"tabs__item--active":O===n}),key:n,ref:function(e){return N.push(e)},onKeyDown:function(e){!function(e,n,a){switch(a.keyCode){case s:!function(e,n){var a=e.indexOf(n)+1;e[a]?e[a].focus():e[0].focus()}(e,n);break;case p:!function(e,n){var a=e.indexOf(n)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,n)}}(N,e.target,e)},onFocus:function(){return w(n)},onClick:function(){w(n)}},a)}))),n?Object(t.cloneElement)(g.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return Object(t.cloneElement)(e,{key:n,hidden:e.props.value!==O})}))))};var d=function(e){var n=e.children,a=e.hidden,t=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:t},n)},u=a(205),m=a(56),h=a.n(m),f=function(e){var n=e.children,a=e.language;return r.a.createElement("div",{className:h.a.code},r.a.createElement(u.a,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(n)))};var j=function(e){var n=e.tregx,a=e.php;return r.a.createElement(b,{defaultValue:"t-regx",values:O(n,a)},n&&r.a.createElement(d,{value:"t-regx"},r.a.createElement(f,null,n)),a&&r.a.createElement(d,{value:"php"},r.a.createElement(f,null,a)))};function O(e,n){return[e?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}var v=a(57),g=a.n(v),y=function(e){var n=e.text,a=e.children;return r.a.createElement("div",{className:g.a.result},r.a.createElement(f,{language:n?"text":"php"},a))}}}]);