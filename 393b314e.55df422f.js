(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{174:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a),i=n(178),o=n(179),l=n(180),c=n(4),p=n(175),d=n(48),s=n.n(d),u=function(e){function t(){return e.apply(this,arguments)||this}return Object(c.a)(t,e),t.prototype.render=function(){return r.a.createElement("div",{className:s.a.code},r.a.createElement(p.a,{className:"language-"+this.language},this.code))},Object(l.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(r.a.Component),b=function(e){var t=e.tregx,n=e.php,a=[t?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return r.a.createElement(i.a,{defaultValue:"t-regx",values:a},t&&r.a.createElement(o.a,{value:"t-regx"},r.a.createElement(u,null,t)),n&&r.a.createElement(o.a,{value:"php"},r.a.createElement(u,null,n)))},m=n(49),v=n.n(m),h=function(e){var t=e.text,n=e.children;return r.a.createElement("div",{className:v.a.result},r.a.createElement(u,{language:t?"text":"php"},n))}},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return s}));var a=n(2),r=n(6),i=(n(0),n(173)),o=n(174),l={id:"valid",title:"Validate a pattern"},c={unversionedId:"valid",id:"valid",isDocsHomePage:!1,title:"Validate a pattern",description:"This chapter doesn't contain PHP code snippets, because PHP PCRE doesn't provide a way to validate patterns.",source:"@site/../docs/valid.mdx",slug:"/valid",permalink:"/docs/valid",version:"current",lastUpdatedAt:1586367925,sidebar:"docs",previous:{title:"Quote regular expression",permalink:"/docs/quote"},next:{title:"Split a string",permalink:"/docs/split"}},p=[],d={rightToc:p};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"This chapter doesn't contain ",Object(i.b)("inlineCode",{parentName:"p"},"PHP")," code snippets, because PHP PCRE doesn't provide a way to validate patterns.")),Object(i.b)("p",null,"You can check whether a pattern is valid with ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()->valid()")," method."),Object(i.b)(o.a,{tregx:"pattern('I am a valid pattern')->valid();",mdxType:"CodeTabs"}),Object(i.b)(o.b,{mdxType:"Result"},"true"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Remember, ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()->valid()")," doesn't throw any exception nor issues any warnings. It only returns ",Object(i.b)("inlineCode",{parentName:"p"},"true"),"/",Object(i.b)("inlineCode",{parentName:"p"},"false"),".")),Object(i.b)(o.a,{tregx:"pattern('I am an (( invalid }} pattern')->valid();",mdxType:"CodeTabs"}),Object(i.b)(o.b,{mdxType:"Result"},"false"),Object(i.b)("h1",{id:"old-school-patterns"},"Old-school patterns"),Object(i.b)("p",null,"Undelimited patterns can be validated with ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()"),"/",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::of()"),". To validate old-school patterns (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"/Hello/i"),"), use ",Object(i.b)("inlineCode",{parentName:"p"},"Pattern::pcre()"),":"),Object(i.b)(o.a,{tregx:"Pattern::pcre('/I am an valid pattern/m')->valid();",mdxType:"CodeTabs"}),Object(i.b)(o.b,{mdxType:"Result"},"true"))}s.isMDXComponent=!0}}]);