(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{136:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return m}));n(211);var a=n(207),o=n(208),i=n(209);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const r={id:"replace-by-group",title:"Replace by group"},l=[{value:"Overview",id:"overview",children:[]},{value:"Unmatched group",id:"unmatched-group",children:[{value:"<code>orIgnore()</code>",id:"orignore",children:[]},{value:"<code>orEmpty()</code>",id:"orempty",children:[]},{value:"<code>orReturn(string)</code>",id:"orreturnstring",children:[]},{value:"<code>orElse(callable)</code>",id:"orelsecallable",children:[]},{value:"<code>orThrow()</code>",id:"orthrow",children:[]}]},{value:"Identity",id:"identity",children:[]}],p={rightToc:l},b="wrapper";function m({components:e,...t}){return Object(a.b)(b,c({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Method ",Object(a.b)("inlineCode",{parentName:"p"},"replace()->by()->group()")," can be used when you would just like to replace a whole match by one of its capturing group,\noptionally handling what should happen when a group is not matched."),Object(a.b)("p",null,"This is, in fact, a shorthand for a rather common usage of ",Object(a.b)("inlineCode",{parentName:"p"},"callback()")," with a function replacing by a capturing\ngroup - ",Object(a.b)("a",c({parentName:"p"},{href:"/docs/replace-by-group#identity"}),"Scroll down to see an example"),"."),Object(a.b)("p",null,"Apart from replacing by an inline group, you can also retrieve matched capturing groups with ",Object(a.b)("a",c({parentName:"p"},{href:"/docs/match-group"}),"inline groups"),"."),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("p",null,"There are several URL addresses in ",Object(a.b)("inlineCode",{parentName:"p"},"$links")," variable. Given a regular expression matching a URL, with a group\ncapturing the URL domain, you can easily leave off only the domain in the matched links:"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orThrow();\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)#', function ($match) {\n    return $match['domain'];\n}, $links);\n\n// This code is just a simplification.\n// The PHP equivalent is actually a bit more complicated. Please, see PHP snippets below.\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, socket, facebook, t-regx :)'\n")),Object(a.b)("p",null,"Each matched link was replaced with ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," capturing group. In this case, ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," capturing group is not an\noptional group (it's always going to be matched, when the whole pattern is matched), so the matched occurrence is\nalways going to be replaced with it."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Of course, ",Object(a.b)("inlineCode",{parentName:"p"},"NonexistentGroupException")," is thrown when ",Object(a.b)("inlineCode",{parentName:"p"},"by()->group()")," is used with a non-existent group. Likewise,\n",Object(a.b)("inlineCode",{parentName:"p"},"\\InvalidArgumentException")," is thrown for a malformed group, e.g. ",Object(a.b)("inlineCode",{parentName:"p"},"-2")," or ",Object(a.b)("inlineCode",{parentName:"p"},'"2name"'),".")),Object(a.b)("h2",{id:"unmatched-group"},"Unmatched group"),Object(a.b)("p",null,"How do you handle unmatched/optional groups?"),Object(a.b)("p",null,"For example, a group ",Object(a.b)("inlineCode",{parentName:"p"},"(?<name>\\w+)?")," is optional. For an occurrence with the optional ",Object(a.b)("inlineCode",{parentName:"p"},"'name'")," group that happened not\nto be matched, you can chose either to ignore the replacement (simply don't perform any replace in the match),\nreplace with a default or an empty string, or call a producer to return what should the match be replaced with."),Object(a.b)("p",null,"You can also chose to throw an exception, if the unmatched group is not supposed to be optional, to ensure integrity."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orIgnore()")," - leaves the match unchanged - doesn't replace the match, if the group itself is not matched"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orEmpty()")," - matched occurrence is replaced with an empty string"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orReturn(string)")," - match is replaced with the given ",Object(a.b)("inlineCode",{parentName:"li"},"string")," argument"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orElse(callable)")," - uses a callback with ",Object(a.b)("a",c({parentName:"li"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match"))," argument, in order to evaluate a replacement"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"orThrow()")," - throws a default or a custom exception, just like ",Object(a.b)("a",c({parentName:"li"},{href:"/docs/match-for-first"}),"forFirst()->orThrow()"))),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"orEmpty()")," is the most performance-light method, because it uses ",Object(a.b)("inlineCode",{parentName:"p"},"preg_replace()"),", whereas ",Object(a.b)("inlineCode",{parentName:"p"},"orReturn()"),", ",Object(a.b)("inlineCode",{parentName:"p"},"orIgnore()"),",\n",Object(a.b)("inlineCode",{parentName:"p"},"orElse()")," and ",Object(a.b)("inlineCode",{parentName:"p"},"orThrow()")," use ",Object(a.b)("inlineCode",{parentName:"p"},"preg_replace_callback()"),".")),Object(a.b)("hr",null),Object(a.b)("p",null,"Now, for the sake of this example, let's say a domain is an optional part of an URL address. Below, you'll find 4\ncode snippets illustrating the usage of each of those:"),Object(a.b)("h3",{id:"orignore"},Object(a.b)("inlineCode",{parentName:"h3"},"orIgnore()")),Object(a.b)("p",null,"Matched links with matched ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare simply left as they were (ignored):"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orIgnore();\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return $match[0];\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return $match[0];\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, http://.io, facebook, https://.com :)'\n")),Object(a.b)("p",null,"Description:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Match ",Object(a.b)("inlineCode",{parentName:"li"},"www.google.com")," was replaced with the matched occurrence of it's capturing group - ",Object(a.b)("inlineCode",{parentName:"li"},"google")),Object(a.b)("li",{parentName:"ul"},"Match ",Object(a.b)("inlineCode",{parentName:"li"},"facebook.com")," was replaced with the matched occurrence of it's capturing group - ",Object(a.b)("inlineCode",{parentName:"li"},"facebook")),Object(a.b)("li",{parentName:"ul"},"Matches ",Object(a.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(a.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(a.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare left unchanged (ignored), in this case.")),Object(a.b)("h3",{id:"orempty"},Object(a.b)("inlineCode",{parentName:"h3"},"orEmpty()")),Object(a.b)("p",null,"Matched links with matched ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare replaced with an empty string:"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orEmpty();\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return '';\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    // Check between unmatched and matched-empty is unnecessary\n    return $match['domain'];\n}, $links);\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, , facebook,  :)'\n")),Object(a.b)("p",null,"Description:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Matches ",Object(a.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(a.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(a.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare replaced with an empty string, in this case.")),Object(a.b)("h3",{id:"orreturnstring"},Object(a.b)("inlineCode",{parentName:"h3"},"orReturn(string)")),Object(a.b)("p",null,"Matched links with matched ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare replaced with a given parameter string:"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orReturn('UNKNOWN');\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return 'UNKNOWN';\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return 'UNKNOWN';\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, UNKNOWN, facebook, UNKNOWN :)'\n")),Object(a.b)("p",null,"Description:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Matches ",Object(a.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(a.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(a.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare replaced with a given ",Object(a.b)("inlineCode",{parentName:"li"},"'UNKNOWN'")," string, in this case.")),Object(a.b)("h3",{id:"orelsecallable"},Object(a.b)("inlineCode",{parentName:"h3"},"orElse(callable)")),Object(a.b)("p",null,"Matched links with matched ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare then passed to the producer, which result is then replaced in place of the link:"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orElse(function (Match $match) {\n        return \"Not found **$match**\";\n    });\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\n$producer = function (array $match) {\n    return \"Not found **{$match[0]}**\";\n};\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) use ($producer) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return $producer($match);\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return $producer($match);\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, Not found **http://.io**, facebook, Not found **https://.com** :)'\n")),Object(a.b)("p",null,"Description:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Matches ",Object(a.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(a.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(a.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so callback\nfunction is called with ",Object(a.b)("inlineCode",{parentName:"li"},"Match")," details (first with ",Object(a.b)("inlineCode",{parentName:"li"},"http://.io"),", and then with ",Object(a.b)("inlineCode",{parentName:"li"},"https://.com"),"), and the link is replaced\nwith a result of that function.")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Even this simple T-Regx snippet is represented as a massive PHP code. Using ",Object(a.b)("inlineCode",{parentName:"p"},"Match.index()")," or ",Object(a.b)("inlineCode",{parentName:"p"},"Match.offset()")," when\nreplacing would make PHP code even more complex, introducing counting variables and ",Object(a.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE"),"..")),Object(a.b)("h3",{id:"orthrow"},Object(a.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(a.b)("p",null,"You can either call this method without parameters, or with your custom exception class name (just like ",Object(a.b)("a",c({parentName:"p"},{href:"/docs/match-for-first"}),Object(a.b)("inlineCode",{parentName:"a"},"forFirst()"))," parameter):"),Object(a.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(a.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orThrow(MyCustomException::class);\n"))),Object(a.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            throw new MyCustomException();\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            throw new MyCustomException();\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"'My links are: google, socket, facebook, t-regx :)'\n")),Object(a.b)("p",null,"Of course, for subject ",Object(a.b)("inlineCode",{parentName:"p"},"$links")," equal to ",Object(a.b)("inlineCode",{parentName:"p"},"'My links are: www..com'")," (optional group ",Object(a.b)("inlineCode",{parentName:"p"},"'domain'")," is unmatched) - ",Object(a.b)("inlineCode",{parentName:"p"},"MyCustomException")," would be thrown."),Object(a.b)("h2",{id:"identity"},"Identity"),Object(a.b)("p",null,"As mentioned, ",Object(a.b)("inlineCode",{parentName:"p"},"replace()->by()->group()")," is just a short-hand for ",Object(a.b)("inlineCode",{parentName:"p"},"replace()->callback()"),"."),Object(a.b)("p",null,"The below ",Object(a.b)("inlineCode",{parentName:"p"},"by()->group()")," code:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orXXX();\n")),Object(a.b)("p",null,"is identical to:"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->callback(function (Match $match) {\n        return $match->group('domain')->orXXX();\n    });\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("inlineCode",{parentName:"p"},"by()->group()")," is the most performance-light method, because it doesn't require creating ",Object(a.b)("inlineCode",{parentName:"p"},"Match")," details, for the sake\nof ",Object(a.b)("inlineCode",{parentName:"p"},"callback()"),".")))}m.isMDXComponent=!0},208:function(e,t,n){"use strict";var a=n(0),o=n.n(a),i=n(210),c=n.n(i);t.a=function(e){const{block:t,children:n,defaultValue:i,values:r}=e,[l,p]=Object(a.useState)(i);return o.a.createElement("div",null,o.a.createElement("ul",{className:c()("tabs",{"tabs--block":t})},r.map(({value:e,label:t})=>o.a.createElement("li",{className:c()("tab-item",{"tab-item--active":l===e}),key:e,onClick:()=>p(e)},t))),o.a.createElement("div",{className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===l)[0]))}},209:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function(e){return o.a.createElement("div",null,e.children)}}}]);