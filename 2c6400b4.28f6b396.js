(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{170:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),b=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=b(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=b(n),s=a,d=m["".concat(l,".").concat(s)]||m[s]||u[s]||i;return n?r.a.createElement(d,o(o({ref:t},p),{},{components:n})):r.a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(6),i=(n(0),n(170)),l={id:"overview",title:"What's T-Regx?"},o={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"What's T-Regx?",description:"T-Regx (T-Rex and RegExp) is a lightweight, high-level Regular Expressions library.",source:"@site/..\\docs\\overview.mdx",permalink:"/docs/overview",lastUpdatedAt:1599861835,sidebar:"docs",next:{title:"Installation",permalink:"/docs/installation"}},c=[{value:"PHP&#39;s magic values",id:"phps-magic-values",children:[]}],p={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"T-Regx (",Object(i.b)("em",{parentName:"p"},"T-Rex and RegExp"),") is a lightweight, high-level Regular Expressions library."),Object(i.b)("p",null,"Its main features are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Standard ",Object(i.b)("strong",{parentName:"p"},"and")," new functions:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"You can stay with known ",Object(i.b)("inlineCode",{parentName:"li"},"preg_match()"),", ",Object(i.b)("inlineCode",{parentName:"li"},"preg_replace()")," functions"),Object(i.b)("li",{parentName:"ul"},"You can use new ",Object(i.b)("inlineCode",{parentName:"li"},"pattern()")," function"),Object(i.b)("li",{parentName:"ul"},"You can use either; you can use both; you can interchange them"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"API:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/delimiters"}),"Automatic delimiters")," for your patterns"),Object(i.b)("li",{parentName:"ul"},"UTF-8 support out of the box"),Object(i.b)("li",{parentName:"ul"},"Unifying differences between matching, replacing, splitting into one interface: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/match"}),Object(i.b)("inlineCode",{parentName:"a"},"Match"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/prepared-patterns"}),"Prepared Patterns")," handling unsafe characters (e.g. user input)"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Removing headaches of PHP:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"You only use ",Object(i.b)("inlineCode",{parentName:"p"},"try"),"/",Object(i.b)("inlineCode",{parentName:"p"},"catch"),"."),Object(i.b)("p",{parentName:"li"},"T-Regx is doing all the ",Object(i.b)("inlineCode",{parentName:"p"},"if"),"ology around ",Object(i.b)("inlineCode",{parentName:"p"},"preg")," under the hood, to unify all PHP corner-cases and map them to\nexceptions (see ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/comparison"}),'"Comparison"'),").")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"All ",Object(i.b)("strong",{parentName:"p"},"false positives")," and ",Object(i.b)("strong",{parentName:"p"},"false negatives")," are eliminated")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"If anything - Exceptions!:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Magic values (like ",Object(i.b)("inlineCode",{parentName:"li"},"null"),", ",Object(i.b)("inlineCode",{parentName:"li"},"false"),", ",Object(i.b)("inlineCode",{parentName:"li"},"''"),", ",Object(i.b)("inlineCode",{parentName:"li"},"[]"),", ",Object(i.b)("inlineCode",{parentName:"li"},"-1"),") aren't used -> Exceptions"),Object(i.b)("li",{parentName:"ul"},"Handles every ",Object(i.b)("inlineCode",{parentName:"li"},"warning"),"/",Object(i.b)("inlineCode",{parentName:"li"},"error"),"/",Object(i.b)("inlineCode",{parentName:"li"},"fatal error"),"/",Object(i.b)("inlineCode",{parentName:"li"},"notice")," -> Exception"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"preg_last_error()")," isn't required to verify errors -> Exception"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"errors"),"/bugs/",Object(i.b)("inlineCode",{parentName:"li"},"gotcha's")," aren't silently ignored -> Exception"),Object(i.b)("li",{parentName:"ul"},"supplied invalid arguments aren't silently ignored -> Exception"),Object(i.b)("li",{parentName:"ul"},"returned invalid values aren't silently ignored -> Exception")))),Object(i.b)("p",null,"Additionally:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Each function obeys SRP"),Object(i.b)("li",{parentName:"ul"},"Functionalities are represented with ",Object(i.b)("inlineCode",{parentName:"li"},"methods()")," (not ",Object(i.b)("inlineCode",{parentName:"li"},"FLAGS")," or arguments)"),Object(i.b)("li",{parentName:"ul"},"No default ",Object(i.b)("inlineCode",{parentName:"li"},"parameters=null")),Object(i.b)("li",{parentName:"ul"},"No ",Object(i.b)("inlineCode",{parentName:"li"},"PREG_FLAGS, 1")),Object(i.b)("li",{parentName:"ul"},"No ",Object(i.b)("inlineCode",{parentName:"li"},"varargs..."))),Object(i.b)("h2",{id:"phps-magic-values"},"PHP's magic values"),Object(i.b)("p",null,"In vanilla PHP, different methods (",Object(i.b)("inlineCode",{parentName:"p"},"preg_match()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"preg_replace()"),", ",Object(i.b)("inlineCode",{parentName:"p"},"preg_split()"),", etc.) return different types and\nvalues, that are ",Object(i.b)("em",{parentName:"p"},"symbolic"),". For some it's ",Object(i.b)("inlineCode",{parentName:"p"},"null"),", for other ",Object(i.b)("inlineCode",{parentName:"p"},"[]")," or ",Object(i.b)("inlineCode",{parentName:"p"},"false")," or ",Object(i.b)("inlineCode",{parentName:"p"},"-1"),' - they\'re all supposed to mean "error".\nOf course you have to remember which is ',Object(i.b)("inlineCode",{parentName:"p"},"=== false")," and which ",Object(i.b)("inlineCode",{parentName:"p"},"=== null"),"."),Object(i.b)("p",null,"T-Regx will ",Object(i.b)("strong",{parentName:"p"},"never")," return ",Object(i.b)("inlineCode",{parentName:"p"},"null"),", ",Object(i.b)("inlineCode",{parentName:"p"},"false")," an empty array or other magic value. ",Object(i.b)("inlineCode",{parentName:"p"},"MalformedPatternException")," is thrown if ",Object(i.b)("inlineCode",{parentName:"p"},"$pattern")," is malformed."),Object(i.b)("p",null,"And it's not just the return values, ",Object(i.b)("inlineCode",{parentName:"p"},"$match")," results also contain magic values like ",Object(i.b)("inlineCode",{parentName:"p"},'""')," which can either mean\nthe group wasn't matched, or it matched an empty string in PHP. In CleanRegex this is handled, so you don't have to worry\nabout it - ",Object(i.b)("inlineCode",{parentName:"p"},'""')," always means an empty string in T-Regx."))}b.isMDXComponent=!0}}]);