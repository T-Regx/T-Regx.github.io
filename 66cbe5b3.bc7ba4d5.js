(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{117:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),l=(a(0),a(198)),c=a(200),i={id:"replace-callback",title:"Replace with callback"},o={unversionedId:"replace-callback",id:"replace-callback",isDocsHomePage:!1,title:"Replace with callback",description:"After replace(), you need to explicitly use one of first()/all()/only(int) methods, to express how many",source:"@site/../docs/replace-callback.mdx",slug:"/replace-callback",permalink:"/docs/replace-callback",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"Replace with a constant value",permalink:"/docs/replace-with"},next:{title:"Replace by group",permalink:"/docs/replace-by-group"}},p=[{value:"Replace first",id:"replace-first",children:[]},{value:"Replace multiple",id:"replace-multiple",children:[{value:"<code>all()</code>",id:"all",children:[]},{value:"<code>only()</code>",id:"only",children:[]}]},{value:"Return types",id:"return-types",children:[{value:"Explicit string",id:"explicit-string",children:[]}]},{value:"Variable callbacks",id:"variable-callbacks",children:[]}],u={toc:p};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},u,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"After ",Object(l.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(l.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(l.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(l.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(l.b)("p",null,"Callback passed to ",Object(l.b)("inlineCode",{parentName:"p"},"replace()->callback()")," will only be invoked:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"for ",Object(l.b)("inlineCode",{parentName:"li"},"all()")," - as many times as there are occurrences matched in the subject."),Object(l.b)("li",{parentName:"ul"},"for ",Object(l.b)("inlineCode",{parentName:"li"},"only(int)")," - the same as ",Object(l.b)("inlineCode",{parentName:"li"},"all()"),", but up to an ",Object(l.b)("inlineCode",{parentName:"li"},"int")," limit."),Object(l.b)("li",{parentName:"ul"},"for ",Object(l.b)("inlineCode",{parentName:"li"},"first()")," - once if an occurrence is matched; or not at all if it's not.")),Object(l.b)("h2",{id:"replace-first"},"Replace first"),Object(l.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->callback(function (Detail $detail) {\n    return strtoupper($detail->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    return strtoupper($match[0]);\n}, $subject, 1);",mdxType:"CodeTabs"}),Object(l.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, Norway and Denmark'"),Object(l.b)("h2",{id:"replace-multiple"},"Replace multiple"),Object(l.b)("h3",{id:"all"},Object(l.b)("inlineCode",{parentName:"h3"},"all()")),Object(l.b)("p",null,"Replacing all matched occurrences is the most common use-case:"),Object(l.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->callback(function (Detail $m) {\n    return strtoupper($m->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject);",mdxType:"CodeTabs"}),Object(l.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and DENMARK'"),Object(l.b)("h3",{id:"only"},Object(l.b)("inlineCode",{parentName:"h3"},"only()")),Object(l.b)("p",null,"You can also limit the amount of replacements done with ",Object(l.b)("inlineCode",{parentName:"p"},"only()"),"."),Object(l.b)(c.a,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In T-Regx, Detail can be cast to string, returning the whole match\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->callback('strtoupper');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    // $match[0] can be an empty string, even if a group is not matched\n    return call_user_func('strtoupper', $match[0]);\n}, $subject, 2);",mdxType:"CodeTabs"}),Object(l.b)(c.b,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and Denmark'"),Object(l.b)("h2",{id:"return-types"},"Return types"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"replace()->callback()")," only accepts ",Object(l.b)("inlineCode",{parentName:"p"},"string"),", ",Object(l.b)("a",{parentName:"p",href:"/docs/match-details"},Object(l.b)("inlineCode",{parentName:"a"},"Detail"))," or ",Object(l.b)("a",{parentName:"p",href:"/docs/match-groups"},Object(l.b)("inlineCode",{parentName:"a"},"MatchGroup"))," as its return type."),Object(l.b)("p",null,"We believe that returning anything, that's not a string, ",Object(l.b)("a",{parentName:"p",href:"/docs/match-details"},Object(l.b)("inlineCode",{parentName:"a"},"Detail"))," or a group can ",Object(l.b)("strong",{parentName:"p"},"be a sign of a bug"),'!\nMoreover, converting them silently would break our "Explicity rule".'),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return 2;       // <- throws InvalidReturnValueException\n    return true;    // <- throws InvalidReturnValueException\n    return null;    // <- throws InvalidReturnValueException\n});\n")),Object(l.b)("p",null,"Only ",Object(l.b)("inlineCode",{parentName:"p"},"string"),", ",Object(l.b)("a",{parentName:"p",href:"/docs/match-details"},Object(l.b)("inlineCode",{parentName:"a"},"Detail"))," or ",Object(l.b)("a",{parentName:"p",href:"/docs/match-groups"},Object(l.b)("inlineCode",{parentName:"a"},"MatchGroup"))," are allowed."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"pattern('([A-Z])\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return 'orange';         // string\n    return $detail;           // match\n    return $detail->group(1); // group\n});\n")),Object(l.b)("h3",{id:"explicit-string"},"Explicit string"),Object(l.b)("p",null,"If you'd like to replace an occurrence with a numeric value (for example ",Object(l.b)("inlineCode",{parentName:"p"},"'12'"),"), an empty string or ",Object(l.b)("inlineCode",{parentName:"p"},"'true'"),"/",Object(l.b)("inlineCode",{parentName:"p"},"'false'"),"\nliterals - just return them as ",Object(l.b)("inlineCode",{parentName:"p"},"string")," ",Object(l.b)("strong",{parentName:"p"},"explicitly"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-php"},"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return strval(2);                          // ok\n    return true ? 'true' : 'false';            // ok\n    return null ? '' : $something;             // ok\n\n    return $detail->text();                     // ok\n    return (string) $detail;                    // ok\n    return $detail->group('captured')->text();  // ok, if group exists and was matched\n\n    return $detail;                             // ok\n    return $detail->group('captured');          // ok, if group exists and was matched\n});\n")),Object(l.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(l.b)("p",null,"You can call ",Object(l.b)("inlineCode",{parentName:"p"},"replace()->callback()")," for any valid PHP ",Object(l.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},Object(l.b)("inlineCode",{parentName:"a"},"callable"))," which accepts one string parameter (or no parameters)\nand returns ",Object(l.b)("inlineCode",{parentName:"p"},"string"),"."),Object(l.b)(c.a,{tregx:"pattern('\\w+')->replace('Apples are cool')->first()->callback('strtoupper');",php:"// This code is actually impossible in Vanilla-PHP.\n// In T-Regx, Detail can be cast to string - that's the matched text\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/\\w+/', 'strtoupper', $subject, 1);\n\npreg::replace_callback('/\\w+/', function (array $match) {\n    return strtoupper($match[0]);\n}, 'Apples are cool', 1);",mdxType:"CodeTabs"}),Object(l.b)(c.b,{mdxType:"Result"},"'APPLES are cool'"),Object(l.b)("p",null,"In this example, ",Object(l.b)("a",{parentName:"p",href:"/docs/match-details"},Object(l.b)("inlineCode",{parentName:"a"},"Detail"))," will be cast to string, which is the same as calling ",Object(l.b)("inlineCode",{parentName:"p"},"Detail.text()")," method."))}s.isMDXComponent=!0},198:function(e,t,a){"use strict";a.d(t,"a",(function(){return s})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),u=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=u(a),d=n,m=s["".concat(c,".").concat(d)]||s[d]||b[d]||l;return a?r.a.createElement(m,i(i({ref:t},p),{},{components:a})):r.a.createElement(m,i({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,c=new Array(l);c[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<l;p++)c[p]=a[p];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},200:function(e,t,a){"use strict";a.d(t,"a",(function(){return j})),a.d(t,"b",(function(){return v}));var n=a(0),r=a.n(n),l=a(204),c=a(199),i=a(55),o=a.n(i),p=37,u=39;var s=function(e){var t=e.lazy,a=e.block,i=e.defaultValue,s=e.values,b=e.groupId,d=e.className,m=Object(l.a)(),f=m.tabGroupChoices,h=m.setTabGroupChoices,j=Object(n.useState)(i),O=j[0],y=j[1],g=n.Children.toArray(e.children);if(null!=b){var v=f[b];null!=v&&v!==O&&s.some((function(e){return e.value===v}))&&y(v)}var N=function(e){y(e),null!=b&&h(b,e)},k=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":a},d)},s.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===t,className:Object(c.a)("tabs__item",o.a.tabItem,{"tabs__item--active":O===t}),key:t,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case u:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(k,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},a)}))),t?Object(n.cloneElement)(g.filter((function(e){return e.props.value===O}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==O})}))))};var b=function(e){var t=e.children,a=e.hidden,n=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:n},t)},d=a(205),m=a(56),f=a.n(m),h=function(e){var t=e.children,a=e.language;return r.a.createElement("div",{className:f.a.code},r.a.createElement(d.a,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};var j=function(e){var t=e.tregx,a=e.php;return r.a.createElement(s,{defaultValue:"t-regx",values:O(t,a)},t&&r.a.createElement(b,{value:"t-regx"},r.a.createElement(h,null,t)),a&&r.a.createElement(b,{value:"php"},r.a.createElement(h,null,a)))};function O(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}var y=a(57),g=a.n(y),v=function(e){var t=e.text,a=e.children;return r.a.createElement("div",{className:g.a.result},r.a.createElement(h,{language:t?"text":"php"},a))}}}]);