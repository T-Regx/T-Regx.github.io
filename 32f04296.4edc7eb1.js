(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{189:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return f}));var n=a(0),c=a.n(n),i=a(192),r=a(193),o=a(194),l=a(4),h=a(190),p=a(48),b=a.n(p),s=function(e){function t(){return e.apply(this,arguments)||this}return Object(l.a)(t,e),t.prototype.render=function(){return c.a.createElement("div",{className:b.a.code},c.a.createElement(h.a,{className:"language-"+this.language},this.code))},Object(o.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(c.a.Component),d=function(e){var t=e.tregx,a=e.php,n=[t?{label:"T-Regx",value:"t-regx"}:{},a?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return c.a.createElement(i.a,{defaultValue:"t-regx",values:n},t&&c.a.createElement(r.a,{value:"t-regx"},c.a.createElement(s,null,t)),a&&c.a.createElement(r.a,{value:"php"},c.a.createElement(s,null,a)))},m=a(49),u=a.n(m),f=function(e){var t=e.text,a=e.children;return c.a.createElement("div",{className:u.a.result},c.a.createElement(s,{language:t?"text":"php"},a))}},92:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return h})),a.d(t,"default",(function(){return b}));var n=a(2),c=a(6),i=(a(0),a(188)),r=a(189),o={id:"match-for-each",title:"Iterate matches (For each)"},l={unversionedId:"match-for-each",id:"match-for-each",isDocsHomePage:!1,title:"Iterate matches (For each)",description:"Use forEach() to easily iterate matched occurrences with your callback. You can call forEach() with a callback,",source:"@site/../docs/match-for-each.mdx",slug:"/match-for-each",permalink:"/docs/match-for-each",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"Optional matches (Find first)",permalink:"/docs/match-find-first"},next:{title:"Map occurrences",permalink:"/docs/match-map"}},h=[{value:"Vanilla PHP <code>foreach</code>",id:"vanilla-php-foreach",children:[{value:"Other iterable entities",id:"other-iterable-entities",children:[]}]}],p={rightToc:h};function b(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"forEach()")," to easily iterate matched occurrences with your callback. You can call ",Object(i.b)("inlineCode",{parentName:"p"},"forEach()")," with a callback,\nthat's invoked with ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail"))," details just like ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(i.b)("inlineCode",{parentName:"a"},"first()"))," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(i.b)("inlineCode",{parentName:"a"},"findFirst()")),"."),Object(i.b)(r.a,{tregx:"// highlight-next-line\npattern('\\w+')->match('Apples are cool')->forEach(function (Detail $match) {\n    echo \"I matched $match, \";\n});",php:"// highlight-next-line\npreg::match_all('/\\w+/', 'Apples are cool', $matches);\n// highlight-next-line\narray_map(function (string $text) {\n    echo \"I matched $text, \";\n}, $matches[0]);",mdxType:"CodeTabs"}),Object(i.b)(r.b,{text:!0,mdxType:"Result"},"I matched Apples, I matched are, I matched cool, "),Object(i.b)("p",null,"Using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail"))," you can get detailed information such as ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(i.b)("inlineCode",{parentName:"a"},"offset()")),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#ordinal-value-index"}),Object(i.b)("inlineCode",{parentName:"a"},"index()"))," etc."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"forEach()")," accepts ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail"))," details, but ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(i.b)("inlineCode",{parentName:"a"},"Detail"))," can be cast to ",Object(i.b)("inlineCode",{parentName:"p"},"(string)"),"."))),Object(i.b)("h2",{id:"vanilla-php-foreach"},"Vanilla PHP ",Object(i.b)("inlineCode",{parentName:"h2"},"foreach")),Object(i.b)("p",null,"You can also use the result of ",Object(i.b)("inlineCode",{parentName:"p"},"pattern()->match()")," directly in PHP ",Object(i.b)("inlineCode",{parentName:"p"},"foreach")," loop."),Object(i.b)(r.a,{tregx:"// highlight-next-line\nforeach (pattern('\\w+')->match('Apples are cool') as $match) {\n    echo \"I matched \" . $match->text() . \", \";\n};",php:"// highlight-next-line\npreg::match_all('/\\w+/', 'Apples are cool', $matches);\n// highlight-next-line\nforeach ($matches[0] as $text) {\n    echo \"I matched $text, \";\n}",mdxType:"CodeTabs"}),Object(i.b)(r.b,{text:!0,mdxType:"Result"},"I matched Apples, I matched are, I matched cool, "),Object(i.b)("h3",{id:"other-iterable-entities"},"Other iterable entities"),Object(i.b)("p",null,"In the further chapters you will learn about inline ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-offsets#using-inline-offsets-method"}),Object(i.b)("inlineCode",{parentName:"a"},"offsets()")),", ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-group"}),Object(i.b)("inlineCode",{parentName:"a"},"group(string|int)"))," and ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-as-int"}),Object(i.b)("inlineCode",{parentName:"a"},"asInt()"))," methods in detail,\nbut for now, you only need to know that all of those entities are iterable with PHP ",Object(i.b)("inlineCode",{parentName:"p"},"foreach"),"."),Object(i.b)(r.a,{tregx:"// highlight-next-line\nforeach (pattern('\\d+')->match('127.0.0.1')->asInt() as $digit) {\n    return $digit; // 127\n}",php:"// highlight-next-line\npreg_match_all('/\\d+/', '127.0.0.1', $matches);\n// highlight-next-line\nforeach ($matches[0] as $text) {\n    $digit = Integer::parse($text);\n    return $digit; // 127;\n}",mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"127"),Object(i.b)("p",null,"or"),Object(i.b)(r.a,{tregx:"// highlight-next-line\nforeach (pattern('(\\d+)')->match('127.0.0.1')->group(1) as $group) {\n    return $group->text(); // '127'\n}",php:"// highlight-next-line\npreg_match_all('/(\\d+)/', '127.0.0.1', $matches);\n// highlight-next-line\nforeach ($matches[1] as $group) {\n    return $group; // '127';\n}",mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"'127'"),Object(i.b)("p",null,"Of course, if you call ",Object(i.b)("inlineCode",{parentName:"p"},"->all()")," on any of the given entities above you will receive an ",Object(i.b)("inlineCode",{parentName:"p"},"array"),", which is of course\nalso iterable by PHP ",Object(i.b)("inlineCode",{parentName:"p"},"foreach"),"."),Object(i.b)(r.a,{tregx:"// highlight-next-line\nforeach (pattern('\\d+')->match('127.0.0.1')->all() as $text) {\n    return $text; // '127'\n}",php:"// highlight-next-line\npreg_match_all('/\\d+/', '127.0.0.1', $matches);\n// highlight-next-line\nforeach ($matches[0] as $text) {\n    return $text; // '127';\n}",mdxType:"CodeTabs"}),Object(i.b)(r.b,{mdxType:"Result"},"'127'"),Object(i.b)("p",null,"Although, instead of ",Object(i.b)("inlineCode",{parentName:"p"},"all()")," it's possible to chain the entities with one of the more high-level T-Regx methods, such as:\n",Object(i.b)("inlineCode",{parentName:"p"},"forEach()"),"/",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(i.b)("inlineCode",{parentName:"a"},"map()")),"/",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-flat-map"}),Object(i.b)("inlineCode",{parentName:"a"},"flatMap()"))," etc."))}b.isMDXComponent=!0}}]);