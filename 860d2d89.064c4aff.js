(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{156:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return b})),n.d(a,"rightToc",(function(){return i})),n.d(a,"default",(function(){return o}));n(215);var t=n(207),l=n(210),r=n(211);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}const b={id:"replace-with",title:"Replace with a constant value"},i=[{value:"Limits",id:"limits",children:[{value:"First occurrence - <code>first()</code>",id:"first-occurrence---first",children:[]},{value:"All occurrences - <code>all()</code>",id:"all-occurrences---all",children:[]},{value:"Limited occurrences - <code>only()</code>",id:"limited-occurrences---only",children:[]}]},{value:"Regular expression references",id:"regular-expression-references",children:[]},{value:"Intentional references",id:"intentional-references",children:[]}],p={rightToc:i},s="wrapper";function o({components:e,...a}){return Object(t.b)(s,c({},p,a,{components:e,mdxType:"MDXLayout"}),Object(t.b)("p",null,"After ",Object(t.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(t.b)("p",null,"Specifying limits is done to relieve you from ",Object(t.b)("a",c({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(t.b)("strong",{parentName:"a"},"brain strain"))," - so you can immediately\nrecognize author's intentions."),Object(t.b)("h2",{id:"limits"},"Limits"),Object(t.b)("p",null,"Using ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," is semantically identical to passing ",Object(t.b)("inlineCode",{parentName:"p"},"$limit")," argument to ",Object(t.b)("inlineCode",{parentName:"p"},"preg::replace()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"preg::replace_callback()"),"."),Object(t.b)("p",null,"Neither of methods ",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," modify the subject if it wasn't matched by a pattern."),Object(t.b)("h3",{id:"first-occurrence---first"},"First occurrence - ",Object(t.b)("inlineCode",{parentName:"h3"},"first()")),Object(t.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->with('___');\n"))),Object(t.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg_replace('/[A-Z][a-z]+/', '___', $subject, 1);\n")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, Norway and Denmark'\n")),Object(t.b)("h3",{id:"all-occurrences---all"},"All occurrences - ",Object(t.b)("inlineCode",{parentName:"h3"},"all()")),Object(t.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->with('___');\n"))),Object(t.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject);\n")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, ___ and ___'\n")),Object(t.b)("h3",{id:"limited-occurrences---only"},"Limited occurrences - ",Object(t.b)("inlineCode",{parentName:"h3"},"only()")),Object(t.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->with('___');\n"))),Object(t.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace('/[A-Z][a-z]+/', '___', $subject, 2);\n")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: ___, ___ and Denmark'\n")),Object(t.b)("hr",null),Object(t.b)("p",null,"Read on to learn more about replacing with ",Object(t.b)("a",c({parentName:"p"},{href:"/docs/replace-callback"}),"a callback"),"."),Object(t.b)("h2",{id:"regular-expression-references"},"Regular expression references"),Object(t.b)("p",null,"Normally, had you passed a replacement to ",Object(t.b)("inlineCode",{parentName:"p"},"preg_replace()"),", that contains a backslash or a dollar sign followed by a\nnumber (eg. ",Object(t.b)("inlineCode",{parentName:"p"},"\\1")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$2"),") - that reference would be replaced by a corresponding capturing group (or by an empty string,\nif the group wasn't matched)."),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n")),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-text"}),"I have <15> and <192>\n")),Object(t.b)("p",null,"Resolving such references won't happen with T-Regx."),Object(t.b)("p",null,"This is done to relieve you from the ",Object(t.b)("a",c({parentName:"p"},{href:"/docs/overview#brain-strain"}),Object(t.b)("strong",{parentName:"a"},"brain strain")),". A programmer should be able to merely\nreplace a string with a constant value without ",Object(t.b)("a",c({parentName:"p"},{href:"/docs/overview#brain-strain"}),"cognitive load")," about possible ",Object(t.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$")," hiding somewhere."),Object(t.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->with('<$1>');\n"))),Object(t.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// in T-Regx, special function is used to quote all references\n")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-text"}),"I have <$1> and <$1>\n")),Object(t.b)("p",null,"You can be sure, what's put into ",Object(t.b)("inlineCode",{parentName:"p"},"with()")," will certainly be present unchanged in your final result."),Object(t.b)("p",null,"Some replacement strings containing a backslash or a dollar sign (like file system paths, URL addresses or even user input)\nmight interfere with logic and cause bugs that are very hard to find."),Object(t.b)("blockquote",null,Object(t.b)("p",{parentName:"blockquote"},"Neither of types of references are resolved: ",Object(t.b)("inlineCode",{parentName:"p"},"$12"),", ",Object(t.b)("inlineCode",{parentName:"p"},"\\12")," nor ",Object(t.b)("inlineCode",{parentName:"p"},"${12}"),".")),Object(t.b)("h2",{id:"intentional-references"},"Intentional references"),Object(t.b)("p",null,"If you, however, would like to intentionally use regular expression references and have validated your input\nagainst ",Object(t.b)("em",{parentName:"p"},"an unexpected")," ",Object(t.b)("inlineCode",{parentName:"p"},"\\")," or ",Object(t.b)("inlineCode",{parentName:"p"},"$")," - feel free to use ",Object(t.b)("inlineCode",{parentName:"p"},"withReferences()")," which ",Object(t.b)("strong",{parentName:"p"},"will")," resolve replacement references."),Object(t.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('(\\d+)cm')->replace('I have 15cm and 192cm')->all()->withReferences('<$1>');\n"))),Object(t.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-php"}),"preg::replace('/(\\d+)cm/', '<$1>', 'I have 15cm and 192cm');\n//                            \u2191\n// using withReferences(), back references are preserved\n")))),Object(t.b)("pre",null,Object(t.b)("code",c({parentName:"pre"},{className:"language-text"}),"I have <15> and <192>\n")))}o.isMDXComponent=!0},210:function(e,a,n){"use strict";var t=n(0),l=n.n(t),r=n(212),c=n.n(r);a.a=function(e){const{block:a,children:n,defaultValue:r,values:b}=e,[i,p]=Object(t.useState)(r);return l.a.createElement("div",null,l.a.createElement("ul",{className:c()("tabs",{"tabs--block":a})},b.map(({value:e,label:a})=>l.a.createElement("li",{className:c()("tab-item",{"tab-item--active":i===e}),key:e,onClick:()=>p(e)},a))),l.a.createElement("div",{className:"margin-vert--md"},t.Children.toArray(n).filter(e=>e.props.value===i)[0]))}},211:function(e,a,n){"use strict";var t=n(0),l=n.n(t);a.a=function(e){return l.a.createElement("div",null,e.children)}}}]);