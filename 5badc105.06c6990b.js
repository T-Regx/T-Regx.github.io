/*! For license information please see 5badc105.06c6990b.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{152:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(1),o=n(6),r=(n(0),n(196)),c=n(199),i=n(198),l={id:"replace-by-group",title:"Replace by group"},p={id:"replace-by-group",title:"Replace by group",description:"Method `replace()->by()->group()` can be used when you would just like to replace a whole match by one of its capturing group,",source:"@site/..\\docs\\replace-by-group.md",permalink:"/docs/replace-by-group",lastUpdatedAt:1584222424,sidebar:"docs",previous:{title:"Replace with callback",permalink:"/docs/replace-callback"},next:{title:"Replace by map",permalink:"/docs/replace-by-map"}},b=[{value:"Overview",id:"overview",children:[]},{value:"Unmatched group",id:"unmatched-group",children:[{value:"<code>orIgnore()</code>",id:"orignore",children:[]},{value:"<code>orEmpty()</code>",id:"orempty",children:[]},{value:"<code>orReturn(string)</code>",id:"orreturnstring",children:[]},{value:"<code>orElse(callable)</code>",id:"orelsecallable",children:[]},{value:"<code>orThrow()</code>",id:"orthrow",children:[]}]},{value:"Identity",id:"identity",children:[]}],m={rightToc:b};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"replace()->by()->group()")," can be used when you would just like to replace a whole match by one of its capturing group,\noptionally handling what should happen when a group is not matched."),Object(r.b)("p",null,"This is, in fact, a shorthand for a rather common usage of ",Object(r.b)("inlineCode",{parentName:"p"},"callback()")," with a function replacing by a capturing\ngroup - ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/replace-by-group#identity"}),"Scroll down to see an example"),"."),Object(r.b)("p",null,"Apart from replacing by an inline group, you can also retrieve matched capturing groups with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-group"}),"inline groups"),"."),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"There are several URL addresses in ",Object(r.b)("inlineCode",{parentName:"p"},"$links")," variable. Given a regular expression matching a URL, with a group\ncapturing the URL domain, you can easily leave off only the domain in the matched links:"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orThrow();\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)#', function ($match) {\n    return $match['domain'];\n}, $links);\n\n// This code is just a simplification.\n// The PHP equivalent is actually a bit more complicated. Please, see PHP snippets below.\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, socket, facebook, t-regx :)'\n")),Object(r.b)("p",null,"Each matched link was replaced with ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," capturing group. In this case, ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," capturing group is not an\noptional group (it's always going to be matched, when the whole pattern is matched), so the matched occurrence is\nalways going to be replaced with it."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Of course, ",Object(r.b)("inlineCode",{parentName:"p"},"NonexistentGroupException")," is thrown when ",Object(r.b)("inlineCode",{parentName:"p"},"by()->group()")," is used with a non-existent group. Likewise,\n",Object(r.b)("inlineCode",{parentName:"p"},"\\InvalidArgumentException")," is thrown for a malformed group, e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"-2")," or ",Object(r.b)("inlineCode",{parentName:"p"},'"2name"'),".")),Object(r.b)("h2",{id:"unmatched-group"},"Unmatched group"),Object(r.b)("p",null,"How do you handle unmatched/optional groups?"),Object(r.b)("p",null,"For example, a group ",Object(r.b)("inlineCode",{parentName:"p"},"(?<name>\\w+)?")," is optional. For an occurrence with the optional ",Object(r.b)("inlineCode",{parentName:"p"},"'name'")," group that happened not\nto be matched, you can chose either to ignore the replacement (simply don't perform any replace in the match),\nreplace with a default or an empty string, or call a producer to return what should the match be replaced with."),Object(r.b)("p",null,"You can also chose to throw an exception, if the unmatched group is not supposed to be optional, to ensure integrity."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"orIgnore()")," - leaves the match unchanged - doesn't replace the match, if the group itself is not matched"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"orEmpty()")," - matched occurrence is replaced with an empty string"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"orReturn(string)")," - match is replaced with the given ",Object(r.b)("inlineCode",{parentName:"li"},"string")," argument"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"orElse(callable)")," - uses a callback with ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," argument, in order to evaluate a replacement"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"orThrow()")," - throws a default or a custom exception, just like ",Object(r.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/match-find-first"}),"findFirst()->orThrow()"))),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("inlineCode",{parentName:"p"},"orEmpty()")," is the most performance-light method, because it uses ",Object(r.b)("inlineCode",{parentName:"p"},"preg_replace()"),", whereas ",Object(r.b)("inlineCode",{parentName:"p"},"orReturn()"),", ",Object(r.b)("inlineCode",{parentName:"p"},"orIgnore()"),",\n",Object(r.b)("inlineCode",{parentName:"p"},"orElse()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"orThrow()")," use ",Object(r.b)("inlineCode",{parentName:"p"},"preg_replace_callback()"),".")),Object(r.b)("hr",null),Object(r.b)("p",null,"Now, for the sake of this example, let's say a domain is an optional part of an URL address. Below, you'll find 4\ncode snippets illustrating the usage of each of those:"),Object(r.b)("h3",{id:"orignore"},Object(r.b)("inlineCode",{parentName:"h3"},"orIgnore()")),Object(r.b)("p",null,"Matched links with matched ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare simply left as they were (ignored):"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orIgnore();\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return $match[0];\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return $match[0];\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, http://.io, facebook, https://.com :)'\n")),Object(r.b)("p",null,"Description:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Match ",Object(r.b)("inlineCode",{parentName:"li"},"www.google.com")," was replaced with the matched occurrence of it's capturing group - ",Object(r.b)("inlineCode",{parentName:"li"},"google")),Object(r.b)("li",{parentName:"ul"},"Match ",Object(r.b)("inlineCode",{parentName:"li"},"facebook.com")," was replaced with the matched occurrence of it's capturing group - ",Object(r.b)("inlineCode",{parentName:"li"},"facebook")),Object(r.b)("li",{parentName:"ul"},"Matches ",Object(r.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(r.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(r.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare left unchanged (ignored), in this case.")),Object(r.b)("h3",{id:"orempty"},Object(r.b)("inlineCode",{parentName:"h3"},"orEmpty()")),Object(r.b)("p",null,"Matched links with matched ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare replaced with an empty string:"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orEmpty();\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return '';\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    // Check between unmatched and matched-empty is unnecessary\n    return $match['domain'];\n}, $links);\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, , facebook,  :)'\n")),Object(r.b)("p",null,"Description:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Matches ",Object(r.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(r.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(r.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare replaced with an empty string, in this case.")),Object(r.b)("h3",{id:"orreturnstring"},Object(r.b)("inlineCode",{parentName:"h3"},"orReturn(string)")),Object(r.b)("p",null,"Matched links with matched ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare replaced with a given parameter string:"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orReturn('UNKNOWN');\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return 'UNKNOWN';\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return 'UNKNOWN';\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, UNKNOWN, facebook, UNKNOWN :)'\n")),Object(r.b)("p",null,"Description:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Matches ",Object(r.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(r.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(r.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so those matches\nare replaced with a given ",Object(r.b)("inlineCode",{parentName:"li"},"'UNKNOWN'")," string, in this case.")),Object(r.b)("h3",{id:"orelsecallable"},Object(r.b)("inlineCode",{parentName:"h3"},"orElse(callable)")),Object(r.b)("p",null,"Matched links with matched ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," group are replaced with it. Links without the optional group matched, however,\nare then passed to the producer, which result is then replaced in place of the link:"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orElse(function (Match $match) {\n        return \"Not found **$match**\";\n    });\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://.io, facebook.com, https://.com :)';\n\n$producer = function (array $match) {\n    return \"Not found **{$match[0]}**\";\n};\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) use ($producer) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            return $producer($match);\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            return $producer($match);\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, Not found **http://.io**, facebook, Not found **https://.com** :)'\n")),Object(r.b)("p",null,"Description:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Matches ",Object(r.b)("inlineCode",{parentName:"li"},"http://.io")," and ",Object(r.b)("inlineCode",{parentName:"li"},"https://.com")," were matched, but the capturing group ",Object(r.b)("inlineCode",{parentName:"li"},"'domain'")," inside wasn't, so callback\nfunction is called with ",Object(r.b)("inlineCode",{parentName:"li"},"Match")," details (first with ",Object(r.b)("inlineCode",{parentName:"li"},"http://.io"),", and then with ",Object(r.b)("inlineCode",{parentName:"li"},"https://.com"),"), and the link is replaced\nwith a result of that function.")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Even this simple T-Regx snippet is represented as a massive PHP code. Using ",Object(r.b)("inlineCode",{parentName:"p"},"Match.index()")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Match.offset()")," when\nreplacing would make PHP code even more complex, introducing counting variables and ",Object(r.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE"),"..")),Object(r.b)("h3",{id:"orthrow"},Object(r.b)("inlineCode",{parentName:"h3"},"orThrow()")),Object(r.b)("p",null,"You can either call this method without parameters, or with your custom exception class name (just like ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(r.b)("inlineCode",{parentName:"a"},"findFirst()"))," parameter):"),Object(r.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(r.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orThrow(MyCustomException::class);\n"))),Object(r.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"$links = 'My links are: www.google.com, http://socket.io, facebook.com, https://t-regx.com :)';\n\nreturn preg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)?\\.(com|io)#', function ($match) {\n    validateGroupName('domain');\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            throw new MyCustomException();\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (!validateGroupMatched('domain', $match)) {\n            throw new MyCustomException();\n        }\n    }\n    return $match['domain'];\n}, $links);\n")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"'My links are: google, socket, facebook, t-regx :)'\n")),Object(r.b)("p",null,"Of course, for subject ",Object(r.b)("inlineCode",{parentName:"p"},"$links")," equal to ",Object(r.b)("inlineCode",{parentName:"p"},"'My links are: www..com'")," (optional group ",Object(r.b)("inlineCode",{parentName:"p"},"'domain'")," is unmatched) - ",Object(r.b)("inlineCode",{parentName:"p"},"MyCustomException")," would be thrown."),Object(r.b)("h2",{id:"identity"},"Identity"),Object(r.b)("p",null,"As mentioned, ",Object(r.b)("inlineCode",{parentName:"p"},"replace()->by()->group()")," is just a short-hand for ",Object(r.b)("inlineCode",{parentName:"p"},"replace()->callback()"),"."),Object(r.b)("p",null,"The below ",Object(r.b)("inlineCode",{parentName:"p"},"by()->group()")," code:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"pattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->by()->group('domain')->orXXX();\n")),Object(r.b)("p",null,"is identical to:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"pattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')->replace($links)\n    ->all()\n    ->callback(function (Match $match) {\n        return $match->group('domain')->orXXX();\n    });\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},Object(r.b)("inlineCode",{parentName:"p"},"by()->group()")," is the most performance-light method, because it doesn't require creating ",Object(r.b)("inlineCode",{parentName:"p"},"Match")," details, for the sake\nof ",Object(r.b)("inlineCode",{parentName:"p"},"callback()"),".")))}s.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),b=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},m=function(e){var t=b(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=b(n),u=a,d=m["".concat(c,".").concat(u)]||m[u]||s[u]||r;return n?o.a.createElement(d,i({ref:t},p,{components:n})):o.a.createElement(d,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,c=new Array(r);c[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var p=2;p<r;p++)c[p]=n[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},197:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var r=typeof a;if("string"===r||"number"===r)e.push(a);else if(Array.isArray(a)&&a.length){var c=o.apply(null,a);c&&e.push(c)}else if("object"===r)for(var i in a)n.call(a,i)&&a[i]&&e.push(i)}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(a=function(){return o}.apply(t,[]))||(e.exports=a)}()},198:function(e,t,n){"use strict";var a=n(0),o=n.n(a);t.a=function(e){return o.a.createElement("div",null,e.children)}},199:function(e,t,n){"use strict";var a=n(0),o=n.n(a),r=n(200);var c=function(){return Object(a.useContext)(r.a)},i=n(197),l=n.n(i),p=n(93),b=n.n(p);const m=37,s=39;t.a=function(e){const{block:t,children:n,defaultValue:r,values:i,groupId:p}=e,{tabGroupChoices:u,setTabGroupChoices:d}=c(),[h,g]=Object(a.useState)(r);if(null!=p){const e=u[p];null!=e&&e!==h&&g(e)}const O=e=>{g(e),null!=p&&d(p,e)},j=[];return o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:l()("tabs",{"tabs--block":t})},i.map(({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":h===e,className:l()("tab-item",b.a.tabItem,{"tab-item--active":h===e}),key:e,ref:e=>j.push(e),onKeyDown:e=>((e,t,n)=>{switch(n.keyCode){case s:((e,t)=>{const n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()})(e,t);break;case m:((e,t)=>{const n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()})(e,t)}})(j,e.target,e),onFocus:()=>O(e),onClick:()=>O(e)},t))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter(e=>e.props.value===h)[0]))}},200:function(e,t,n){"use strict";var a=n(0);const o=Object(a.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});t.a=o}}]);