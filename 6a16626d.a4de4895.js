(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{144:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return i})),a.d(n,"rightToc",(function(){return c})),a.d(n,"default",(function(){return s}));a(215);var t=a(207),o=a(210),l=a(211);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e}).apply(this,arguments)}const i={id:"replace-by-map",title:"Replace by map"},c=[{value:"Standard map",id:"standard-map",children:[{value:"Superfluous matches",id:"superfluous-matches",children:[]},{value:"Ignored replacements",id:"ignored-replacements",children:[]}]},{value:"Groups",id:"groups",children:[]}],p={rightToc:c},m="wrapper";function s({components:e,...n}){return Object(t.b)(m,r({},p,n,{components:e,mdxType:"MDXLayout"}),Object(t.b)("p",null,"There are cases when you have to use more than one replacement, but you also don't need ",Object(t.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(t.b)("inlineCode",{parentName:"a"},"Match"))," details or\nany replacement logic, really, so both ",Object(t.b)("inlineCode",{parentName:"p"},"with()")," and ",Object(t.b)("inlineCode",{parentName:"p"},"callback()")," are a little unfit."),Object(t.b)("p",null,"Replacing by map allows T-Regx to save a little performance overhead, by not creating ",Object(t.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(t.b)("inlineCode",{parentName:"a"},"Match"))," object."),Object(t.b)("h2",{id:"standard-map"},"Standard map"),Object(t.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npattern('\\b\\w{3}\\b')->replace($message)->all()->by()->map([\n    'mp3' => 'Audio file',\n    'mp4' => 'Video file',\n    'gif' => 'Animation'\n]);\n"))),Object(t.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npreg::replace_callback('/\\b\\w{3}\\b/', function ($match) {\n    $map = [\n        'mp3' => 'Audio file',\n        'mp4' => 'Video file',\n        'gif' => 'Animation'\n    ];\n    if (!array_key_exists($match[0], $map)) {\n        throw new MissingReplacementKeyException();\n    }\n    $result = $map[$match[0]];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $message);\n")))),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-text"}),'My words: "Audio file", "Video file", "Animation"\n')),Object(t.b)("p",null,"And of course ",Object(t.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(t.b)("inlineCode",{parentName:"p"},"only(int)")," modifiers are taken into account."),Object(t.b)("h3",{id:"superfluous-matches"},"Superfluous matches"),Object(t.b)("p",null,"Normally, had you found a match that's not present in your map - ",Object(t.b)("inlineCode",{parentName:"p"},"MissingReplacementKeyException")," would be thrown\n(as long as ",Object(t.b)("inlineCode",{parentName:"p"},"gif")," is matched by your pattern, of course):"),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$message = 'My words: \"mp3\", \"mp4\", \"gif\"';\n\npattern('\\w{3}')->replace($message)->all()->by()->map([\n   'mp3'   => 'Audio file',\n   'mp4'   => 'Video file'\n  // 'gif'  => 'Animation'\n]);\n")),Object(t.b)("p",null,"If you don't need to specify all your possible ",Object(t.b)("inlineCode",{parentName:"p"},"[match => replacement]")," pairs, you should use one of the below ",Object(t.b)("inlineCode",{parentName:"p"},"mapIfExists()"),"."),Object(t.b)("h3",{id:"ignored-replacements"},"Ignored replacements"),Object(t.b)("p",null,"With ",Object(t.b)("inlineCode",{parentName:"p"},"mapIfExists()")," - superfluous occurrences are left unchanged:"),Object(t.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$message = \"Extensions: mp3, mp4, jpg, jpeg, png, gif\";\n\npattern('\\b\\w{3,4}\\b')->replace($message)->all()->by()->mapIfExists([\n   'mp3' => 'Audio',\n   'gif' => 'Animation'\n]);\n"))),Object(t.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$message = \"Extensions: mp3, mp4, jpg, jpeg, png, gif\";\n\npreg::replace_callback('/\\b\\w{3}\\b/', function ($match) {\n    $map = [\n        'mp3' => 'Audio',\n        'gif' => 'Animation'\n    ];\n    if (!array_key_exists($match[0], $map)) {\n        return $match[0];\n    }\n    $result = $map[$match[0]];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $message);\n")))),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-text"}),"Extensions: Audio, mp4, jpg, jpeg, png, Animation\n")),Object(t.b)("h2",{id:"groups"},"Groups"),Object(t.b)("p",null,"Resolving a replacement based on a ",Object(t.b)("strong",{parentName:"p"},"whole match")," however, is both uncommon and unpractical. It's much more elastic to resolve\nit based on a specific capturing group, using ",Object(t.b)("inlineCode",{parentName:"p"},"by()->group()->map()"),":"),Object(t.b)(o.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(t.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$links = 'Links: www.google.com, http://socket.io, facebook.com, https://t-regx.com';\n\npattern('(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)')\n    ->replace($links)\n    ->all()\n    ->by()\n    ->group('domain')\n    ->map([\n       'google'   => 'Search Engine',\n       'socket'   => 'Documentation',\n       'facebook' => 'Social Portal',\n       't-regx'   => 'Documentation',\n    ])\n    ->orThrow();\n"))),Object(t.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-php"}),"$links = 'Links: www.google.com, http://socket.io, facebook.com, https://t-regx.com';\n\npreg::replace_callback('#(https?://)?(www\\.)?(?<domain>[\\w-]+)\\.(com|io)#', function (array $match) {\n    // possible invalid group, e.g. \"2group\" or -2\n    validateGroupName('domain');\n\n    $group = $match['domain'];\n    if (!array_key_exists('domain', $match)) {\n        // group is either un-matched or non-existent\n        if (validateGroupExists('domain', $match)) {\n            $group = $match['domain'];\n        } else {\n            throw new NonexistentGroupException('domain');\n        }\n    }\n    if ($match['domain'] === '') {\n        // group is either un-matched or matched an empty string\n        if (validateGroupMatched('domain', $match)) {\n            $group = $match['domain'];\n        } else {\n            throw new GroupNotMatchedException();\n        }\n    }\n\n    $map = [\n        'google'   => 'Search Engine',\n        'socket'   => 'Documentation',\n        'facebook' => 'Social Portal',\n        't-regx'   => 'Documentation',\n    ];\n    if (!array_key_exists($group, $map)) {\n        throw new MissingReplacementKeyException();\n    }\n    $result = $map[$group];\n    if (!is_string($result)) {\n        throw new InvalidArgumentException();\n    }\n    return $result;\n}, $links);\n")))),Object(t.b)("pre",null,Object(t.b)("code",r({parentName:"pre"},{className:"language-text"}),"Links: Search Engine, Documentation, Social Portal, Documentation\n")))}s.isMDXComponent=!0},210:function(e,n,a){"use strict";var t=a(0),o=a.n(t),l=a(212),r=a.n(l);n.a=function(e){const{block:n,children:a,defaultValue:l,values:i}=e,[c,p]=Object(t.useState)(l);return o.a.createElement("div",null,o.a.createElement("ul",{className:r()("tabs",{"tabs--block":n})},i.map(({value:e,label:n})=>o.a.createElement("li",{className:r()("tab-item",{"tab-item--active":c===e}),key:e,onClick:()=>p(e)},n))),o.a.createElement("div",{className:"margin-vert--md"},t.Children.toArray(a).filter(e=>e.props.value===c)[0]))}},211:function(e,n,a){"use strict";var t=a(0),o=a.n(t);n.a=function(e){return o.a.createElement("div",null,e.children)}}}]);