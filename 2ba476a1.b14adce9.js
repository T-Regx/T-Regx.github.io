(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{116:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"rightToc",(function(){return b})),t.d(a,"default",(function(){return i}));t(211);var n=t(207),c=t(208),l=t(209);function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}const o={id:"match-offsets",title:"Match offsets"},b=[{value:"Using <code>Match</code> details",id:"using-match-details",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method",children:[{value:"Many",id:"many",children:[]},{value:"One",id:"one",children:[]}]},{value:"Group offsets",id:"group-offsets",children:[{value:"Using <code>Match</code> details",id:"using-match-details-1",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method-1",children:[]}]}],s={rightToc:b},p="wrapper";function i({components:e,...a}){return Object(n.b)(p,r({},s,a,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,"There are several ways to read offsets of your matched occurrences and your capturing groups."),Object(n.b)("h2",{id:"using-match-details"},"Using ",Object(n.b)("inlineCode",{parentName:"h2"},"Match")," details"),Object(n.b)("p",null,"If you use ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," details object (like the one passed to ",Object(n.b)("inlineCode",{parentName:"p"},"first()"),", ",Object(n.b)("inlineCode",{parentName:"p"},"forEach()")," or ",Object(n.b)("inlineCode",{parentName:"p"},"map()")," callback) you can just use\n",Object(n.b)("inlineCode",{parentName:"p"},"offset()")," method."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\d+')->match('I was born in 1996')->first(function (Match $match) {\n    return 'Match was found at ' . $match->offset();\n});\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"preg::match_all('/\\d+/', 'I was born in 1996', $match, PREG_OFFSET_CAPTURE);\nreturn 'Match was found at ' . $match[0][0][1];\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"'Match was found at 14'\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Remember that ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(n.b)("inlineCode",{parentName:"a"},"offset()"))," is UTF-8 safe and returns offsets in characters, not bytes.\nFor bytes, consider using ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(n.b)("inlineCode",{parentName:"a"},"byteOffset()"))," method.")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Use ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(n.b)("inlineCode",{parentName:"a"},"offset()"))," with methods like ",Object(n.b)("a",r({parentName:"p"},{href:"https://www.php.net/manual/en/function.mb-substr.php"}),Object(n.b)("inlineCode",{parentName:"a"},"mb_substr()")),", and ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(n.b)("inlineCode",{parentName:"a"},"byteOffset()"))," with methods like ",Object(n.b)("a",r({parentName:"p"},{href:"https://www.php.net/manual/en/function.substr.php"}),Object(n.b)("inlineCode",{parentName:"a"},"substr()")),".")),Object(n.b)("h2",{id:"using-inline-offsets-method"},"Using inline ",Object(n.b)("inlineCode",{parentName:"h2"},"offsets()")," method"),Object(n.b)("p",null,"Use inline methods to simply return the offsets - when there is no need for using ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," details or any other operations."),Object(n.b)("h3",{id:"many"},"Many"),Object(n.b)("p",null,"If you only want to get offsets of your matches, use ",Object(n.b)("inlineCode",{parentName:"p"},"offsets()->all()"),"."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"return pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, on May 12\")->offsets()->all();\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, on May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]);\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"[4, 32, 45]\n")),Object(n.b)("p",null,"You can also limit your matches."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, on May 12\")->offsets()->only(2);\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, on May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_slice(array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]), 0, 2);\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"[4, 32]\n")),Object(n.b)("h3",{id:"one"},"One"),Object(n.b)("p",null,"To only get offset of the first occurrence of a matched pattern, call ",Object(n.b)("inlineCode",{parentName:"p"},"offsets()->first()"),"."),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('\\d+')->match(\"I was born in 1999\")->offsets()->first();\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"preg::match('/[0-9]+/', \"I was born in 1999\", $match, PREG_OFFSET_CAPTURE);\nif ($match) {\n    return $match[0][1];\n}\nthrow new SubjectNotMatchedException();\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"14\n")),Object(n.b)("p",null,"As any other ",Object(n.b)("inlineCode",{parentName:"p"},"first()")," method, it throws ",Object(n.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't matched by your pattern."),Object(n.b)("h2",{id:"group-offsets"},"Group offsets"),Object(n.b)("p",null,"In a similar manner you can get offsets of your capturing groups, either using ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," details or an inline method."),Object(n.b)("p",null,"These two snippets below are equal to each other."),Object(n.b)("h3",{id:"using-match-details-1"},"Using ",Object(n.b)("inlineCode",{parentName:"h3"},"Match")," details"),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->first(function (Match $match) {\n    return $match->group('capital')->offset();\n});\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    } else {\n        throw new NonexistentGroupException('capital');\n    }\n}\nthrow new SubjectNotMatchedException();\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"11\n")),Object(n.b)("p",null,"Can also be written as..."),Object(n.b)("h3",{id:"using-inline-offsets-method-1"},"Using inline ",Object(n.b)("inlineCode",{parentName:"h3"},"offsets()")," method"),Object(n.b)(c.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(l.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->group('capital')->offsets()->first();\n"))),Object(n.b)(l.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    } else {\n        throw new NonexistentGroupException('capital');\n    }\n}\nthrow new SubjectNotMatchedException();\n")))),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"11\n")),Object(n.b)("p",null,"Both ",Object(n.b)("inlineCode",{parentName:"p"},"offsets()->first()")," and ",Object(n.b)("inlineCode",{parentName:"p"},"group()->offsets()->first()")," throw ",Object(n.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't\nmatched by your pattern."),Object(n.b)("p",null,"Also, both ",Object(n.b)("inlineCode",{parentName:"p"},"Match.group()")," details and inline ",Object(n.b)("inlineCode",{parentName:"p"},"match()->group()->offsets()")," throw ",Object(n.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException"),", when used with an unmatched group."))}i.isMDXComponent=!0},208:function(e,a,t){"use strict";var n=t(0),c=t.n(n),l=t(210),r=t.n(l);a.a=function(e){const{block:a,children:t,defaultValue:l,values:o}=e,[b,s]=Object(n.useState)(l);return c.a.createElement("div",null,c.a.createElement("ul",{className:r()("tabs",{"tabs--block":a})},o.map(({value:e,label:a})=>c.a.createElement("li",{className:r()("tab-item",{"tab-item--active":b===e}),key:e,onClick:()=>s(e)},a))),c.a.createElement("div",{className:"margin-vert--md"},n.Children.toArray(t).filter(e=>e.props.value===b)[0]))}},209:function(e,a,t){"use strict";var n=t(0),c=t.n(n);a.a=function(e){return c.a.createElement("div",null,e.children)}}}]);