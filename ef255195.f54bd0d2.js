(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{166:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var a=n(2),i=n(6),r=(n(0),n(182)),c=n(183),o={id:"delimiters",title:"Automatic delimiters"},s={unversionedId:"delimiters",id:"delimiters",isDocsHomePage:!1,title:"Automatic delimiters",description:"This chapter doesn't contain PHP code snippets, because PHP PCRE require delimiters. There is no way to omit them",source:"@site/../docs/delimiters.mdx",slug:"/delimiters",permalink:"/docs/delimiters",version:"current",lastUpdatedAt:1611005578,sidebar:"docs",previous:{title:"Composite Pattern",permalink:"/docs/composite-pattern"},next:{title:"Count occurrences",permalink:"/docs/count"}},l=[{value:"Overview",id:"overview",children:[]},{value:"Delimited pattern",id:"delimited-pattern",children:[]},{value:"PCRE-style patterns",id:"pcre-style-patterns",children:[]},{value:"Flags",id:"flags",children:[]},{value:"I want to break it",id:"i-want-to-break-it",children:[]}],p={rightToc:l};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This chapter doesn't contain ",Object(r.b)("inlineCode",{parentName:"p"},"PHP")," code snippets, because PHP PCRE require delimiters. There is no way to omit them\nin Vanilla PHP."))),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Thanks to automatic delimiters, one can use regular expressions without ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/overview#brain-strain"}),"brain strain")," and without spending time,\nchoosing a suitable delimiter."),Object(r.b)(c.a,{tregx:"pattern('#[A-Z]/[a-z]+')->match($subject)->all();",php:"preg_match_all('%#[A-Z]/[a-z]+%', $subject);",mdxType:"CodeTabs"}),Object(r.b)("h2",{id:"delimited-pattern"},"Delimited pattern"),Object(r.b)("p",null,"Calling method ",Object(r.b)("inlineCode",{parentName:"p"},"delimited()")," on any instance of T-Regx ",Object(r.b)("inlineCode",{parentName:"p"},"PatternInterface")," returns\na pattern, as it will be used with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.php.net/manual/en/ref.pcre.php"}),"PHP PCRE methods"),"."),Object(r.b)(c.a,{tregx:"echo pattern('Welcome/Or not')->delimited() . \"\\n\";\necho pattern('https://github.com#heading')->delimited() . \"\\n\";\necho pattern('https://github.com#heading?key=hello%20there')->delimited() . \"\\n\";",mdxType:"CodeTabs"}),Object(r.b)(c.b,{text:!0,mdxType:"Result"},"#Welcome/Or not#\n%https://github.com#heading%\n~https://github.com#heading?key=hello%20there~\n"),Object(r.b)("h2",{id:"pcre-style-patterns"},"PCRE-style patterns"),Object(r.b)("p",null,"If the was constructed with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/introduction-safe#entry-points"}),Object(r.b)("inlineCode",{parentName:"a"},"Pattern::pcre()")),", method ",Object(r.b)("inlineCode",{parentName:"p"},"delimited()")," returns the pattern unchanged."),Object(r.b)(c.a,{tregx:"Pattern::pcre('#Welcome/Or not#')->delimited();",mdxType:"CodeTabs"}),Object(r.b)(c.b,{text:!0,mdxType:"Result"},"#Welcome/Or not#"),Object(r.b)("h2",{id:"flags"},"Flags"),Object(r.b)("p",null,"There are two ways of using patterns with PCRE modifiers:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Either pass a second argument to ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/introduction-safe#entry-points"}),Object(r.b)("inlineCode",{parentName:"a"},"pattern()")),"/",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/introduction-safe#entry-points"}),Object(r.b)("inlineCode",{parentName:"a"},"Pattern::of()")),":"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"// global function\npattern('[A-Z][a-z]+', 'i')->match($subject)->first();\n\n// static method\nPattern::of('[A-Z][a-z]+', 'i')->match($subject)->first();\n\n// prepared patterns\nPattern::inject('[A-Z]@', [$_GET['name']], 'i')->match($subject)->first();\n"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"or use an old-school pattern:"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-php"}),"Pattern::pcre('/[A-Z][a-z]+/i')->match($subject)->first();\n")))),Object(r.b)("h2",{id:"i-want-to-break-it"},"I want to break it"),Object(r.b)("p",null,"T-Regx has a set of predefined, suitable delimiters (like ",Object(r.b)("inlineCode",{parentName:"p"},"/"),", ",Object(r.b)("inlineCode",{parentName:"p"},"#"),", ",Object(r.b)("inlineCode",{parentName:"p"},"~"),", ",Object(r.b)("inlineCode",{parentName:"p"},"%"),", etc.) and simply uses the first one, that\ndoesn't occur in your pattern. If you exhaust each of them; if you use every possible, predefined,\nsuitable delimiter - it will throw ",Object(r.b)("inlineCode",{parentName:"p"},"ExplicitDelimiterRequiredException"),"."),Object(r.b)("p",null,"In that case, you simply have to use an explicit delimiter with ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/introduction-safe#entry-points"}),Object(r.b)("inlineCode",{parentName:"a"},"Pattern::pcre()")),"."),Object(r.b)("p",null,"If you think another automatic delimiter can be used, please create ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/T-Regx/T-Regx/issues/new/choose"}),"a github issue"),"."))}b.isMDXComponent=!0},183:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return j}));var a=n(0),i=n.n(a),r=n(186),c=n(187),o=n(188),s=n(4),l=n(184),p=n(48),b=n.n(p),d=function(e){function t(){return e.apply(this,arguments)||this}return Object(s.a)(t,e),t.prototype.render=function(){return i.a.createElement("div",{className:b.a.code},i.a.createElement(l.a,{className:"language-"+this.language},this.code))},Object(o.a)(t,[{key:"language",get:function(){return this.props.language||"php"}},{key:"code",get:function(){var e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every((function(e){return"string"==typeof e})))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}]),t}(i.a.Component),m=function(e){var t=e.tregx,n=e.php,a=[t?{label:"T-Regx",value:"t-regx"}:{},n?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}));return i.a.createElement(r.a,{defaultValue:"t-regx",values:a},t&&i.a.createElement(c.a,{value:"t-regx"},i.a.createElement(d,null,t)),n&&i.a.createElement(c.a,{value:"php"},i.a.createElement(d,null,n)))},u=n(49),h=n.n(u),j=function(e){var t=e.text,n=e.children;return i.a.createElement("div",{className:h.a.result},i.a.createElement(d,{language:t?"text":"php"},n))}}}]);