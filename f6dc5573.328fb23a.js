/*! For license information please see f6dc5573.328fb23a.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{187:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return p})),t.d(a,"rightToc",(function(){return b})),t.d(a,"default",(function(){return s}));var n=t(1),r=t(6),c=(t(0),t(196)),l=t(199),i=t(198),o={id:"replace-callback",title:"Replace with callback"},p={id:"replace-callback",title:"Replace with callback",description:"After `replace()`, you need to explicitly use one of `first()`/`all()`/`only(int)` methods, to express how many\r",source:"@site/..\\docs\\replace-callback.md",permalink:"/docs/replace-callback",lastUpdatedAt:1582105009,sidebar:"docs",previous:{title:"Replace with a constant value",permalink:"/docs/replace-with"},next:{title:"Replace by group",permalink:"/docs/replace-by-group"}},b=[{value:"Replace first",id:"replace-first",children:[]},{value:"Replace more",id:"replace-more",children:[{value:"<code>all()</code>",id:"all",children:[]},{value:"<code>only()</code>",id:"only",children:[]}]},{value:"Return types",id:"return-types",children:[{value:"Explicit string",id:"explicit-string",children:[]}]},{value:"Variable callbacks",id:"variable-callbacks",children:[]}],u={rightToc:b};function s(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},u,t,{components:a,mdxType:"MDXLayout"}),Object(c.b)("p",null,"After ",Object(c.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(c.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(c.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(c.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(c.b)("p",null,"Callback passed to ",Object(c.b)("inlineCode",{parentName:"p"},"replace()->callback()")," will only be invoked:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"for ",Object(c.b)("inlineCode",{parentName:"li"},"all()")," - as many times as there are occurrences matched in the subject."),Object(c.b)("li",{parentName:"ul"},"for ",Object(c.b)("inlineCode",{parentName:"li"},"only(int)")," - the same as ",Object(c.b)("inlineCode",{parentName:"li"},"all()"),", but up to an ",Object(c.b)("inlineCode",{parentName:"li"},"int")," limit."),Object(c.b)("li",{parentName:"ul"},"for ",Object(c.b)("inlineCode",{parentName:"li"},"first()")," - once if an occurrence is matched; or not at all if it's not.")),Object(c.b)("h2",{id:"replace-first"},"Replace first"),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->callback(function (Match $m) {\n    return strtoupper($m->text());\n});\n"))),Object(c.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject, 1);\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, Norway and Denmark'\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Of course, the callback is only invoked ",Object(c.b)("strong",{parentName:"p"},"if")," your subject is matched with the pattern.")),Object(c.b)("h2",{id:"replace-more"},"Replace more"),Object(c.b)("h3",{id:"all"},Object(c.b)("inlineCode",{parentName:"h3"},"all()")),Object(c.b)("p",null,"Replacing all matched occurrences is the most common use-case:"),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->callback(function (Match $m) {\n    return strtoupper($m->text());\n});\n"))),Object(c.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject);\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, NORWAY and DENMARK'\n")),Object(c.b)("h3",{id:"only"},Object(c.b)("inlineCode",{parentName:"h3"},"only()")),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In T-Regx, Match details can be cast to string - that's the matched text\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->callback('strtoupper');\n"))),Object(c.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/[A-Z][a-z]+/', 'strtoupper', $subject, 2);\n// Warning, empty string is returned\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, NORWAY and Denmark'\n")),Object(c.b)("h2",{id:"return-types"},"Return types"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"replace()->callback()")," only accepts ",Object(c.b)("inlineCode",{parentName:"p"},"string")," or ",Object(c.b)("inlineCode",{parentName:"p"},"MatchGroup")," as its return type."),Object(c.b)("p",null,"We believe that returning anything, that's not a string or a group can ",Object(c.b)("strong",{parentName:"p"},"be a sign of a bug"),"! Moreover, converting them silently\nwould break our ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"'),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return 2;       // <- throws InvalidReturnValueException\n    return true;    // <- throws InvalidReturnValueException\n    return null;    // <- throws InvalidReturnValueException\n});\n")),Object(c.b)("h3",{id:"explicit-string"},"Explicit string"),Object(c.b)("p",null,"If you'd like to replace an occurrence with a numeric value (for example ",Object(c.b)("inlineCode",{parentName:"p"},"'12'"),"), an empty string or ",Object(c.b)("inlineCode",{parentName:"p"},"'true'"),"/",Object(c.b)("inlineCode",{parentName:"p"},"'false'"),"\nliterals - just return them ",Object(c.b)("strong",{parentName:"p"},"explicitly"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return strval(2);                          // ok\n    return true ? 'true' : 'false';            // ok\n    return null ? '' : $something;             // ok\n\n    return $match->text();                     // ok\n    return (string) $match;                    // ok\n    return $match->group('captured')->text();  // ok, if group exists and was matched\n\n    return $match;                             // ok\n    return $match->group('captured');          // ok, if group exists and was matched\n});\n")),Object(c.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(c.b)("p",null,"You can call ",Object(c.b)("inlineCode",{parentName:"p"},"replace()->callback()")," for any valid PHP ",Object(c.b)("inlineCode",{parentName:"p"},"callable")," which accepts one string parameter (or no parameters)\nand returns ",Object(c.b)("inlineCode",{parentName:"p"},"string"),"."),Object(c.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(i.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace('Apples are cool')->first()->callback('strtoupper');\n"))),Object(c.b)(i.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"// This code is actually impossible in Vanilla-PHP.\n// In T-Regx, Match details can be cast to string - that's the matched text\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/\\w+/', 'strtoupper', $subject, 1);\n\npreg::replace_callback('/\\w+/', function (array $m) {\n    return strtoupper($m[0]);\n}, 'Apples are cool', 1);\n")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"'APPLES are cool'\n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"In this example, ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," will be cast to string, which is the same as calling ",Object(c.b)("inlineCode",{parentName:"p"},"Match.text()")," method.")))}s.isMDXComponent=!0},196:function(e,a,t){"use strict";t.d(a,"a",(function(){return u})),t.d(a,"b",(function(){return d}));var n=t(0),r=t.n(n);function c(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){c(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),b=function(e){var a=r.a.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):i({},a,{},e)),t},u=function(e){var a=b(e.components);return r.a.createElement(p.Provider,{value:a},e.children)},s={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},m=Object(n.forwardRef)((function(e,a){var t=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=b(t),m=n,d=u["".concat(l,".").concat(m)]||u[m]||s[m]||c;return t?r.a.createElement(d,i({ref:a},p,{components:t})):r.a.createElement(d,i({ref:a},p))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var c=t.length,l=new Array(c);l[0]=m;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,l[1]=i;for(var p=2;p<c;p++)l[p]=t[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},197:function(e,a,t){var n;!function(){"use strict";var t={}.hasOwnProperty;function r(){for(var e=[],a=0;a<arguments.length;a++){var n=arguments[a];if(n){var c=typeof n;if("string"===c||"number"===c)e.push(n);else if(Array.isArray(n)&&n.length){var l=r.apply(null,n);l&&e.push(l)}else if("object"===c)for(var i in n)t.call(n,i)&&n[i]&&e.push(i)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(n=function(){return r}.apply(a,[]))||(e.exports=n)}()},198:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){return r.a.createElement("div",null,e.children)}},199:function(e,a,t){"use strict";var n=t(0),r=t.n(n),c=t(200);var l=function(){return Object(n.useContext)(c.a)},i=t(197),o=t.n(i),p=t(93),b=t.n(p);const u=37,s=39;a.a=function(e){const{block:a,children:t,defaultValue:c,values:i,groupId:p}=e,{tabGroupChoices:m,setTabGroupChoices:d}=l(),[j,O]=Object(n.useState)(c);if(null!=p){const e=m[p];null!=e&&e!==j&&O(e)}const h=e=>{O(e),null!=p&&d(p,e)},f=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:o()("tabs",{"tabs--block":a})},i.map(({value:e,label:a})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":j===e,className:o()("tab-item",b.a.tabItem,{"tab-item--active":j===e}),key:e,ref:e=>f.push(e),onKeyDown:e=>((e,a,t)=>{switch(t.keyCode){case s:((e,a)=>{const t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()})(e,a);break;case u:((e,a)=>{const t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()})(e,a)}})(f,e.target,e),onFocus:()=>h(e),onClick:()=>h(e)},a))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter(e=>e.props.value===j)[0]))}},200:function(e,a,t){"use strict";var n=t(0);const r=Object(n.createContext)({tabGroupChoices:{},setTabGroupChoices:()=>{}});a.a=r}}]);