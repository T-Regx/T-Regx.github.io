(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{147:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return s}));a(211);var c=a(207),n=a(208),r=a(209);function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&(e[c]=a[c])}return e}).apply(this,arguments)}const o={id:"match-for-each",title:"For Each/Iterate"},b=[{value:"Iterate with <code>forEach()</code>",id:"iterate-with-foreach",children:[]},{value:"PHP Support",id:"php-support",children:[{value:"Use <code>iterate()</code>",id:"use-iterate",children:[]}]}],i={rightToc:b},p="wrapper";function s({components:e,...t}){return Object(c.b)(p,l({},i,t,{components:e,mdxType:"MDXLayout"}),Object(c.b)("p",null,"It's possible to easily iterate matched occurrences with ",Object(c.b)("inlineCode",{parentName:"p"},"forEach()"),"."),Object(c.b)("h2",{id:"iterate-with-foreach"},"Iterate with ",Object(c.b)("inlineCode",{parentName:"h2"},"forEach()")),Object(c.b)("p",null,"You can call ",Object(c.b)("inlineCode",{parentName:"p"},"forEach()")," with a callback that's invoked with ",Object(c.b)("a",l({parentName:"p"},{href:"/docs/match-details"}),Object(c.b)("inlineCode",{parentName:"a"},"Match"))," details just like\n",Object(c.b)("a",l({parentName:"p"},{href:"/docs/match-first"}),Object(c.b)("inlineCode",{parentName:"a"},"first()"))," and ",Object(c.b)("a",l({parentName:"p"},{href:"/docs/match-for-first"}),Object(c.b)("inlineCode",{parentName:"a"},"forFirst()")),"."),Object(c.b)(n.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",l({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->match('Apples are cool')->forEach(function (string $text) {\n    echo \"I matched $text, \";\n});\n"))),Object(c.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",l({parentName:"pre"},{className:"language-php"}),"if (preg::match_all('/\\w+/', 'Apples are cool', $matches)) {\n    array_map(function (string $text) {\n        echo \"I matched $text, \";\n    }, $matches[0]);\n}\n")))),Object(c.b)("pre",null,Object(c.b)("code",l({parentName:"pre"},{className:"language-text"}),"I matched Apples, I matched are, I matched cool, \n")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Of course, ",Object(c.b)("inlineCode",{parentName:"p"},"forEach()")," accepts ",Object(c.b)("a",l({parentName:"p"},{href:"/docs/match-details"}),"Match")," details, but ",Object(c.b)("a",l({parentName:"p"},{href:"/docs/match-details"}),"Match")," can be cast to ",Object(c.b)("inlineCode",{parentName:"p"},"(string)"),".")),Object(c.b)("h2",{id:"php-support"},"PHP Support"),Object(c.b)("p",null,"Unfortunately, only since PHP 7.0 you can use keywords (like ",Object(c.b)("inlineCode",{parentName:"p"},"foreach"),") for method names."),Object(c.b)("h3",{id:"use-iterate"},"Use ",Object(c.b)("inlineCode",{parentName:"h3"},"iterate()")),Object(c.b)("p",null,"That's why T-Regx also has a method called ",Object(c.b)("inlineCode",{parentName:"p"},"iterate()")," which works exactly like ",Object(c.b)("inlineCode",{parentName:"p"},"forEach()"),", and can be used for pre\nPHP 7.0 environments:"),Object(c.b)(n.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(c.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",l({parentName:"pre"},{className:"language-php"}),"pattern('[0-9]+')->match(\"I'm 19 years old\")->iterate(function (Match $match) {\n    echo 'I matched \"' . $match->text() . '\" at offset ' . $match->offset();\n    // `$match->offset()` is the number of characters, not bytes\n});\n"))),Object(c.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(c.b)("pre",null,Object(c.b)("code",l({parentName:"pre"},{className:"language-php"}),"preg::match_all('/[0-9]+/', \"I'm 19 years old\", $matches, PREG_OFFSET_CAPTURE);\nforeach ($matches[0] as $match) {\n    echo 'I matched \"' . $match[0] . '\" at offset ' . $match[1];\n    // Keep in mind that `$match[1]` is the number of bytes!, not characters!\n}\n")))))}s.isMDXComponent=!0},208:function(e,t,a){"use strict";var c=a(0),n=a.n(c),r=a(210),l=a.n(r);t.a=function(e){const{block:t,children:a,defaultValue:r,values:o}=e,[b,i]=Object(c.useState)(r);return n.a.createElement("div",null,n.a.createElement("ul",{className:l()("tabs",{"tabs--block":t})},o.map(({value:e,label:t})=>n.a.createElement("li",{className:l()("tab-item",{"tab-item--active":b===e}),key:e,onClick:()=>i(e)},t))),n.a.createElement("div",{className:"margin-vert--md"},c.Children.toArray(a).filter(e=>e.props.value===b)[0]))}},209:function(e,t,a){"use strict";var c=a(0),n=a.n(c);t.a=function(e){return n.a.createElement("div",null,e.children)}}}]);