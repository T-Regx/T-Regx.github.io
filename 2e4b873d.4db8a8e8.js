(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{117:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return l}));n(0);var a=n(209);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const i={title:"What's new, new, new! Part 2",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},o=[],p={rightToc:o},c="wrapper";function l({components:e,...t}){return Object(a.b)(c,r({},p,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"I've separated the library into ",Object(a.b)("inlineCode",{parentName:"p"},"CleanRegex")," and ",Object(a.b)("inlineCode",{parentName:"p"},"SafeRegex"),". The ",Object(a.b)("inlineCode",{parentName:"p"},"SafeRegex")," is an exact copy of all ",Object(a.b)("inlineCode",{parentName:"p"},"preg_*()")," methods\n(like ",Object(a.b)("inlineCode",{parentName:"p"},"preg_match()"),", ",Object(a.b)("inlineCode",{parentName:"p"},"preg_replace()"),"). They're used like this:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"preg_match()")," -> ",Object(a.b)("inlineCode",{parentName:"li"},"preg::match()")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"preg_replace()")," -> ",Object(a.b)("inlineCode",{parentName:"li"},"preg::replace()"))),Object(a.b)("p",null,"I didn't want to use namespaces (like ",Object(a.b)("inlineCode",{parentName:"p"},"\\SafeRegex\\preg_match"),") because that would\nmean the programmers reading the code would have to check the imported namespaces ",Object(a.b)("strong",{parentName:"p"},"every time")," they look at the code.\nWith double colon ",Object(a.b)("inlineCode",{parentName:"p"},"::")," it's obvious. Read on, for more details."))}l.isMDXComponent=!0}}]);