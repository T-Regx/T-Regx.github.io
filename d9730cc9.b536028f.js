(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{187:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return c}));a(211);var n=a(207);function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}const l={id:"whats-the-point",title:"What's the point?",sidebar_label:"Why would I use T-Regx?"},i=[{value:"What's wrong with PHP Regular Expressions:",id:"whats-wrong-with-php-regular-expressions",children:[{value:"PHP is Implicit",id:"php-is-implicit",children:[]},{value:"PHP is Unintuitive",id:"php-is-unintuitive",children:[]},{value:"PHP is Messy",id:"php-is-messy",children:[]},{value:"PHP is Inconsistent",id:"php-is-inconsistent",children:[]},{value:"PHP is Deliberately buggy",id:"php-is-deliberately-buggy",children:[]}]},{value:"T-Regx to the rescue",id:"t-regx-to-the-rescue",children:[{value:"T-Regx is descriptive",id:"t-regx-is-descriptive",children:[]},{value:"T-Regx is for developers (it's reliable)",id:"t-regx-is-for-developers-its-reliable",children:[]},{value:"T-Regx is explicit",id:"t-regx-is-explicit",children:[]}]}],b={rightToc:i},p="wrapper";function c({components:e,...t}){return Object(n.b)(p,r({},b,t,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,"Here is a few reasons why one might consider using T-Regx. Main of which are:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"It's ",Object(n.b)("strong",{parentName:"li"},"bulletproof")),Object(n.b)("li",{parentName:"ul"},"It's ",Object(n.b)("strong",{parentName:"li"},"powerful")),Object(n.b)("li",{parentName:"ul"},"It's ",Object(n.b)("strong",{parentName:"li"},"reliable")),Object(n.b)("li",{parentName:"ul"},"It's ",Object(n.b)("strong",{parentName:"li"},"readable"))),Object(n.b)("h2",{id:"whats-wrong-with-php-regular-expressions"},"What's wrong with PHP Regular Expressions:"),Object(n.b)("p",null,"PHP regular expressions API is far from perfect. Here's only a handful of what's wrong with it:"),Object(n.b)("h3",{id:"php-is-implicit"},"PHP is Implicit"),Object(n.b)("p",null,"You are probably a PHP developer. I would like to get ",Object(n.b)("inlineCode",{parentName:"p"},"'Robert likes apples'"),". Can you tell me which is the correct signature\nfor this task?"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"preg_replace('/Bob/', 'Robert', 'Bob likes apples');\n// or\npreg_replace('/Bob/', 'Bob likes apples', 'Robert');\n// ??\n")),Object(n.b)("p",null,"Another try. Let's say you'd like to limit replacements. But you remember that there's a reference parameter ",Object(n.b)("inlineCode",{parentName:"p"},"&$count"),"\nsomewhere. Again, which is the correct signature?"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"$limit = 1;\n\npreg_replace(?, ?, ?, $limit, $count);\n// or\npreg_replace(?, ?, ?, $count, $limit);\n// ??\n")),Object(n.b)("h3",{id:"php-is-unintuitive"},"PHP is Unintuitive"),Object(n.b)("p",null,"Programming languages are ",Object(n.b)("strong",{parentName:"p"},"tools")," created to solve problems. An experienced programmer ",Object(n.b)("strong",{parentName:"p"},"should")," be able to look\nat the code and tell what it does. With PHP ",Object(n.b)("inlineCode",{parentName:"p"},"preg_*")," functions it's just. not. possible."),Object(n.b)("p",null,"Someone who doesn't know PHP regular expressions, can probably ask themselves:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_replace('//', $r, $s)")," - will this replace all occurrences? Or just one?"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_match('//', $subject)")," - will ",Object(n.b)("em",{parentName:"li"},"this")," match the first occurrence? Or all?"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_match_all('//', $subject);")," Ok, this will find all matches, so preg_match() only finds the first."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_filter('//', $replacements, $subject)")," - who needs ",Object(n.b)("inlineCode",{parentName:"li"},"$replacements")," in ",Object(n.b)("inlineCode",{parentName:"li"},"filter")," method?")),Object(n.b)("h4",{id:"whats-more"},"What's more"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Parameters:"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Functions with 4 or 5 parameters (3 of which are optional)."),Object(n.b)("p",{parentName:"li"},"It means that, whoever looks at the code has to ",Object(n.b)("strong",{parentName:"p"},"remember")," (or to look up) what those optional values are and in which order.")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Return types:"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"Array of arrays, which contain either a ",Object(n.b)("inlineCode",{parentName:"li"},"string"),", ",Object(n.b)("inlineCode",{parentName:"li"},"null"),", or an array of ",Object(n.b)("inlineCode",{parentName:"li"},"null"),"s, ",Object(n.b)("inlineCode",{parentName:"li"},"strings")," and ",Object(n.b)("inlineCode",{parentName:"li"},"int"),"s.")))),Object(n.b)("h3",{id:"php-is-messy"},"PHP is Messy"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"PREG_OFFSET_CAPTURE"),' is a nightmare! It changes return type from "an array of arrays" to "an array of arrays of arrays".'),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"PREG_SET_ORDER")," / ",Object(n.b)("inlineCode",{parentName:"li"},"PREG_PATTERN_ORDER"),' change return values. It\'s either "groups of matches" or "matches of groups",\ndepending on the flag.')),Object(n.b)("p",null,"The worst part? You find yourself looking at this code"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"return $match[1][0];\n")),Object(n.b)("p",null,"having no idea what. it. does. You have to see whether you're using ",Object(n.b)("inlineCode",{parentName:"p"},"preg_match()")," or ",Object(n.b)("inlineCode",{parentName:"p"},"preg_match_all()")," and\nwhether any of ",Object(n.b)("inlineCode",{parentName:"p"},"PREG_SET_ORDER"),"/",Object(n.b)("inlineCode",{parentName:"p"},"PREG_PATTERN_ORDER"),"/",Object(n.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE")," were used."),Object(n.b)("h3",{id:"php-is-inconsistent"},"PHP is Inconsistent"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"How do you get results and the count of the results?"),Object(n.b)("table",{parentName:"li"},Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"Value"),Object(n.b)("th",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(n.b)("th",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"th"},"preg_replace()")))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Count"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Return type"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Argument reference")),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),"Values"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Argument reference"),Object(n.b)("td",r({parentName:"tr"},{align:null}),"Return type")))),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"$replaced = preg_replace($p, $r, $s, $count);\n$count    = preg_match($p, $s, $matched);\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"If you use ",Object(n.b)("inlineCode",{parentName:"p"},"PREG_OFFSET_CAPTURE")," and your subject isn't matched with the pattern; these are the results:"),Object(n.b)("table",{parentName:"li"},Object(n.b)("thead",{parentName:"table"},Object(n.b)("tr",{parentName:"thead"},Object(n.b)("th",r({parentName:"tr"},{align:null}),"Success"),Object(n.b)("th",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"th"},"preg_match()")),Object(n.b)("th",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"th"},"preg_match_all()")))),Object(n.b)("tbody",{parentName:"table"},Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"true")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"['match', 2]")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"['match', 2']"))),Object(n.b)("tr",{parentName:"tbody"},Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"false")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"''")),Object(n.b)("td",r({parentName:"tr"},{align:null}),Object(n.b)("inlineCode",{parentName:"td"},"[null, -1]")))))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("inlineCode",{parentName:"p"},"preg_quote()")," quotes different characters for different PHP versions.")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"PHP ",Object(n.b)("a",r({parentName:"p"},{href:"http://php.net/manual/en/function.preg-filter.php"}),"documentation")," promises that"),Object(n.b)("blockquote",{parentName:"li"},Object(n.b)("p",{parentName:"blockquote"},Object(n.b)("inlineCode",{parentName:"p"},"preg_filter()")," is identical to ",Object(n.b)("inlineCode",{parentName:"p"},"preg_replace()")," except it only returns the (possibly transformed) subjects...")),Object(n.b)("p",{parentName:"li"},"but ",Object(n.b)("inlineCode",{parentName:"p"},"preg_filter()")," and ",Object(n.b)("inlineCode",{parentName:"p"},"preg_replace()")," actually return ",Object(n.b)("em",{parentName:"p"},"completely")," different values for ",Object(n.b)("strong",{parentName:"p"},"the same")," parameters."))),Object(n.b)("h3",{id:"php-is-deliberately-buggy"},"PHP is Deliberately buggy"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},Object(n.b)("inlineCode",{parentName:"p"},"preg_match")," and ",Object(n.b)("inlineCode",{parentName:"p"},"preg_match_all")," return either:"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"(int) x")," - a number of matches, if a match is found"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"(int) 0")," - if no matches are found"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"(bool) false")," - if an error occurred")),Object(n.b)("p",{parentName:"li"},"So if you do just this:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg_match('//', '')) {\n")))),Object(n.b)("p",null,"there's no way of knowing whether your pattern is incorrect or whether it's correct but your subject isn't matched by\nyour pattern. You need to ",Object(n.b)("strong",{parentName:"p"},"remember")," to add an explicit ",Object(n.b)("inlineCode",{parentName:"p"},"false")," check each time you use it."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"All ",Object(n.b)("inlineCode",{parentName:"li"},"preg_*")," functions only return ",Object(n.b)("inlineCode",{parentName:"li"},"false"),"/",Object(n.b)("inlineCode",{parentName:"li"},"null"),"/",Object(n.b)("inlineCode",{parentName:"li"},"[]")," on error. You have to remember to call ",Object(n.b)("inlineCode",{parentName:"li"},"preg_last_error()")," to get\nsome insight in the nature of your error. Of course it only returns ",Object(n.b)("inlineCode",{parentName:"li"},"int"),"! So you have to look up that ",Object(n.b)("inlineCode",{parentName:"li"},"4"),' is\n"invalid utf8 sequence" and ',Object(n.b)("inlineCode",{parentName:"li"},"2"),' is "backtrack limit exceeded".'),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_filter()")," for arrays returns ",Object(n.b)("inlineCode",{parentName:"li"},"[]")," if an error occurred; even though ",Object(n.b)("inlineCode",{parentName:"li"},"[]")," is the perfectly valid result for this\nfunction. For example, it could have filtered out all values or its input was an empty array right from the beginning.")),Object(n.b)("h2",{id:"t-regx-to-the-rescue"},"T-Regx to the rescue"),Object(n.b)("p",null,"That's why T-Regx happened. It addresses all of PHP regular expressions flaws:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#its-descriptive"}),"It's descriptive")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#its-for-developers-its-reliable"}),"It's for developers")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",r({parentName:"li"},{href:"#its-explicit"}),"It's explicit"))),Object(n.b)("h3",{id:"t-regx-is-descriptive"},"T-Regx is descriptive"),Object(n.b)("p",null,"What about now? Is the task easier?"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->replace('Bob likes applees')->first()->with('Robert');\n")),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->replace('Bob likes applees')->only($limit)->with('Robert');\n")),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('Bob')->count('Bob likes applees');\n")),Object(n.b)("h3",{id:"t-regx-is-for-developers-its-reliable"},"T-Regx is for developers (it's reliable)"),Object(n.b)("p",null,"If you try to use an invalid regular expression in Java or JavaScript, you would probably get a ",Object(n.b)("inlineCode",{parentName:"p"},"SyntaxError")," exception\nand you'd be forced to handle it. Such things don't happen in PHP regular expressions. If any ",Object(n.b)("inlineCode",{parentName:"p"},"preg_*()")," function fails,\nit returns ",Object(n.b)("inlineCode",{parentName:"p"},"false")," (or sometimes ",Object(n.b)("inlineCode",{parentName:"p"},"null")," or an empty array). You can always use ",Object(n.b)("inlineCode",{parentName:"p"},"if"),", if you remember about it, but..."),Object(n.b)("p",null,"...unfortunately these functions return values - some of which are ",Object(n.b)("inlineCode",{parentName:"p"},"0")," - which makes this code completely unreliable!"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (preg_match('//', $subject)) {\n")),Object(n.b)("p",null,"It doesn't matter whether it found nothing (",Object(n.b)("inlineCode",{parentName:"p"},"0"),") or failed (",Object(n.b)("inlineCode",{parentName:"p"},"false"),") - you would have no idea. You need to add an explicit check:"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"if (($count = preg_match('//', $subject)) !== false) {\n    if ($count > 1) {\n\n    }\n}\nelse {\n    // handle the error\n}\n")),Object(n.b)("p",null,"T-Regx always throws an exception and never issues any warnings, errors or notices."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"try {\n    return pattern('Foo')->match('Bar')->all();\n}\ncatch (CleanRegexException $exception) {\n    // handle the error\n}\n")),Object(n.b)("p",null,"Furthermore, T-Regx throws different exceptions for different errors:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"SubjectNotMatchedException"),Object(n.b)("li",{parentName:"ul"},"MalformedPatternException"),Object(n.b)("li",{parentName:"ul"},"FlagNotAllowedException"),Object(n.b)("li",{parentName:"ul"},"GroupNotMatchedException"),Object(n.b)("li",{parentName:"ul"},"NonexistentGroupException"),Object(n.b)("li",{parentName:"ul"},"InvalidReplacementException"),Object(n.b)("li",{parentName:"ul"},"InvalidReturnValueException"),Object(n.b)("li",{parentName:"ul"},"MissingSplitDelimiterGroupException"),Object(n.b)("li",{parentName:"ul"},"InternalCleanRegexException")),Object(n.b)("p",null,"They all extend ",Object(n.b)("inlineCode",{parentName:"p"},"CleanRegexException")," though."),Object(n.b)("p",null,"Further, furthermore, if you pass an invalid data type to any of the T-Regx methods, ",Object(n.b)("inlineCode",{parentName:"p"},"\\InvalidArgumentException")," is thrown."),Object(n.b)("h3",{id:"t-regx-is-explicit"},"T-Regx is explicit"),Object(n.b)("p",null,"Poor design of PHP ",Object(n.b)("inlineCode",{parentName:"p"},"preg_*")," functions does not make them really descriptive. Someone who's not familiar with it will probably\nask themselves:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_replace('//', $r, $s)")," - will this replace all or just one occurrence?"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"preg_match('//', $subject)")," - will ",Object(n.b)("em",{parentName:"li"},"this")," match the first occurrence? Or all?")),Object(n.b)("p",null,"However,"),Object(n.b)("p",null,"looking at T-Regx code, everyone can immediately see author's intentions and will be able to recognize what\nthe code ",Object(n.b)("strong",{parentName:"p"},"exactly")," does, right away."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern('[A-Z]+')->match($subject)->all();\n// or\npattern('[A-Z]+')->replace($subject)->first()->with('word');\n")),Object(n.b)("p",null,"Looking at this code is like reading a book."),Object(n.b)("hr",null),Object(n.b)("p",null,"You will not find arrays of arrays of arrays in T-Regx API. Each functionality has a dedicated set of methods."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-php"}),"pattern($pattern)->match($subject)->first(function (Match $match) {\n\n    $match->offset();           // offset of a matched occurrence\n\n    $match->group(2)->offset(); // offset of a matched capturing group\n\n    $match->hasGroup('uri');    // group validation\n\n    $match->hasGroup('2asd');   // throws \\InvalidArgumentException\n});\n")),Object(n.b)("p",null,"Read more about ",Object(n.b)("a",r({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match")," details"),"."))}c.isMDXComponent=!0}}]);