(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{180:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return h}));var n=a(0),c=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,c=function(e,t){if(null==e)return{};var a,n,c={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var b=c.a.createContext({}),m=function(e){var t=c.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=m(e.components);return c.a.createElement(b.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},u=c.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,b=p(e,["components","mdxType","originalType","parentName"]),l=m(a),u=n,h=l["".concat(i,".").concat(u)]||l[u]||s[u]||r;return a?c.a.createElement(h,o(o({ref:t},b),{},{components:a})):c.a.createElement(h,o({ref:t},b))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var b=2;b<r;b++)i[b]=a[b];return c.a.createElement.apply(null,i)}return c.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return m}));var n=a(2),c=a(6),r=(a(0),a(180)),i={id:"match-groups",title:"Capturing groups"},o={unversionedId:"match-groups",id:"match-groups",isDocsHomePage:!1,title:"Capturing groups",description:"When using [pattern()->match()] and [pattern()->replace->callback()], some methods receive a callback that accepts [Match]",source:"@site/../docs/match-groups.md",slug:"/match-groups",permalink:"/docs/match-groups",version:"current",lastUpdatedAt:1611005578,sidebar:"docs",previous:{title:"Match details",permalink:"/docs/match-details"},next:{title:"Match offsets",permalink:"/docs/match-offsets"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Group text",id:"group-text",children:[]},{value:"Group details",id:"group-details",children:[{value:"Offsets",id:"offsets",children:[]},{value:"Optional groups",id:"optional-groups",children:[]},{value:"Index, name and identifier",id:"index-name-and-identifier",children:[]}]},{value:"Optional Groups",id:"optional-groups-1",children:[]},{value:"Nonexistent Groups",id:"nonexistent-groups",children:[{value:"Invalid groups and arguments",id:"invalid-groups-and-arguments-1",children:[]}]},{value:"Invalid group names",id:"invalid-group-names",children:[]},{value:"Composite groups",id:"composite-groups",children:[{value:"Group names",id:"group-names",children:[]},{value:"Groups count",id:"groups-count",children:[]}]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"Complication with <code>J</code> modifier",id:"complication-with-j-modifier",children:[]},{value:"Groups In-Depth",id:"groups-in-depth",children:[]}],b={rightToc:p};function m(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When using ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match"}),Object(r.b)("inlineCode",{parentName:"a"},"pattern()->match()"))," and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-callback"}),Object(r.b)("inlineCode",{parentName:"a"},"pattern()->replace->callback()")),", some methods receive a callback that accepts ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match")),"\ndetails object. These methods are: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-first"}),Object(r.b)("inlineCode",{parentName:"a"},"first()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(r.b)("inlineCode",{parentName:"a"},"findFirst()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-for-each"}),Object(r.b)("inlineCode",{parentName:"a"},"forEach()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(r.b)("inlineCode",{parentName:"a"},"map()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-flat-map"}),Object(r.b)("inlineCode",{parentName:"a"},"flatMap()")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/replace-callback"}),Object(r.b)("inlineCode",{parentName:"a"},"callback()")),". "),Object(r.b)("p",null,"The details can be used to get concise information about the matched occurrence, such as its value\n(i.e. ",Object(r.b)("inlineCode",{parentName:"p"},'"the whole match"'),"), capturing groups and their UTF-8/raw offsets, limits, indexes, other matches as well as the\nused subject (although it could also be pass as a closure parameter) and more."),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This page only concerns ",Object(r.b)("strong",{parentName:"p"},"capturing groups")," of ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match")),', specifically. See "',Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match")," details"),'" for a more throughout\ndocumentation.'))),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Using ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details"}),Object(r.b)("inlineCode",{parentName:"a"},"Match"))," details, you gain access complete information about capturing groups:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#group-text"}),Object(r.b)("inlineCode",{parentName:"a"},"get(int|string)"))," - capturing group text value"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#group-details"}),Object(r.b)("inlineCode",{parentName:"a"},"group(int|string)"))," - capturing group details, with:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"text()")," - value of the group, as ",Object(r.b)("inlineCode",{parentName:"li"},"string")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"toInt()")," - value of the group, cast to ",Object(r.b)("inlineCode",{parentName:"li"},"int")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"isInt()")," - whether the group is a valid integer (e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"true")," for group ",Object(r.b)("inlineCode",{parentName:"li"},"(\\d+)"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#offsets"}),"offsets of matched values")," in the subject:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",Object(r.b)("inlineCode",{parentName:"li"},"offset()")),Object(r.b)("li",{parentName:"ul"},"byte offsets - ",Object(r.b)("inlineCode",{parentName:"li"},"byteOffset()")))))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"orReturn()")),"/",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"orElse()")),"/",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"orThrow()"))," - returns a group, or controls the absence of the group"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(r.b)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of the capturing group in a pattern"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(r.b)("inlineCode",{parentName:"a"},"name()"))," - name of the capturing group, or ",Object(r.b)("inlineCode",{parentName:"li"},"null")," of group is not named"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#index-name-and-identifier"}),Object(r.b)("inlineCode",{parentName:"a"},"usedIdentifier()"))," - either ",Object(r.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(r.b)("inlineCode",{parentName:"li"},"name()"),", depending on the argument of ",Object(r.b)("inlineCode",{parentName:"li"},"group(int|string)")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#other-occurrences"}),Object(r.b)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences of the group"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#optional-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"matched(int|string)"))," - whether the group was matched by the subject"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#nonexistent-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"hasGroup(int|string)"))," - whether group was used in a pattern"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#invalid-group-names"}),Object(r.b)("inlineCode",{parentName:"a"},"GroupName::isValid(string)"))," - whether group name has proper format"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#composite-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"groups()")),"/",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#composite-groups"}),Object(r.b)("inlineCode",{parentName:"a"},"namedGroups()"))," - interface for composite operations for all groups"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#group-names"}),Object(r.b)("inlineCode",{parentName:"a"},"groupNames()"))," - string list of named groups used in a pattern"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#groups-count"}),Object(r.b)("inlineCode",{parentName:"a"},"groupsCount()"))," - counts number of capturing groups (without duplicates of named and regular groups)")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"All types of group syntax: ",Object(r.b)("inlineCode",{parentName:"p"},"(?<name>)"),", ",Object(r.b)("inlineCode",{parentName:"p"},"(?'name')")," and ",Object(r.b)("inlineCode",{parentName:"p"},"(?P<name>)"),' are considered "named". Regular, indexed groups\nare use with syntax ',Object(r.b)("inlineCode",{parentName:"p"},"()"),". Group ",Object(r.b)("inlineCode",{parentName:"p"},"(?:)")," is considered a non-capturing group."))),Object(r.b)("h2",{id:"group-text"},"Group text"),Object(r.b)("p",null,"To get a value of a capturing group from, use ",Object(r.b)("inlineCode",{parentName:"p"},"Match.get()"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('\\d+(?<unit>..)')->match('14cm')->first(function (Match $match) {\n    // highlight-next-line\n    $match->get('value');   // 'cm'\n});\n")),Object(r.b)("h2",{id:"group-details"},"Group details"),Object(r.b)("p",null,"You can chain ",Object(r.b)("inlineCode",{parentName:"p"},"Match.group()")," with a variety of methods, you can use to get\nmore details about the group."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->forEach(function (Match $match) {\n    \n    $match->group('value')->text();    // '168' (string)\n    $match->group('value')->isInt();   // true  (boolean)\n    $match->group('value')->toInt();   // 168   (int)\n    \n    $match->group('unit')->offset();   // 13\n    $match->group('unit')->tail();     // 15\n    $match->group('unit')->text();     // 'cm'\n    $match->group('unit')->isInt();    // false\n    $match->group('unit')->toInt();    // throws IntegerFormatException\n    \n    $match->group('unit')->index();    // 2\n    $match->group(2)->name();          // 'unit'\n});\n")),Object(r.b)("h3",{id:"offsets"},"Offsets"),Object(r.b)("h3",{id:"optional-groups"},"Optional groups"),Object(r.b)("p",null,"Some patterns contain required capturing groups, e.g ",Object(r.b)("inlineCode",{parentName:"p"},"^(cm|mm)$"),". Others, have capturing groups that are optional,\ne.g. ",Object(r.b)("inlineCode",{parentName:"p"},"\\d+(cm|mm)?"),". As you can see, in ",Object(r.b)("inlineCode",{parentName:"p"},"\\d+(cm|mm)?"),", group ",Object(r.b)("inlineCode",{parentName:"p"},"(cm|mm)")," doesn't have to be matched for the whole\nsubject to be matched - both ",Object(r.b)("inlineCode",{parentName:"p"},'"14"')," and ",Object(r.b)("inlineCode",{parentName:"p"},'"14cm"')," are subjects that match the pattern."),Object(r.b)("p",null,"Optional groups allow you to deal with potentially unmatched groups with elegance. If the group ",Object(r.b)("strong",{parentName:"p"},"is matched"),",\neach of the methods: ",Object(r.b)("inlineCode",{parentName:"p"},"text()"),"/ ",Object(r.b)("inlineCode",{parentName:"p"},"orReturn()"),"/ ",Object(r.b)("inlineCode",{parentName:"p"},"orElse()"),"/ ",Object(r.b)("inlineCode",{parentName:"p"},"orThrow()")," work exactly the same - returns the value of\nthe matched capturing group."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>http://)?\\w+\\.\\w+')->match('http://google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                // 'http://'\n    $match->group('schema')->orThrow();             // 'http://'\n    $match->group('schema')->orReturn('other');     // 'http://'\n    $match->group('schema')->orElse(function() {    // 'http://'\n        return '';\n    });  \n});\n")),Object(r.b)("p",null,"The difference is - how they work when the group is not matched:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->text();                 // `GroupNotMatchedException`\n    $match->group('schema')->orThrow();              // `GroupNotMatchedException` by default\n    $match->group('schema')->orReturn('other');      // 'other'\n    $match->group('schema')->orElse(function() {     // whatever is returned, in this case: ''\n        return '';\n    });   \n});\n")),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," works exactly the same as ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-find-first"}),Object(r.b)("inlineCode",{parentName:"a"},"findFirst()->orThrow()")),", which means it accepts user defined\nexception to instantiate:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"class MyException extends Exception {}\n\npattern('(?<schema>https?://)?\\w+\\.\\w+')->match('google.com')->first(function (Match $match) {\n    $match->group('schema')->orThrow(MyException::class);  // `MyException`\n});\n")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Method ",Object(r.b)("inlineCode",{parentName:"p"},"group()->orThrow()")," throws ",Object(r.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException")," by default, so - when called without user defined exception -\nit's actually identical to ",Object(r.b)("inlineCode",{parentName:"p"},"group()->text()"),"."))),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Method ",Object(r.b)("inlineCode",{parentName:"p"},"group()->orElse(callable)")," callback receives ",Object(r.b)("inlineCode",{parentName:"p"},"NotMatched"),", just like ",Object(r.b)("inlineCode",{parentName:"p"},"findFirst()->orElse()"),"."))),Object(r.b)("h3",{id:"index-name-and-identifier"},"Index, name and identifier"),Object(r.b)("p",null,"Groups can be referred to either by an index or by name, if the group in a pattern is named. What was the group referred\nwith is called an identifier. If group was referred to by an index, then the index is the identifier."),Object(r.b)("p",null,"T-Regx has 3 separate methods for each of the group reference method:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"index()")," - returns the ordinal number of a group"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"name()")," - returns the name of a group, or ",Object(r.b)("inlineCode",{parentName:"li"},"null")," if the group is not named"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"usedIdentifier()")," - returns either ",Object(r.b)("inlineCode",{parentName:"li"},"index()")," or ",Object(r.b)("inlineCode",{parentName:"li"},"name()"),", depending on what was the group referred with")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->group(1)->index();                  //  1\n    $match->group('schema')->index();           //  1\n\n    $match->group(1)->name();                   // 'schema'\n    $match->group('schema')->name();            // 'schema'\n\n    $match->group(1)->usedIdentifier();         //  1\n    $match->group('schema')->usedIdentifier();  // 'schema'\n});\n")),Object(r.b)("h2",{id:"optional-groups-1"},"Optional Groups"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"matched(int|string)")," allows you to verify whether a given group was matched by the subject:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$subject = 'Links: google.com and http://facebook.com';\n\npattern('(https?://)?\\w+\\.\\w+')->match($subject)->forEach(function (Match $match) {\n    // first iteration\n    $match->text();       // 'google.com'\n    $match->matched(1);   // false, `google.com` doesn't have a schema \n    $match->get(1);       // GroupNotMatchedException\n    \n    // second iteration\n    $match->text();       // 'http://facebook.com'    \n    $match->matched(1);   // true, `http://facebook.com` does have a schema \n    $match->get(1);       // 'http://'    \n});\n")),Object(r.b)("p",null,"It'll work just as well with named groups:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->text();              // 'google.com'  \n    $match->matched('schema');   // false, `google.com` doesn't have a schema \n    $match->get('schema');       // GroupNotMatchedException\n});\n")),Object(r.b)("p",null,"Although method ",Object(r.b)("inlineCode",{parentName:"p"},"$match->matched(int|string)")," is the preferred way - same effect can be achieved with\nusing ",Object(r.b)("inlineCode",{parentName:"p"},"$match->group(int|string)->matched()"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<schema>https?://)?\\w+\\.\\w+')->match($subject)->first(function (Match $match) {\n    $match->matched('schema');            // false, `google.com` doesn't have a schema\n    $match->group('schema')->matched();   // identical\n});\n")),Object(r.b)("h4",{id:"invalid-groups-and-arguments"},"Invalid groups and arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(r.b)("inlineCode",{parentName:"li"},"NonexistentGroupException"),", when used with a non-existent group ",Object(r.b)("em",{parentName:"li"},"(i.e. ",Object(r.b)("inlineCode",{parentName:"em"},"asdf"),")"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"matched()")," will throw ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(r.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")),", when used with an invalid group ",Object(r.b)("em",{parentName:"li"},"(i.e. ",Object(r.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(r.b)("inlineCode",{parentName:"em"},"-1")," or any\ntype other than ",Object(r.b)("inlineCode",{parentName:"em"},"string")," or ",Object(r.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(r.b)("h2",{id:"nonexistent-groups"},"Nonexistent Groups"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"hasGroup(int|string)")," allows you to verify whether the group was used in a pattern:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)?')->match('14')->first(function (Match $match) {\n    $match->hasGroup('value');  // true\n    $match->hasGroup('unit');   // true, group exists in pattern\n    $match->hasGroup('other');  // false, group doesn't exist in pattern\n    \n    $match->matched('value');   // true\n    $match->matched('unit');    // false, group exists, but was not matched in pattern\n    $match->matched('other');   // NonexistentGroupException\n});\n")),Object(r.b)("p",null,"It'll work just the same with regular (not named) groups:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('')->first(function (Match $match) {\n    $match->hasGroup(0);  // true\n    $match->hasGroup(1);  // true\n    $match->hasGroup(2);  // false\n});\n")),Object(r.b)("h3",{id:"invalid-groups-and-arguments-1"},"Invalid groups and arguments"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"hasGroup()")," will throw ",Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(r.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")),", when used with an invalid group ",Object(r.b)("em",{parentName:"li"},"(i.e. ",Object(r.b)("inlineCode",{parentName:"em"},"2group"),", ",Object(r.b)("inlineCode",{parentName:"em"},"-1")," or any\ntype other than ",Object(r.b)("inlineCode",{parentName:"em"},"string")," or ",Object(r.b)("inlineCode",{parentName:"em"},"int"),")"),".")),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Usages of ",Object(r.b)("inlineCode",{parentName:"p"},"hasGroup()")," are rather infrequent, because rarely patterns are dynamic - they're constant much more often;\nhence the developer doesn't have to check whether the group exists."))),Object(r.b)("h2",{id:"invalid-group-names"},"Invalid group names"),Object(r.b)("p",null,"When any group method is called with an invalid group name, for example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$match->hasGroup('**');\n$match->matched('**');\n$match->group('**')->text();\n$match->get('**');\n")),Object(r.b)("p",null,"then ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/class.invalidargumentexception.php"}),Object(r.b)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," is thrown."),Object(r.b)("p",null,"To validate a group name before using it, you can use ",Object(r.b)("inlineCode",{parentName:"p"},"GroupName")," helper:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"use TRegx\\CleanRegex\\Helper\\GroupName;\n\nGroupName::isValid('**'); // false\n")),Object(r.b)("h2",{id:"composite-groups"},"Composite groups"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Match.groups()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Match.namedGroups()")," return a list of capturing group values and offsets."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$p = '(?<value>\\d+)(?<unit>cm|mm)';\n$s = '192mm and 168cm or 18mm and 12cm';\n\npattern($p)->match($s)->forEach(function (Match $match) { \n    $match->groups()->texts();         // ['168', 'cm']\n    $match->namedGroups()->texts();    // ['value' => '168', 'unit' => 'cm']\n    \n    $match->groups()->offsets();       // [10, 13]\n    $match->namedGroups()->offsets();  // ['value' => 10, 'unit' => 13]\n});\n")),Object(r.b)("p",null,"If a group is not matched, it will be represented as ",Object(r.b)("inlineCode",{parentName:"p"},"null")," in the list."),Object(r.b)("h3",{id:"group-names"},"Group names"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"groupNames()")," returns a simple ",Object(r.b)("inlineCode",{parentName:"p"},"string[]")," with names of the capturing groups in order:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();   // ['value', 'unit']\n});\n")),Object(r.b)("p",null,"If a group isn't named, it's represented by ",Object(r.b)("inlineCode",{parentName:"p"},"null"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupNames();   // ['value', null]\n});\n")),Object(r.b)("h3",{id:"groups-count"},"Groups count"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"groupsCount()")," returns the number of capturing groups (without duplicates of named and regular groups)"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"pattern('(?<value>\\d+)(?<unit>cm|mm)')->match('14cm')->first(function (Match $match) {\n    $match->groupsCount();   // 2\n});\n")),Object(r.b)("h2",{id:"other-occurrences"},"Other occurrences"),Object(r.b)("p",null,"Method ",Object(r.b)("inlineCode",{parentName:"p"},"group()->all()")," allows  you to gain access to the occurrence of the group in other matches in the subject."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', 'cm', 'mm', 'cm']\n});\n")),Object(r.b)("p",null,"If the group is not matched in other occurrences, its value in ",Object(r.b)("inlineCode",{parentName:"p"},"all()")," result array will be ",Object(r.b)("inlineCode",{parentName:"p"},"null"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-php"}),"$pattern = '(?<value>\\d+)(?<unit>cm|mm)?';\n$subject = '192mm and 168 or 18mm and 12';\n\npattern($pattern)->match($subject)->first(function (Match $match) {\n    $match->group('value')->all();   // ['192', '168', '18', '12']\n    $match->group('unit')->all();    // ['mm', null, 'mm', null]\n});\n")),Object(r.b)("p",null,"In other words ",Object(r.b)("inlineCode",{parentName:"p"},"Match.group($x).all()")," is a collection of occurrences of group ",Object(r.b)("inlineCode",{parentName:"p"},"$x")," in all other matches."),Object(r.b)("h2",{id:"complication-with-j-modifier"},"Complication with ",Object(r.b)("inlineCode",{parentName:"h2"},"J")," modifier"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Complication with ",Object(r.b)("inlineCode",{parentName:"p"},"J"),' modifier is a rather advanced matter, and not necessary for everyday use.\nIf you don\'t seek "in-depth" understanding of capturing groups, feel free to skip this chapter.'))),Object(r.b)("p",null,"To learn more, go to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-groups-j-modifier"}),"Capturing groups - J modifier"),"."),Object(r.b)("h2",{id:"groups-in-depth"},"Groups In-Depth"),Object(r.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},'Groups In-Depth is a rather advanced matter, and not necessary for everyday use.\nIf you don\'t seek "in-depth" understanding of capturing groups, feel free to skip this chapter.'))),Object(r.b)("p",null,"To learn more, go to ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-groups-in-depth"}),"Capturing groups - in depth"),"."))}m.isMDXComponent=!0}}]);