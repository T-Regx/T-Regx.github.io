(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{198:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return b})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return u}));t(211);var n=t(207),l=t(208),r=t(209);function c(){return(c=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}const b={id:"replace-callback",title:"Replace with callback"},p=[{value:"Replace first",id:"replace-first",children:[]},{value:"Replace more",id:"replace-more",children:[{value:"<code>all()</code>",id:"all",children:[]},{value:"<code>only()</code>",id:"only",children:[]}]},{value:"Return types",id:"return-types",children:[{value:"Explicit string",id:"explicit-string",children:[]}]},{value:"Variable callbacks",id:"variable-callbacks",children:[]}],i={rightToc:p},s="wrapper";function u({components:e,...a}){return Object(n.b)(s,c({},i,a,{components:e,mdxType:"MDXLayout"}),Object(n.b)("p",null,"After ",Object(n.b)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",Object(n.b)("inlineCode",{parentName:"p"},"first()"),"/",Object(n.b)("inlineCode",{parentName:"p"},"all()"),"/",Object(n.b)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),Object(n.b)("p",null,"Callback passed to ",Object(n.b)("inlineCode",{parentName:"p"},"replace()->callback()")," will only be invoked:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"for ",Object(n.b)("inlineCode",{parentName:"li"},"all()")," - as many times as there are occurrences matched in the subject."),Object(n.b)("li",{parentName:"ul"},"for ",Object(n.b)("inlineCode",{parentName:"li"},"only(int)")," - the same as ",Object(n.b)("inlineCode",{parentName:"li"},"all()"),", but up to an ",Object(n.b)("inlineCode",{parentName:"li"},"int")," limit."),Object(n.b)("li",{parentName:"ul"},"for ",Object(n.b)("inlineCode",{parentName:"li"},"first()")," - once if an occurrence is matched; or not at all if it's not.")),Object(n.b)("h2",{id:"replace-first"},"Replace first"),Object(n.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->callback(function (Match $m) {\n    return strtoupper($m->text());\n});\n"))),Object(n.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject, 1);\n")))),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, Norway and Denmark'\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Of course, the callback is only invoked ",Object(n.b)("strong",{parentName:"p"},"if")," your subject is matched with the pattern.")),Object(n.b)("h2",{id:"replace-more"},"Replace more"),Object(n.b)("h3",{id:"all"},Object(n.b)("inlineCode",{parentName:"h3"},"all()")),Object(n.b)("p",null,"Replacing all matched occurrences is the most common use-case:"),Object(n.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->callback(function (Match $m) {\n    return strtoupper($m->text());\n});\n"))),Object(n.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject);\n")))),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, NORWAY and DENMARK'\n")),Object(n.b)("h3",{id:"only"},Object(n.b)("inlineCode",{parentName:"h3"},"only()")),Object(n.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In T-Regx, Match details can be cast to string - that's the matched text\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->callback('strtoupper');\n"))),Object(n.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/[A-Z][a-z]+/', 'strtoupper', $subject, 2);\n// Warning, empty string is returned\n")))),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"'I like scandinavia: SWEDEN, NORWAY and Denmark'\n")),Object(n.b)("h2",{id:"return-types"},"Return types"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"replace()->callback()")," only accepts ",Object(n.b)("inlineCode",{parentName:"p"},"string")," as it's return type."),Object(n.b)("p",null,"We believe that returning anything, that's not a string can ",Object(n.b)("strong",{parentName:"p"},"be a sign of a bug"),"! Moreover, converting them silently\nwould break our ",Object(n.b)("a",c({parentName:"p"},{href:"whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"'),"."),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return 2;       // <- throws InvalidReturnValueException\n    return true;    // <- throws InvalidReturnValueException\n    return $match;  // <- throws InvalidReturnValueException\n    return null;    // <- throws InvalidReturnValueException\n});\n")),Object(n.b)("h3",{id:"explicit-string"},"Explicit string"),Object(n.b)("p",null,"If you'd like to replace an occurrence with a numeric value (for example ",Object(n.b)("inlineCode",{parentName:"p"},"'12'"),"), an empty string or ",Object(n.b)("inlineCode",{parentName:"p"},"'true'"),"/",Object(n.b)("inlineCode",{parentName:"p"},"'false'"),"\nliterals - just return them ",Object(n.b)("strong",{parentName:"p"},"explicitly"),"."),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Match $match) {\n    return strval(2);                          // ok\n    return true ? 'true' : 'false';            // ok\n    return (string) $match;                    // ok\n    return null ? '' : $something;             // ok\n    return $match->group('captured');          // ok, if group exists and was matched\n    return $match->group('captured')->text();  // ok, if group exists and was matched\n});\n")),Object(n.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(n.b)("p",null,"You can call ",Object(n.b)("inlineCode",{parentName:"p"},"replace()->callback()")," for any valid PHP ",Object(n.b)("inlineCode",{parentName:"p"},"callable")," which accepts one string parameter (or no parameters)\nand returns ",Object(n.b)("inlineCode",{parentName:"p"},"string"),"."),Object(n.b)(l.a,{defaultValue:"T-Regx",values:[{label:"T-Regx",value:"T-Regx"},{label:"PHP",value:"PHP"}],mdxType:"Tabs"},Object(n.b)(r.a,{value:"T-Regx",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern('\\w+')->replace('Apples are cool')->first()->callback('strtoupper');\n"))),Object(n.b)(r.a,{value:"PHP",mdxType:"TabItem"},Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"// This code is actually impossible in Vanilla-PHP.\n// In T-Regx, Match details can be cast to string - that's the matched text\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/\\w+/', 'strtoupper', $subject, 1);\n\npreg::replace_callback('/\\w+/', function (array $m) {\n    return strtoupper($m[0]);\n}, 'Apples are cool', 1);\n")))),Object(n.b)("pre",null,Object(n.b)("code",c({parentName:"pre"},{className:"language-php"}),"'APPLES are cool'\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"In this example, ",Object(n.b)("a",c({parentName:"p"},{href:"/docs/match-details"}),Object(n.b)("inlineCode",{parentName:"a"},"Match"))," will be cast to string, which is the same as calling ",Object(n.b)("inlineCode",{parentName:"p"},"Match.text()")," method.")))}u.isMDXComponent=!0},208:function(e,a,t){"use strict";var n=t(0),l=t.n(n),r=t(210),c=t.n(r);a.a=function(e){const{block:a,children:t,defaultValue:r,values:b}=e,[p,i]=Object(n.useState)(r);return l.a.createElement("div",null,l.a.createElement("ul",{className:c()("tabs",{"tabs--block":a})},b.map(({value:e,label:a})=>l.a.createElement("li",{className:c()("tab-item",{"tab-item--active":p===e}),key:e,onClick:()=>i(e)},a))),l.a.createElement("div",{className:"margin-vert--md"},n.Children.toArray(t).filter(e=>e.props.value===p)[0]))}},209:function(e,a,t){"use strict";var n=t(0),l=t.n(n);a.a=function(e){return l.a.createElement("div",null,e.children)}}}]);