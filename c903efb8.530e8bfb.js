(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{182:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return p})),a.d(t,"default",(function(){return u}));var n=a(1),r=a(6),c=(a(0),a(204)),l=a(210),o={id:"match-flat-map",title:"Map with keys (Flat map)"},i={id:"match-flat-map",title:"Map with keys (Flat map)",description:"import {CodeTabs, Result} from './code';\r",source:"@site/..\\docs\\match-flat-map.mdx",permalink:"/docs/match-flat-map",lastUpdatedAt:1586997896,sidebar:"docs",previous:{title:"Map occurrences",permalink:"/docs/match-map"},next:{title:"Match details",permalink:"/docs/match-details"}},p=[{value:"Making a flat map",id:"making-a-flat-map",children:[]},{value:"Return types",id:"return-types",children:[]},{value:"Variable callbacks",id:"variable-callbacks",children:[]},{value:"Mapping with keys",id:"mapping-with-keys",children:[]},{value:"Duplicate keys",id:"duplicate-keys",children:[]}],s={rightToc:p};function u(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"There are cases when you would like to create a single list of all your matches. ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is great for it.\nIt other words it allows you to return one, zero or more elements from your mapping function."),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"->map(function () {\n    return $value;        // Exactly one element\n}\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{}),"->flatMap(function () {\n    return [...$values];  // Can be 1, many or even zero elements\n}\n")),Object(c.b)("h2",{id:"making-a-flat-map"},"Making a flat map"),Object(c.b)("p",null,"Method ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," is basically method ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(c.b)("inlineCode",{parentName:"a"},"map()")),", from which you can return multiple values."),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match('I have 19 trains')->flatMap(function (Match $match) {\n    return [\n        $match->text(), strlen($match)\n    ];\n});",php:"preg::match_all(\"/\\w+/\", 'I have 19 trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [\n        $text, strlen($text)\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"['I', 1, 'have', 4, '19', 2, 'trains', 6]"),Object(c.b)("h2",{id:"return-types"},"Return types"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," only accepts an ",Object(c.b)("inlineCode",{parentName:"p"},"array")," as its return type. Returning a single element and implicitly creating a one-element\narray under the hood would break our ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/whats-the-point#t-regx-to-the-rescue"}),'"Explicity rule"'),"."),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Match $match) {\n    return $match;  // <- throws InvalidReturnValueException\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    throw new InvalidReturnValueException(); // <- throws InvalidReturnValueException\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)("p",null,"So always remember to return an array."),Object(c.b)(l.a,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Match $match) {\n    return [$match->text()];  // ok\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [$text];   // ok\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)("h2",{id:"variable-callbacks"},"Variable callbacks"),Object(c.b)("p",null,"You can invoke ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," with any valid PHP ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/language.types.callable.php"}),Object(c.b)("inlineCode",{parentName:"a"},"callable")),", which accepts one or zero string parameters\n(just like ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"match-first.md"}),Object(c.b)("inlineCode",{parentName:"a"},"first()"))," and ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-map"}),Object(c.b)("inlineCode",{parentName:"a"},"map()")),") and returns ",Object(c.b)("inlineCode",{parentName:"p"},"array"),"."),Object(c.b)(l.a,{tregx:"pattern(\"[\\w']+\")->match(\"I'm 19 years old\")->flatMap('str_split');",php:"preg::match_all(\"/[\\w']+/\", \"I'm 19 years old\", $matches);\nreturn array_merge(...array_map('str_split', $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"['I', '\\'', 'm', '1', '9', 'y', 'e', 'a', 'r', 's', 'o', 'l', 'd']"),Object(c.b)("p",null,"The ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.php.net/manual/en/language.types.callable.php"}),Object(c.b)("inlineCode",{parentName:"a"},"callable"))," passed to ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," must return an array. ",Object(c.b)("inlineCode",{parentName:"p"},"InvalidReturnValueException")," is thrown, otherwise."),Object(c.b)("h2",{id:"mapping-with-keys"},"Mapping with keys"),Object(c.b)("p",null,"Because ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," receives an array from its callback, it's possible to also return an associative array with\nspecified keys:"),Object(c.b)(l.a,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMap(function (Match $match) {\n    return [$match->text() => $match->offset()];   // offset is UTF-8 safe\n});',php:'preg::match_all("/\\w+/", "Apples are cool", $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) {\n    return [$match[0] => $match[1]];    // offset is given in bytes\n}, $matches[0]));',mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"[\n    'Apples' => 0,\n    'are'    => 7,\n    'cool'   => 11\n]"),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},"Keep in mind that ",Object(c.b)("inlineCode",{parentName:"p"},"flatMap()")," uses ",Object(c.b)("inlineCode",{parentName:"p"},"array_merge()")," to flatten the results! So If you use ",Object(c.b)("inlineCode",{parentName:"p"},"int")," as a key, or even\na ",Object(c.b)("inlineCode",{parentName:"p"},"string")," with numeric values (like ",Object(c.b)("inlineCode",{parentName:"p"},"'19'"),") they will be ",Object(c.b)("strong",{parentName:"p"},"reindexed")," by ",Object(c.b)("inlineCode",{parentName:"p"},"array_merge()"),".")),Object(c.b)("blockquote",null,Object(c.b)("p",{parentName:"blockquote"},Object(c.b)("inlineCode",{parentName:"p"},"Match.offset()")," returns offset as a ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),"valid UTF-8 sequence"),", whereas ",Object(c.b)("inlineCode",{parentName:"p"},"preg::match_all"),"\ncounts them as ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),"bytes"),". To return bytes number with T-Regx as well,\nuse ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/match-details#offsets"}),Object(c.b)("inlineCode",{parentName:"a"},"byteOffset()")),".")),Object(c.b)("h2",{id:"duplicate-keys"},"Duplicate keys"),Object(c.b)("p",null,"Duplicate keys are not allowed in PHP arrays, so they'll only appear once in the results."),Object(c.b)(l.a,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMap(function (Match $match) {\n    return [\n        $match->text() => $match->offset(),   // offset is UTF-8 safe\n        \'subject\'      => $match->subject()\n    ];\n});',php:"$subject = 'Apples are cool';\npreg::match_all(\"/\\w+/\", $subject, $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) use ($subject) {\n    return [\n        $match[0] => $match[1],   // offset is given in bytes\n        'subject' => $subject\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),Object(c.b)(l.b,{mdxType:"Result"},"[\n    'Apples'  => 0,\n    'subject' => \"Apples are cool\",\n    'are'     => 7,\n    'cool'    => 11\n]"))}u.isMDXComponent=!0},204:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return h}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),s=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o({},t,{},e)),a},u=function(e){var t=s(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(a),m=n,h=u["".concat(l,".").concat(m)]||u[m]||b[m]||c;return a?r.a.createElement(h,o({ref:t},p,{components:a})):r.a.createElement(h,o({ref:t},p))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var p=2;p<c;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},206:function(e,t,a){"use strict";var n=a(0),r=a.n(n);t.a=function(e){return r.a.createElement("div",null,e.children)}},207:function(e,t,a){"use strict";var n=a(0),r=a.n(n),c=a(212);var l=function(){return Object(n.useContext)(c.a)},o=a(205),i=a.n(o),p=a(93),s=a.n(p);const u=37,b=39;t.a=function(e){const{block:t,children:a,defaultValue:c,values:o,groupId:p}=e,{tabGroupChoices:m,setTabGroupChoices:h}=l(),[f,d]=Object(n.useState)(c);if(null!=p){const e=m[p];null!=e&&e!==f&&d(e)}const y=e=>{d(e),null!=p&&h(p,e)},O=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:i()("tabs",{"tabs--block":t})},o.map(({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:"0","aria-selected":f===e,className:i()("tab-item",s.a.tabItem,{"tab-item--active":f===e}),key:e,ref:e=>O.push(e),onKeyDown:e=>((e,t,a)=>{switch(a.keyCode){case b:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case u:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(O,e.target,e),onFocus:()=>y(e),onClick:()=>y(e)},t))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter(e=>e.props.value===f)[0]))}},208:function(e,t,a){"use strict";var n=a(209),r={};r[a(11)("toStringTag")]="z",r+""!="[object z]"&&a(19)(Object.prototype,"toString",(function(){return"[object "+n(this)+"]"}),!0)},209:function(e,t,a){var n=a(53),r=a(11)("toStringTag"),c="Arguments"==n(function(){return arguments}());e.exports=function(e){var t,a,l;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(a=function(e,t){try{return e[t]}catch(a){}}(t=Object(e),r))?a:c?n(t):"Object"==(l=n(t))&&"function"==typeof t.callee?"Arguments":l}},210:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return d}));a(12),a(52),a(208);function n(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var r=a(5),c=a(0),l=a.n(c),o=a(207),i=a(206),p=a(213),s=a(94),u=a.n(s);class b extends l.a.Component{render(){return l.a.createElement("div",{className:u.a.code},l.a.createElement(p.a,{className:`language-${this.language}`},this.code))}get language(){return this.props.language||"php"}get code(){let e=this.props.children;if("string"==typeof e)return e;if(Array.isArray(e)&&e.every(e=>"string"==typeof e))return e.join("");throw console.log(this.props.children),"Unexpected child of <Code>"}}var m=function(e){function t(){return e.apply(this,arguments)||this}var a,c,p;return Object(r.a)(t,e),t.prototype.render=function(){return l.a.createElement(l.a.Fragment,null,l.a.createElement(o.a,{defaultValue:"t-regx",values:this.values},this.props.tregx&&l.a.createElement(i.a,{value:"t-regx"},l.a.createElement(b,null,this.props.tregx)),this.props.php&&l.a.createElement(i.a,{value:"php"},l.a.createElement(b,null,this.props.php))))},a=t,(c=[{key:"values",get:function(){return[this.props.tregx?{label:"T-Regx",value:"t-regx"}:{},this.props.php?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}}])&&n(a.prototype,c),p&&n(a,p),t}(l.a.Component),h=a(95),f=a.n(h),d=function(e){var t=e.text,a=e.children;return l.a.createElement("div",{className:f.a.result},l.a.createElement(b,{language:t?"text":"php"},a))}}}]);