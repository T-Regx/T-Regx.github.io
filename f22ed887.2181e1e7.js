(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{185:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),o=(a(0),a(198)),c=a(200),i={id:"match-offsets",title:"Match offsets"},s={unversionedId:"match-offsets",id:"match-offsets",isDocsHomePage:!1,title:"Match offsets",description:"There are several ways to read offsets of your matched occurrences and your capturing groups.",source:"@site/../docs/match-offsets.mdx",slug:"/match-offsets",permalink:"/docs/match-offsets",version:"current",lastUpdatedAt:1611615683,sidebar:"docs",previous:{title:"Capturing groups",permalink:"/docs/match-groups"},next:{title:"Inline groups",permalink:"/docs/match-group"}},l=[{value:"Using Detail",id:"using-detail",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method",children:[{value:"Many",id:"many",children:[]},{value:"One",id:"one",children:[]}]},{value:"Group offsets",id:"group-offsets",children:[{value:"Using Detail",id:"using-detail-1",children:[]},{value:"Using inline <code>offsets()</code> method",id:"using-inline-offsets-method-1",children:[]}]}],p={toc:l};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"There are several ways to read offsets of your matched occurrences and your capturing groups."),Object(o.b)("h2",{id:"using-detail"},"Using ",Object(o.b)("a",{parentName:"h2",href:"/docs/match-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail"))),Object(o.b)("p",null,"If you use ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail"))," object (like the one passed to ",Object(o.b)("a",{parentName:"p",href:"/docs/match-first"},Object(o.b)("inlineCode",{parentName:"a"},"first()")),", ",Object(o.b)("a",{parentName:"p",href:"/docs/match-for-each"},Object(o.b)("inlineCode",{parentName:"a"},"forEach()"))," or ",Object(o.b)("a",{parentName:"p",href:"/docs/match-map"},Object(o.b)("inlineCode",{parentName:"a"},"map()"))," callback) you can just use\n",Object(o.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," method."),Object(o.b)(c.a,{tregx:"pattern('\\d+')->match('I was born in 1996')->first(function (Detail $detail) {\n    return 'Match was found at ' . $detail->offset();\n});",php:"preg::match_all('/\\d+/', 'I was born in 1996', $match, PREG_OFFSET_CAPTURE);\nreturn 'Match was found at ' . $match[0][0][1];",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"'Match was found at 14'"),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Method ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," is UTF-8 safe and returns offsets in characters, not bytes.\nFor bytes, consider using ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(o.b)("inlineCode",{parentName:"a"},"byteOffset()"))," method."))),Object(o.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Use ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(o.b)("inlineCode",{parentName:"a"},"offset()"))," with multibyte-safe methods like ",Object(o.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.mb-substr.php"},Object(o.b)("inlineCode",{parentName:"a"},"mb_substr()")),", and ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details#offsets"},Object(o.b)("inlineCode",{parentName:"a"},"byteOffset()"))," with methods like ",Object(o.b)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.substr.php"},Object(o.b)("inlineCode",{parentName:"a"},"substr()")),"."))),Object(o.b)("h2",{id:"using-inline-offsets-method"},"Using inline ",Object(o.b)("inlineCode",{parentName:"h2"},"offsets()")," method"),Object(o.b)("p",null,"Use inline methods to simply return the offsets - when there is no need for using ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail"))," details or any other operations."),Object(o.b)("h3",{id:"many"},"Many"),Object(o.b)("p",null,"If you only want to get offsets of your matches, use ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->all()"),"."),Object(o.b)(c.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, May 12\")->offsets()->all();",php:"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]);",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"[4, 32, 42]"),Object(o.b)("p",null,"You can also limit your matches."),Object(o.b)(c.a,{tregx:"pattern('[0-9]+')->match(\"I'm 19 years old. I was born in 1999, May 12\")->offsets()->only(2);",php:"preg::match_all('/[0-9]+/', \"I'm 19 years old. I was born in 1999, May 12\", $matches, PREG_OFFSET_CAPTURE);\nreturn array_slice(array_map(function (array $match) {\n    return $match[1];\n}, $matches[0]), 0, 2);",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"[4, 32]"),Object(o.b)("h3",{id:"one"},"One"),Object(o.b)("p",null,"To only get offset of the first occurrence of a matched pattern, call ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->first()"),"."),Object(o.b)(c.a,{tregx:"pattern('\\d+')->match(\"I was born in 1999\")->offsets()->first();",php:"preg::match('/[0-9]+/', \"I was born in 1999\", $match, PREG_OFFSET_CAPTURE);\nif ($match) {\n    return $match[0][1];\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"14"),Object(o.b)("p",null,"As any other ",Object(o.b)("a",{parentName:"p",href:"/docs/match-first"},Object(o.b)("inlineCode",{parentName:"a"},"first()"))," method, it throws ",Object(o.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't matched by your pattern."),Object(o.b)("h2",{id:"group-offsets"},"Group offsets"),Object(o.b)("p",null,"In a similar manner, you can get offsets of your capturing groups, either using ",Object(o.b)("a",{parentName:"p",href:"/docs/match-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail"))," or an inline method."),Object(o.b)("p",null,"These two snippets below are equal to each other."),Object(o.b)("h3",{id:"using-detail-1"},"Using ",Object(o.b)("a",{parentName:"h3",href:"/docs/match-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail"))),Object(o.b)(c.a,{tregx:"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->first(function (Detail $detail) {\n    return $detail->group('capital')->offset();\n});",php:"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    }\n    throw new NonexistentGroupException('capital');\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"11"),Object(o.b)("p",null,"Can also be written as..."),Object(o.b)("h3",{id:"using-inline-offsets-method-1"},"Using inline ",Object(o.b)("inlineCode",{parentName:"h3"},"offsets()")," method"),Object(o.b)(c.a,{tregx:"pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->group('capital')->offsets()->first();",php:"if (preg::match('/(?<capital>[A-Z])[a-z]+/', 'my name is John Cena', $match, PREG_OFFSET_CAPTURE)) {\n\n    if (array_key_exists('capital', $match)) {\n        if ($match['capital'][1] === -1) {\n            throw new GroupNotMatchedException('capital');\n        }\n        return $match['capital'][1];\n    }\n\n    // preg_match() trims trailing empty elements, so additional checks are needed\n    // if there's no group key - the group is either un-matched or non-existent\n    if (validateGroupExists('capital', $match)) {\n        throw new GroupNotMatchedException('capital');\n    }\n    throw new NonexistentGroupException('capital');\n}\nthrow new SubjectNotMatchedException();",mdxType:"CodeTabs"}),Object(o.b)(c.b,{mdxType:"Result"},"11"),Object(o.b)("p",null,"Both ",Object(o.b)("inlineCode",{parentName:"p"},"offsets()->first()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"group()->offsets()->first()")," throw ",Object(o.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException")," if the subject isn't\nmatched by your pattern."),Object(o.b)("p",null,"Also, both ",Object(o.b)("a",{parentName:"p",href:"/docs/match-groups#group-details"},Object(o.b)("inlineCode",{parentName:"a"},"Detail.group()"))," details and inline ",Object(o.b)("inlineCode",{parentName:"p"},"match()->group()->offsets()")," throw ",Object(o.b)("inlineCode",{parentName:"p"},"GroupNotMatchedException"),", when used with an unmatched group."))}b.isMDXComponent=!0},198:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(a),m=n,u=b["".concat(c,".").concat(m)]||b[m]||d[m]||o;return a?r.a.createElement(u,i(i({ref:t},l),{},{components:a})):r.a.createElement(u,i({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},200:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return v}));var n=a(0),r=a.n(n),o=a(204),c=a(199),i=a(53),s=a.n(i),l=37,p=39;var b=function(e){var t=e.lazy,a=e.block,i=e.defaultValue,b=e.values,d=e.groupId,m=e.className,u=Object(o.a)(),f=u.tabGroupChoices,h=u.setTabGroupChoices,O=Object(n.useState)(i),j=O[0],y=O[1],g=n.Children.toArray(e.children);if(null!=d){var v=f[d];null!=v&&v!==j&&b.some((function(e){return e.value===v}))&&y(v)}var N=function(e){y(e),null!=d&&h(d,e)},w=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":a},m)},b.map((function(e){var t=e.value,a=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":j===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case p:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(w,e.target,e)},onFocus:function(){return N(t)},onClick:function(){N(t)}},a)}))),t?Object(n.cloneElement)(g.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))};var d=function(e){var t=e.children,a=e.hidden,n=e.className;return r.a.createElement("div",{role:"tabpanel",hidden:a,className:n},t)},m=a(205),u=a(54),f=a.n(u),h=function(e){var t=e.children,a=e.language;return r.a.createElement("div",{className:f.a.code},r.a.createElement(m.a,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};var O=function(e){var t=e.tregx,a=e.php;return r.a.createElement(b,{defaultValue:"t-regx",values:j(t,a)},t&&r.a.createElement(d,{value:"t-regx"},r.a.createElement(h,null,t)),a&&r.a.createElement(d,{value:"php"},r.a.createElement(h,null,a)))};function j(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}var y=a(55),g=a.n(y),v=function(e){var t=e.text,a=e.children;return r.a.createElement("div",{className:g.a.result},r.a.createElement(h,{language:t?"text":"php"},a))}}}]);