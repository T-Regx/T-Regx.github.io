(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return p})),n.d(t,"rightToc",(function(){return r})),n.d(t,"default",(function(){return i}));n(217);var a=n(209);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const p={id:"identities",title:"Identities"},r=[],l={rightToc:r},b="wrapper";function i({components:e,...t}){return Object(a.b)(b,c({},l,t,{components:e,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A curious user might notice, that some parts of T-Regx API are redundant and can be simplified. Here's a list of them:"),Object(a.b)("hr",null),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern($p)->match($s)->forFirst($callback)->orThrow();\n")),Object(a.b)("p",null,"can be simplified to"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern($p)->match($s)->first($callback);\n")),Object(a.b)("p",null,"If the subject doesn't match the pattern - ",Object(a.b)("inlineCode",{parentName:"p"},"first()")," throws ",Object(a.b)("inlineCode",{parentName:"p"},"SubjectNotMatchedException"),", which is the default class\nfor ",Object(a.b)("inlineCode",{parentName:"p"},"orThrow()"),"."),Object(a.b)("hr",null),Object(a.b)("p",null,"Getting the matched text from ",Object(a.b)("a",c({parentName:"p"},{href:"/docs/match-details"}),Object(a.b)("inlineCode",{parentName:"a"},"Match")),"."),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),'pattern($p)->match($subject)->map(function (Match $match) {\n\n    return $match->text();      // using text() method\n    return $match->group(0);    // group #0 is the whole match in all regexp engines\n    return (string) $match;     // cast it to string\n    return "$match";            // enclose it in double quotes\n});\n')),Object(a.b)("hr",null),Object(a.b)("p",null,"Mapping ",Object(a.b)("inlineCode",{parentName:"p"},"Match.text()")," or returning ",Object(a.b)("inlineCode",{parentName:"p"},"Match.all()")," from ",Object(a.b)("inlineCode",{parentName:"p"},"first()"),":"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern($p)->match($s)->first(function (Match $match) {\n    return $match->all();\n});\n\n// and\n\npattern($p)->match($s)->map(function (Match $match) {\n    return $match->text();\n});\n")),Object(a.b)("p",null,"can be simplified to"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),"pattern($p)->match($s)->all();\n")),Object(a.b)("hr",null),Object(a.b)("p",null,"Similarly, mapping ",Object(a.b)("inlineCode",{parentName:"p"},"Match.group()")),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),'pattern($p)->match($s)->map(function (Match $match) {\n    return $match->group("capital")->text();\n});\n')),Object(a.b)("p",null,"can be simplified to"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),'pattern($p)->match($s)->group("capital")->all();\n')),Object(a.b)("p",null,"Also with offsets"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),'pattern($p)->match($s)->map(function (Match $match) {\n    return $match->group("capital")->offset();\n});\n')),Object(a.b)("p",null,"can be simplified to"),Object(a.b)("pre",null,Object(a.b)("code",c({parentName:"pre"},{className:"language-php"}),'pattern($p)->match($s)->group("capital")->offsets()->all();\n')))}i.isMDXComponent=!0}}]);